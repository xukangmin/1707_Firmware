
1707_FIRMWARE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00803800  00002d65  00002e19  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d1e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000047  0000ad1e  00002d1e  00002dd2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000001a0  00803812  00803812  00002e2b  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002e2b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e88  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001a0  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003f14  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000225e  00000000  00000000  00006f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000016ba  00000000  00000000  000091da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005b0  00000000  00000000  0000a894  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000017c4  00000000  00000000  0000ae44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001d80  00000000  00000000  0000c608  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000178  00000000  00000000  0000e388  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__ctors_end>
       4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      10:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      14:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      18:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_6>
      1c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      20:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      24:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      28:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      2c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      30:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      34:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      38:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      3c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      40:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      44:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      48:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      4c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      50:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      54:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      58:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      5c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      60:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      64:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__vector_25>
      68:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      6c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_27>
      70:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      74:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      78:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	6e 61       	ori	r22, 0x1E	; 30
      7e:	6e 00       	.word	0x006e	; ????

00000080 <__c.2332>:
      80:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      90:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      a0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      b0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      c0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      d0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      e0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      f0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     100:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     110:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     120:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     130:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     140:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     150:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     160:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     170:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000017e <pstr_nan>:
     17e:	4e 41 4e                                            NAN

00000181 <pstr_inity>:
     181:	49 4e 49 54 59                                      INITY

00000186 <pstr_inf>:
     186:	49 4e 46                                            INF

00000189 <pwr_m10>:
     189:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     199:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001a1 <pwr_p10>:
     1a1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1b1:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000001ba <__ctors_end>:
     1ba:	11 24       	eor	r1, r1
     1bc:	1f be       	out	0x3f, r1	; 63
     1be:	cf ef       	ldi	r28, 0xFF	; 255
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	df e3       	ldi	r29, 0x3F	; 63
     1c4:	de bf       	out	0x3e, r29	; 62

000001c6 <__do_copy_data>:
     1c6:	18 e3       	ldi	r17, 0x38	; 56
     1c8:	a0 e0       	ldi	r26, 0x00	; 0
     1ca:	b8 e3       	ldi	r27, 0x38	; 56
     1cc:	e5 e6       	ldi	r30, 0x65	; 101
     1ce:	fd e2       	ldi	r31, 0x2D	; 45
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__do_copy_data+0x10>
     1d2:	05 90       	lpm	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	a2 31       	cpi	r26, 0x12	; 18
     1d8:	b1 07       	cpc	r27, r17
     1da:	d9 f7       	brne	.-10     	; 0x1d2 <__do_copy_data+0xc>

000001dc <__do_clear_bss>:
     1dc:	29 e3       	ldi	r18, 0x39	; 57
     1de:	a2 e1       	ldi	r26, 0x12	; 18
     1e0:	b8 e3       	ldi	r27, 0x38	; 56
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <.do_clear_bss_start>

000001e4 <.do_clear_bss_loop>:
     1e4:	1d 92       	st	X+, r1

000001e6 <.do_clear_bss_start>:
     1e6:	a2 3b       	cpi	r26, 0xB2	; 178
     1e8:	b2 07       	cpc	r27, r18
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <.do_clear_bss_loop>
     1ec:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <main>
     1f0:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <_exit>

000001f4 <__bad_interrupt>:
     1f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f8 <__vector_27>:
	"RST"
};


ISR(USART0_RXC_vect)
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	8f 93       	push	r24
     204:	9f 93       	push	r25
     206:	af 93       	push	r26
     208:	bf 93       	push	r27
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
	if (handle_uart_flag == 0) 
     20e:	80 91 8c 38 	lds	r24, 0x388C	; 0x80388c <handle_uart_flag>
     212:	90 91 8d 38 	lds	r25, 0x388D	; 0x80388d <handle_uart_flag+0x1>
     216:	89 2b       	or	r24, r25
     218:	e9 f5       	brne	.+122    	; 0x294 <__vector_27+0x9c>
	{
		rev = USART0_RXDATAL;
     21a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     21e:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <rev>
		if (rev == '#' && v == 0)
     222:	83 32       	cpi	r24, 0x23	; 35
     224:	b1 f4       	brne	.+44     	; 0x252 <__vector_27+0x5a>
     226:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <v>
     22a:	91 11       	cpse	r25, r1
     22c:	12 c0       	rjmp	.+36     	; 0x252 <__vector_27+0x5a>
		{
			v = 1;
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <v>
			memset(recv,0,sizeof(recv));
     234:	80 e8       	ldi	r24, 0x80	; 128
     236:	ee ea       	ldi	r30, 0xAE	; 174
     238:	f8 e3       	ldi	r31, 0x38	; 56
     23a:	df 01       	movw	r26, r30
     23c:	1d 92       	st	X+, r1
     23e:	8a 95       	dec	r24
     240:	e9 f7       	brne	.-6      	; 0x23c <__vector_27+0x44>
			recv[v - 1] = rev;
     242:	e0 91 9a 38 	lds	r30, 0x389A	; 0x80389a <v>
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	e3 55       	subi	r30, 0x53	; 83
     24a:	f7 4c       	sbci	r31, 0xC7	; 199
     24c:	83 e2       	ldi	r24, 0x23	; 35
     24e:	80 83       	st	Z, r24
     250:	23 c0       	rjmp	.+70     	; 0x298 <__vector_27+0xa0>
		} 
		else if (v > 0) {
     252:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <v>
     256:	99 23       	and	r25, r25
     258:	d1 f0       	breq	.+52     	; 0x28e <__vector_27+0x96>
			recv[v] = rev;
     25a:	e0 91 9a 38 	lds	r30, 0x389A	; 0x80389a <v>
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	e2 55       	subi	r30, 0x52	; 82
     262:	f7 4c       	sbci	r31, 0xC7	; 199
     264:	80 83       	st	Z, r24
			v++;
     266:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <v>
     26a:	9f 5f       	subi	r25, 0xFF	; 255
     26c:	90 93 9a 38 	sts	0x389A, r25	; 0x80389a <v>

			if (v >= MAX_BUFFER_SIZE)
     270:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <v>
     274:	99 23       	and	r25, r25
     276:	14 f4       	brge	.+4      	; 0x27c <__vector_27+0x84>
			{
				v = 0;
     278:	10 92 9a 38 	sts	0x389A, r1	; 0x80389a <v>
			}
			
			if (rev == 0x0d)
     27c:	8d 30       	cpi	r24, 0x0D	; 13
     27e:	61 f4       	brne	.+24     	; 0x298 <__vector_27+0xa0>
			{
				handle_uart_flag = 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	80 93 8c 38 	sts	0x388C, r24	; 0x80388c <handle_uart_flag>
     288:	90 93 8d 38 	sts	0x388D, r25	; 0x80388d <handle_uart_flag+0x1>
     28c:	05 c0       	rjmp	.+10     	; 0x298 <__vector_27+0xa0>
			}
		} else {
			v = 0;
     28e:	10 92 9a 38 	sts	0x389A, r1	; 0x80389a <v>
     292:	02 c0       	rjmp	.+4      	; 0x298 <__vector_27+0xa0>
		}
	} else {
		USART0_RXDATAL;  // discard data when processing
     294:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
	}
	USART0_STATUS |= ( 1 << USART_RXCIE_bp);
     298:	e4 e0       	ldi	r30, 0x04	; 4
     29a:	f8 e0       	ldi	r31, 0x08	; 8
     29c:	80 81       	ld	r24, Z
     29e:	80 68       	ori	r24, 0x80	; 128
     2a0:	80 83       	st	Z, r24
}
     2a2:	ff 91       	pop	r31
     2a4:	ef 91       	pop	r30
     2a6:	bf 91       	pop	r27
     2a8:	af 91       	pop	r26
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <__vector_6>:



ISR(RTC_CNT_vect) {
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	8f 93       	push	r24
     2c4:	ef 93       	push	r30
     2c6:	ff 93       	push	r31
	read_temp_flag = 1;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <read_temp_flag>
	RTC_INTFLAGS |= (1 << RTC_OVF_bp);
     2ce:	e3 e4       	ldi	r30, 0x43	; 67
     2d0:	f1 e0       	ldi	r31, 0x01	; 1
     2d2:	80 81       	ld	r24, Z
     2d4:	81 60       	ori	r24, 0x01	; 1
     2d6:	80 83       	st	Z, r24
}
     2d8:	ff 91       	pop	r31
     2da:	ef 91       	pop	r30
     2dc:	8f 91       	pop	r24
     2de:	0f 90       	pop	r0
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	0f 90       	pop	r0
     2e4:	1f 90       	pop	r1
     2e6:	18 95       	reti

000002e8 <EEPROM_read>:


unsigned char EEPROM_read(unsigned int ucAddress)
{
     2e8:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
     2ea:	e0 e0       	ldi	r30, 0x00	; 0
     2ec:	f0 e1       	ldi	r31, 0x10	; 16
     2ee:	92 81       	ldd	r25, Z+2	; 0x02
     2f0:	91 fd       	sbrc	r25, 1
     2f2:	fd cf       	rjmp	.-6      	; 0x2ee <EEPROM_read+0x6>

	return *(uint8_t *)(EEPROM_START + ucAddress);
     2f4:	f9 01       	movw	r30, r18
     2f6:	fc 5e       	subi	r31, 0xEC	; 236
}
     2f8:	80 81       	ld	r24, Z
     2fa:	08 95       	ret

000002fc <EEPROM_write>:

void EEPROM_write(unsigned int ucAddress, unsigned char ucData)
{
     2fc:	9c 01       	movw	r18, r24

	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	f0 e1       	ldi	r31, 0x10	; 16
     302:	92 81       	ldd	r25, Z+2	; 0x02
     304:	91 fd       	sbrc	r25, 1
     306:	fd cf       	rjmp	.-6      	; 0x302 <EEPROM_write+0x6>

	*(uint8_t *)(EEPROM_START + ucAddress) = ucData;
     308:	f9 01       	movw	r30, r18
     30a:	fc 5e       	subi	r31, 0xEC	; 236
     30c:	60 83       	st	Z, r22

	CCP = CCP_SPM_gc;
     30e:	8d e9       	ldi	r24, 0x9D	; 157
     310:	84 bf       	out	0x34, r24	; 52
	NVMCTRL.CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;
     312:	83 e0       	ldi	r24, 0x03	; 3
     314:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     318:	08 95       	ret

0000031a <write_temp_cal_eeprom>:
}


void write_temp_cal_eeprom()
{
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	0a ea       	ldi	r16, 0xAA	; 170
     32c:	18 e3       	ldi	r17, 0x38	; 56
     32e:	78 01       	movw	r14, r16
     330:	c7 e0       	ldi	r28, 0x07	; 7
     332:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_a,sizeof(float));
     334:	0f 2e       	mov	r0, r31
     336:	ff e3       	ldi	r31, 0x3F	; 63
     338:	cf 2e       	mov	r12, r31
     33a:	f9 e3       	ldi	r31, 0x39	; 57
     33c:	df 2e       	mov	r13, r31
     33e:	f0 2d       	mov	r31, r0
     340:	f6 01       	movw	r30, r12
     342:	80 81       	ld	r24, Z
     344:	91 81       	ldd	r25, Z+1	; 0x01
     346:	a2 81       	ldd	r26, Z+2	; 0x02
     348:	b3 81       	ldd	r27, Z+3	; 0x03
     34a:	80 93 aa 38 	sts	0x38AA, r24	; 0x8038aa <tmp>
     34e:	90 93 ab 38 	sts	0x38AB, r25	; 0x8038ab <tmp+0x1>
     352:	a0 93 ac 38 	sts	0x38AC, r26	; 0x8038ac <tmp+0x2>
     356:	b0 93 ad 38 	sts	0x38AD, r27	; 0x8038ad <tmp+0x3>
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + i, tmp[i]);
     35a:	f7 01       	movw	r30, r14
     35c:	61 91       	ld	r22, Z+
     35e:	7f 01       	movw	r14, r30
     360:	ce 01       	movw	r24, r28
     362:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
     366:	21 96       	adiw	r28, 0x01	; 1

void write_temp_cal_eeprom()
{
	int i;
	
	for(i = 0; i < sizeof(float); i++)
     368:	cb 30       	cpi	r28, 0x0B	; 11
     36a:	d1 05       	cpc	r29, r1
     36c:	49 f7       	brne	.-46     	; 0x340 <write_temp_cal_eeprom+0x26>
     36e:	0f 2e       	mov	r0, r31
     370:	fa ea       	ldi	r31, 0xAA	; 170
     372:	ef 2e       	mov	r14, r31
     374:	f8 e3       	ldi	r31, 0x38	; 56
     376:	ff 2e       	mov	r15, r31
     378:	f0 2d       	mov	r31, r0
	}
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_b,sizeof(float));
     37a:	0f 2e       	mov	r0, r31
     37c:	f2 e5       	ldi	r31, 0x52	; 82
     37e:	cf 2e       	mov	r12, r31
     380:	f9 e3       	ldi	r31, 0x39	; 57
     382:	df 2e       	mov	r13, r31
     384:	f0 2d       	mov	r31, r0
     386:	f6 01       	movw	r30, r12
     388:	80 81       	ld	r24, Z
     38a:	91 81       	ldd	r25, Z+1	; 0x01
     38c:	a2 81       	ldd	r26, Z+2	; 0x02
     38e:	b3 81       	ldd	r27, Z+3	; 0x03
     390:	80 93 aa 38 	sts	0x38AA, r24	; 0x8038aa <tmp>
     394:	90 93 ab 38 	sts	0x38AB, r25	; 0x8038ab <tmp+0x1>
     398:	a0 93 ac 38 	sts	0x38AC, r26	; 0x8038ac <tmp+0x2>
     39c:	b0 93 ad 38 	sts	0x38AD, r27	; 0x8038ad <tmp+0x3>
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + sizeof(float) + i, tmp[i]);
     3a0:	f7 01       	movw	r30, r14
     3a2:	61 91       	ld	r22, Z+
     3a4:	7f 01       	movw	r14, r30
     3a6:	ce 01       	movw	r24, r28
     3a8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
     3ac:	21 96       	adiw	r28, 0x01	; 1
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_a,sizeof(float));
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + i, tmp[i]);
	}
	
	for(i = 0; i < sizeof(float); i++)
     3ae:	cf 30       	cpi	r28, 0x0F	; 15
     3b0:	d1 05       	cpc	r29, r1
     3b2:	49 f7       	brne	.-46     	; 0x386 <write_temp_cal_eeprom+0x6c>
	}
	
	for(i = 0; i < sizeof(float); i++)
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_c,sizeof(float));
     3b4:	0f 2e       	mov	r0, r31
     3b6:	f6 ea       	ldi	r31, 0xA6	; 166
     3b8:	ef 2e       	mov	r14, r31
     3ba:	f8 e3       	ldi	r31, 0x38	; 56
     3bc:	ff 2e       	mov	r15, r31
     3be:	f0 2d       	mov	r31, r0
     3c0:	f7 01       	movw	r30, r14
     3c2:	80 81       	ld	r24, Z
     3c4:	91 81       	ldd	r25, Z+1	; 0x01
     3c6:	a2 81       	ldd	r26, Z+2	; 0x02
     3c8:	b3 81       	ldd	r27, Z+3	; 0x03
     3ca:	80 93 aa 38 	sts	0x38AA, r24	; 0x8038aa <tmp>
     3ce:	90 93 ab 38 	sts	0x38AB, r25	; 0x8038ab <tmp+0x1>
     3d2:	a0 93 ac 38 	sts	0x38AC, r26	; 0x8038ac <tmp+0x2>
     3d6:	b0 93 ad 38 	sts	0x38AD, r27	; 0x8038ad <tmp+0x3>
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + 2 * sizeof(float) + i, tmp[i]);
     3da:	f8 01       	movw	r30, r16
     3dc:	61 91       	ld	r22, Z+
     3de:	8f 01       	movw	r16, r30
     3e0:	ce 01       	movw	r24, r28
     3e2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
     3e6:	21 96       	adiw	r28, 0x01	; 1
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_b,sizeof(float));
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + sizeof(float) + i, tmp[i]);
	}
	
	for(i = 0; i < sizeof(float); i++)
     3e8:	c3 31       	cpi	r28, 0x13	; 19
     3ea:	d1 05       	cpc	r29, r1
     3ec:	49 f7       	brne	.-46     	; 0x3c0 <write_temp_cal_eeprom+0xa6>
	{
		memset(tmp,0,sizeof(float));
		memcpy(tmp,&cal_c,sizeof(float));
		EEPROM_write(EEPROM_CAL_TEMP_START_BYTE + 2 * sizeof(float) + i, tmp[i]);
	}
}
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	df 90       	pop	r13
     3fc:	cf 90       	pop	r12
     3fe:	08 95       	ret

00000400 <init_config>:

void init_config()
{
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
	int i;
	
	
	cal_a = DEFAULT_CAL_A;
     40c:	10 92 3f 39 	sts	0x393F, r1	; 0x80393f <cal_a>
     410:	10 92 40 39 	sts	0x3940, r1	; 0x803940 <cal_a+0x1>
     414:	10 92 41 39 	sts	0x3941, r1	; 0x803941 <cal_a+0x2>
     418:	10 92 42 39 	sts	0x3942, r1	; 0x803942 <cal_a+0x3>
	cal_b = DEFAULT_CAL_B;
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	a0 e8       	ldi	r26, 0x80	; 128
     422:	bf e3       	ldi	r27, 0x3F	; 63
     424:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <cal_b>
     428:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <cal_b+0x1>
     42c:	a0 93 54 39 	sts	0x3954, r26	; 0x803954 <cal_b+0x2>
     430:	b0 93 55 39 	sts	0x3955, r27	; 0x803955 <cal_b+0x3>
	cal_c = DEFAULT_CAL_C;
     434:	10 92 a6 38 	sts	0x38A6, r1	; 0x8038a6 <cal_c>
     438:	10 92 a7 38 	sts	0x38A7, r1	; 0x8038a7 <cal_c+0x1>
     43c:	10 92 a8 38 	sts	0x38A8, r1	; 0x8038a8 <cal_c+0x2>
     440:	10 92 a9 38 	sts	0x38A9, r1	; 0x8038a9 <cal_c+0x3>
	
	cal_d = DEFAULT_CAL_D;
     444:	10 92 35 39 	sts	0x3935, r1	; 0x803935 <cal_d>
     448:	10 92 36 39 	sts	0x3936, r1	; 0x803936 <cal_d+0x1>
     44c:	10 92 37 39 	sts	0x3937, r1	; 0x803937 <cal_d+0x2>
     450:	10 92 38 39 	sts	0x3938, r1	; 0x803938 <cal_d+0x3>
	cal_e = DEFAULT_CAL_E;
     454:	80 93 3b 39 	sts	0x393B, r24	; 0x80393b <cal_e>
     458:	90 93 3c 39 	sts	0x393C, r25	; 0x80393c <cal_e+0x1>
     45c:	a0 93 3d 39 	sts	0x393D, r26	; 0x80393d <cal_e+0x2>
     460:	b0 93 3e 39 	sts	0x393E, r27	; 0x80393e <cal_e+0x3>
	cal_f = DEFAULT_CAL_F;
     464:	10 92 6c 39 	sts	0x396C, r1	; 0x80396c <cal_f>
     468:	10 92 6d 39 	sts	0x396D, r1	; 0x80396d <cal_f+0x1>
     46c:	10 92 6e 39 	sts	0x396E, r1	; 0x80396e <cal_f+0x2>
     470:	10 92 6f 39 	sts	0x396F, r1	; 0x80396f <cal_f+0x3>
     474:	0f 2e       	mov	r0, r31
     476:	fe e1       	ldi	r31, 0x1E	; 30
     478:	ef 2e       	mov	r14, r31
     47a:	fd ea       	ldi	r31, 0xAD	; 173
     47c:	ff 2e       	mov	r15, r31
     47e:	f0 2d       	mov	r31, r0
     480:	0b e4       	ldi	r16, 0x4B	; 75
     482:	19 e3       	ldi	r17, 0x39	; 57

	for(i = 0; i < 6; i++)
     484:	c0 e0       	ldi	r28, 0x00	; 0
     486:	d0 e0       	ldi	r29, 0x00	; 0
	{
		addr[i] = DEFAULT_ADDR[i];
     488:	f7 01       	movw	r30, r14
     48a:	61 91       	ld	r22, Z+
     48c:	7f 01       	movw	r14, r30
     48e:	f8 01       	movw	r30, r16
     490:	61 93       	st	Z+, r22
     492:	8f 01       	movw	r16, r30
		EEPROM_write(EEPROM_ADDR_START_BYTE + i, DEFAULT_ADDR[i]);
     494:	21 96       	adiw	r28, 0x01	; 1
     496:	ce 01       	movw	r24, r28
     498:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
	
	cal_d = DEFAULT_CAL_D;
	cal_e = DEFAULT_CAL_E;
	cal_f = DEFAULT_CAL_F;

	for(i = 0; i < 6; i++)
     49c:	c6 30       	cpi	r28, 0x06	; 6
     49e:	d1 05       	cpc	r29, r1
     4a0:	99 f7       	brne	.-26     	; 0x488 <init_config+0x88>
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f5 e2       	ldi	r31, 0x25	; 37
     4a6:	ef 2e       	mov	r14, r31
     4a8:	fd ea       	ldi	r31, 0xAD	; 173
     4aa:	ff 2e       	mov	r15, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	03 e4       	ldi	r16, 0x43	; 67
     4b0:	19 e3       	ldi	r17, 0x39	; 57
     4b2:	c2 e2       	ldi	r28, 0x22	; 34
     4b4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	// setting = [Single Address x 2 bytes] + [uart baud rate x 2 bytes] + [check_sum_enable x 1 byte] + [delay x 1 byte] + [avg_level x 1 byte]
	for(i = 0; i < 8; i++)
	{
		setting[i] = DEFAULT_SETTING[i];
     4b6:	f7 01       	movw	r30, r14
     4b8:	61 91       	ld	r22, Z+
     4ba:	7f 01       	movw	r14, r30
     4bc:	f8 01       	movw	r30, r16
     4be:	61 93       	st	Z+, r22
     4c0:	8f 01       	movw	r16, r30
		EEPROM_write(EEPROM_SETTING_START_BYTE + i, DEFAULT_SETTING[i]);
     4c2:	ce 01       	movw	r24, r28
     4c4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
     4c8:	21 96       	adiw	r28, 0x01	; 1
		addr[i] = DEFAULT_ADDR[i];
		EEPROM_write(EEPROM_ADDR_START_BYTE + i, DEFAULT_ADDR[i]);
	}
	
	// setting = [Single Address x 2 bytes] + [uart baud rate x 2 bytes] + [check_sum_enable x 1 byte] + [delay x 1 byte] + [avg_level x 1 byte]
	for(i = 0; i < 8; i++)
     4ca:	ca 32       	cpi	r28, 0x2A	; 42
     4cc:	d1 05       	cpc	r29, r1
     4ce:	99 f7       	brne	.-26     	; 0x4b6 <init_config+0xb6>
	{
		setting[i] = DEFAULT_SETTING[i];
		EEPROM_write(EEPROM_SETTING_START_BYTE + i, DEFAULT_SETTING[i]);
	}
	
	memcpy(hex_tmp, setting + 2, 2);
     4d0:	80 91 45 39 	lds	r24, 0x3945	; 0x803945 <setting+0x2>
     4d4:	90 91 46 39 	lds	r25, 0x3946	; 0x803946 <setting+0x3>
     4d8:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <hex_tmp>
     4dc:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <hex_tmp+0x1>
	uart_baud_rate = GetByteFromString(hex_tmp);
     4e0:	8f e2       	ldi	r24, 0x2F	; 47
     4e2:	99 e3       	ldi	r25, 0x39	; 57
     4e4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <GetByteFromString>
     4e8:	80 93 56 39 	sts	0x3956, r24	; 0x803956 <uart_baud_rate>
	
	check_sum_enable = DEFAULT_SETTING[4] - 0x30;
     4ec:	10 92 a3 38 	sts	0x38A3, r1	; 0x8038a3 <check_sum_enable>
     4f0:	10 92 a4 38 	sts	0x38A4, r1	; 0x8038a4 <check_sum_enable+0x1>
	delay = DEFAULT_SETTING[5] - 0x30;
     4f4:	10 92 a1 38 	sts	0x38A1, r1	; 0x8038a1 <delay>
     4f8:	10 92 a2 38 	sts	0x38A2, r1	; 0x8038a2 <delay+0x1>
	avg_level = DEFAULT_SETTING[6] - 0x30;
     4fc:	85 e0       	ldi	r24, 0x05	; 5
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	80 93 9f 38 	sts	0x389F, r24	; 0x80389f <avg_level>
     504:	90 93 a0 38 	sts	0x38A0, r25	; 0x8038a0 <avg_level+0x1>
	
	write_temp_cal_eeprom();
     508:	0e 94 8d 01 	call	0x31a	; 0x31a <write_temp_cal_eeprom>
	
	EEPROM_write(EEPROM_TEMP_ADDR_START_BYTE, DEFAULT_SINGLE_TEMP_ADDR);
     50c:	61 e4       	ldi	r22, 0x41	; 65
     50e:	8f e1       	ldi	r24, 0x1F	; 31
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
	EEPROM_write(EEPROM_RH_ADDR_START_BYTE, DEFAULT_SINGLE_RH_ADDR);
     516:	63 e4       	ldi	r22, 0x43	; 67
     518:	80 e2       	ldi	r24, 0x20	; 32
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
	EEPROM_write(EEPROM_PRIMARY_ID_START_BYTE, DEFAULT_SINGLE_PRIMARY_ID);
     520:	61 e4       	ldi	r22, 0x41	; 65
     522:	81 e2       	ldi	r24, 0x21	; 33
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	08 95       	ret

00000538 <read_init>:

uint8_t read_init()
{
	return EEPROM_read(EEPROM_INIT_STATUS_BYTE);
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
}
     540:	08 95       	ret

00000542 <load_config>:

void load_config()
{
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	0b e4       	ldi	r16, 0x4B	; 75
     54c:	19 e3       	ldi	r17, 0x39	; 57
	int i;
	for(i = 0; i < 6; i++)
     54e:	c0 e0       	ldi	r28, 0x00	; 0
     550:	d0 e0       	ldi	r29, 0x00	; 0
	{
		addr[i] = EEPROM_read(EEPROM_ADDR_START_BYTE + i);
     552:	21 96       	adiw	r28, 0x01	; 1
     554:	ce 01       	movw	r24, r28
     556:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
     55a:	d8 01       	movw	r26, r16
     55c:	8d 93       	st	X+, r24
     55e:	8d 01       	movw	r16, r26
}

void load_config()
{
	int i;
	for(i = 0; i < 6; i++)
     560:	c6 30       	cpi	r28, 0x06	; 6
     562:	d1 05       	cpc	r29, r1
     564:	b1 f7       	brne	.-20     	; 0x552 <load_config+0x10>
     566:	03 e4       	ldi	r16, 0x43	; 67
     568:	19 e3       	ldi	r17, 0x39	; 57
     56a:	c2 e2       	ldi	r28, 0x22	; 34
     56c:	d0 e0       	ldi	r29, 0x00	; 0
		
	}
	
	for (i = 0; i < 8; i++)
	{
		setting[i] = EEPROM_read(EEPROM_SETTING_START_BYTE + i);
     56e:	ce 01       	movw	r24, r28
     570:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
     574:	f8 01       	movw	r30, r16
     576:	81 93       	st	Z+, r24
     578:	8f 01       	movw	r16, r30
     57a:	21 96       	adiw	r28, 0x01	; 1
	{
		addr[i] = EEPROM_read(EEPROM_ADDR_START_BYTE + i);
		
	}
	
	for (i = 0; i < 8; i++)
     57c:	ca 32       	cpi	r28, 0x2A	; 42
     57e:	d1 05       	cpc	r29, r1
     580:	b1 f7       	brne	.-20     	; 0x56e <load_config+0x2c>
	{
		setting[i] = EEPROM_read(EEPROM_SETTING_START_BYTE + i);
	}
	
	check_sum_enable = setting[4] - 0x30;
     582:	c3 e4       	ldi	r28, 0x43	; 67
     584:	d9 e3       	ldi	r29, 0x39	; 57
     586:	8c 81       	ldd	r24, Y+4	; 0x04
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	c0 97       	sbiw	r24, 0x30	; 48
     58c:	80 93 a3 38 	sts	0x38A3, r24	; 0x8038a3 <check_sum_enable>
     590:	90 93 a4 38 	sts	0x38A4, r25	; 0x8038a4 <check_sum_enable+0x1>
	delay = setting[5] - 0x30;
     594:	8d 81       	ldd	r24, Y+5	; 0x05
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	c0 97       	sbiw	r24, 0x30	; 48
     59a:	80 93 a1 38 	sts	0x38A1, r24	; 0x8038a1 <delay>
     59e:	90 93 a2 38 	sts	0x38A2, r25	; 0x8038a2 <delay+0x1>
	avg_level = setting[6] - 0x30;
     5a2:	8e 81       	ldd	r24, Y+6	; 0x06
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	c0 97       	sbiw	r24, 0x30	; 48
     5a8:	80 93 9f 38 	sts	0x389F, r24	; 0x80389f <avg_level>
     5ac:	90 93 a0 38 	sts	0x38A0, r25	; 0x8038a0 <avg_level+0x1>
	
	memcpy(hex_tmp, setting, 2);
     5b0:	88 81       	ld	r24, Y
     5b2:	99 81       	ldd	r25, Y+1	; 0x01
     5b4:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <hex_tmp>
     5b8:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <hex_tmp+0x1>
	single_temp_addr = GetByteFromString(hex_tmp);
     5bc:	8f e2       	ldi	r24, 0x2F	; 47
     5be:	99 e3       	ldi	r25, 0x39	; 57
     5c0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <GetByteFromString>
     5c4:	80 93 39 39 	sts	0x3939, r24	; 0x803939 <single_temp_addr>
	
	memcpy(hex_tmp, setting + 2, 2);
     5c8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ca:	9b 81       	ldd	r25, Y+3	; 0x03
     5cc:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <hex_tmp>
     5d0:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <hex_tmp+0x1>
	uart_baud_rate = GetByteFromString(hex_tmp);
     5d4:	8f e2       	ldi	r24, 0x2F	; 47
     5d6:	99 e3       	ldi	r25, 0x39	; 57
     5d8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <GetByteFromString>
     5dc:	80 93 56 39 	sts	0x3956, r24	; 0x803956 <uart_baud_rate>
	
	memset(tmp,0,sizeof(tmp));
     5e0:	84 e0       	ldi	r24, 0x04	; 4
     5e2:	ea ea       	ldi	r30, 0xAA	; 170
     5e4:	f8 e3       	ldi	r31, 0x38	; 56
     5e6:	df 01       	movw	r26, r30
     5e8:	1d 92       	st	X+, r1
     5ea:	8a 95       	dec	r24
     5ec:	e9 f7       	brne	.-6      	; 0x5e8 <load_config+0xa6>
	for(m = 0; m < 4; m++)
     5ee:	10 92 99 38 	sts	0x3899, r1	; 0x803899 <m>
     5f2:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     5f6:	84 30       	cpi	r24, 0x04	; 4
     5f8:	b0 f4       	brcc	.+44     	; 0x626 <load_config+0xe4>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + m);
     5fa:	c0 91 99 38 	lds	r28, 0x3899	; 0x803899 <m>
     5fe:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	07 96       	adiw	r24, 0x07	; 7
     606:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
     60a:	ec 2f       	mov	r30, r28
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	e6 55       	subi	r30, 0x56	; 86
     610:	f7 4c       	sbci	r31, 0xC7	; 199
     612:	80 83       	st	Z, r24
	
	memcpy(hex_tmp, setting + 2, 2);
	uart_baud_rate = GetByteFromString(hex_tmp);
	
	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
     614:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     618:	8f 5f       	subi	r24, 0xFF	; 255
     61a:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <m>
     61e:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     622:	84 30       	cpi	r24, 0x04	; 4
     624:	50 f3       	brcs	.-44     	; 0x5fa <load_config+0xb8>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + m);
	}
	memcpy(&cal_a, tmp, sizeof(float));
     626:	ea ea       	ldi	r30, 0xAA	; 170
     628:	f8 e3       	ldi	r31, 0x38	; 56
     62a:	80 81       	ld	r24, Z
     62c:	91 81       	ldd	r25, Z+1	; 0x01
     62e:	a2 81       	ldd	r26, Z+2	; 0x02
     630:	b3 81       	ldd	r27, Z+3	; 0x03
     632:	80 93 3f 39 	sts	0x393F, r24	; 0x80393f <cal_a>
     636:	90 93 40 39 	sts	0x3940, r25	; 0x803940 <cal_a+0x1>
     63a:	a0 93 41 39 	sts	0x3941, r26	; 0x803941 <cal_a+0x2>
     63e:	b0 93 42 39 	sts	0x3942, r27	; 0x803942 <cal_a+0x3>
	
	memset(tmp,0,sizeof(tmp));
     642:	84 e0       	ldi	r24, 0x04	; 4
     644:	df 01       	movw	r26, r30
     646:	1d 92       	st	X+, r1
     648:	8a 95       	dec	r24
     64a:	e9 f7       	brne	.-6      	; 0x646 <load_config+0x104>
	for(m = 0; m < 4; m++)
     64c:	10 92 99 38 	sts	0x3899, r1	; 0x803899 <m>
     650:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     654:	84 30       	cpi	r24, 0x04	; 4
     656:	b0 f4       	brcc	.+44     	; 0x684 <load_config+0x142>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x04 + m);
     658:	c0 91 99 38 	lds	r28, 0x3899	; 0x803899 <m>
     65c:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0b 96       	adiw	r24, 0x0b	; 11
     664:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
     668:	ec 2f       	mov	r30, r28
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	e6 55       	subi	r30, 0x56	; 86
     66e:	f7 4c       	sbci	r31, 0xC7	; 199
     670:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + m);
	}
	memcpy(&cal_a, tmp, sizeof(float));
	
	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
     672:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     676:	8f 5f       	subi	r24, 0xFF	; 255
     678:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <m>
     67c:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     680:	84 30       	cpi	r24, 0x04	; 4
     682:	50 f3       	brcs	.-44     	; 0x658 <load_config+0x116>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_b, tmp, sizeof(float));
     684:	ea ea       	ldi	r30, 0xAA	; 170
     686:	f8 e3       	ldi	r31, 0x38	; 56
     688:	80 81       	ld	r24, Z
     68a:	91 81       	ldd	r25, Z+1	; 0x01
     68c:	a2 81       	ldd	r26, Z+2	; 0x02
     68e:	b3 81       	ldd	r27, Z+3	; 0x03
     690:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <cal_b>
     694:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <cal_b+0x1>
     698:	a0 93 54 39 	sts	0x3954, r26	; 0x803954 <cal_b+0x2>
     69c:	b0 93 55 39 	sts	0x3955, r27	; 0x803955 <cal_b+0x3>

	memset(tmp,0,sizeof(tmp));
     6a0:	84 e0       	ldi	r24, 0x04	; 4
     6a2:	df 01       	movw	r26, r30
     6a4:	1d 92       	st	X+, r1
     6a6:	8a 95       	dec	r24
     6a8:	e9 f7       	brne	.-6      	; 0x6a4 <load_config+0x162>
	for(m = 0; m < 4; m++)
     6aa:	10 92 99 38 	sts	0x3899, r1	; 0x803899 <m>
     6ae:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     6b2:	84 30       	cpi	r24, 0x04	; 4
     6b4:	b0 f4       	brcc	.+44     	; 0x6e2 <load_config+0x1a0>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x08 + m);
     6b6:	c0 91 99 38 	lds	r28, 0x3899	; 0x803899 <m>
     6ba:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0f 96       	adiw	r24, 0x0f	; 15
     6c2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
     6c6:	ec 2f       	mov	r30, r28
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	e6 55       	subi	r30, 0x56	; 86
     6cc:	f7 4c       	sbci	r31, 0xC7	; 199
     6ce:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_b, tmp, sizeof(float));

	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
     6d0:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
     6d6:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <m>
     6da:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     6de:	84 30       	cpi	r24, 0x04	; 4
     6e0:	50 f3       	brcs	.-44     	; 0x6b6 <load_config+0x174>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_TEMP_START_BYTE + 0x08 + m);
	}
	memcpy(&cal_c, tmp, sizeof(float));
     6e2:	ea ea       	ldi	r30, 0xAA	; 170
     6e4:	f8 e3       	ldi	r31, 0x38	; 56
     6e6:	80 81       	ld	r24, Z
     6e8:	91 81       	ldd	r25, Z+1	; 0x01
     6ea:	a2 81       	ldd	r26, Z+2	; 0x02
     6ec:	b3 81       	ldd	r27, Z+3	; 0x03
     6ee:	80 93 a6 38 	sts	0x38A6, r24	; 0x8038a6 <cal_c>
     6f2:	90 93 a7 38 	sts	0x38A7, r25	; 0x8038a7 <cal_c+0x1>
     6f6:	a0 93 a8 38 	sts	0x38A8, r26	; 0x8038a8 <cal_c+0x2>
     6fa:	b0 93 a9 38 	sts	0x38A9, r27	; 0x8038a9 <cal_c+0x3>


	memset(tmp,0,sizeof(tmp));
     6fe:	84 e0       	ldi	r24, 0x04	; 4
     700:	df 01       	movw	r26, r30
     702:	1d 92       	st	X+, r1
     704:	8a 95       	dec	r24
     706:	e9 f7       	brne	.-6      	; 0x702 <load_config+0x1c0>
	for(m = 0; m < 4; m++)
     708:	10 92 99 38 	sts	0x3899, r1	; 0x803899 <m>
     70c:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     710:	84 30       	cpi	r24, 0x04	; 4
     712:	b0 f4       	brcc	.+44     	; 0x740 <load_config+0x1fe>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + m);
     714:	c0 91 99 38 	lds	r28, 0x3899	; 0x803899 <m>
     718:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	43 96       	adiw	r24, 0x13	; 19
     720:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
     724:	ec 2f       	mov	r30, r28
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	e6 55       	subi	r30, 0x56	; 86
     72a:	f7 4c       	sbci	r31, 0xC7	; 199
     72c:	80 83       	st	Z, r24
	}
	memcpy(&cal_c, tmp, sizeof(float));


	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
     72e:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <m>
     738:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     73c:	84 30       	cpi	r24, 0x04	; 4
     73e:	50 f3       	brcs	.-44     	; 0x714 <load_config+0x1d2>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + m);
	}
	memcpy(&cal_d, tmp, sizeof(float));
     740:	ea ea       	ldi	r30, 0xAA	; 170
     742:	f8 e3       	ldi	r31, 0x38	; 56
     744:	80 81       	ld	r24, Z
     746:	91 81       	ldd	r25, Z+1	; 0x01
     748:	a2 81       	ldd	r26, Z+2	; 0x02
     74a:	b3 81       	ldd	r27, Z+3	; 0x03
     74c:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <cal_d>
     750:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <cal_d+0x1>
     754:	a0 93 37 39 	sts	0x3937, r26	; 0x803937 <cal_d+0x2>
     758:	b0 93 38 39 	sts	0x3938, r27	; 0x803938 <cal_d+0x3>
	
	memset(tmp,0,sizeof(tmp));
     75c:	84 e0       	ldi	r24, 0x04	; 4
     75e:	df 01       	movw	r26, r30
     760:	1d 92       	st	X+, r1
     762:	8a 95       	dec	r24
     764:	e9 f7       	brne	.-6      	; 0x760 <load_config+0x21e>
	for(m = 0; m < 4; m++)
     766:	10 92 99 38 	sts	0x3899, r1	; 0x803899 <m>
     76a:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	b0 f4       	brcc	.+44     	; 0x79e <load_config+0x25c>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x04 + m);
     772:	c0 91 99 38 	lds	r28, 0x3899	; 0x803899 <m>
     776:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	47 96       	adiw	r24, 0x17	; 23
     77e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
     782:	ec 2f       	mov	r30, r28
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	e6 55       	subi	r30, 0x56	; 86
     788:	f7 4c       	sbci	r31, 0xC7	; 199
     78a:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + m);
	}
	memcpy(&cal_d, tmp, sizeof(float));
	
	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
     78c:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <m>
     796:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     79a:	84 30       	cpi	r24, 0x04	; 4
     79c:	50 f3       	brcs	.-44     	; 0x772 <load_config+0x230>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_e, tmp, sizeof(float));
     79e:	ea ea       	ldi	r30, 0xAA	; 170
     7a0:	f8 e3       	ldi	r31, 0x38	; 56
     7a2:	80 81       	ld	r24, Z
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	a2 81       	ldd	r26, Z+2	; 0x02
     7a8:	b3 81       	ldd	r27, Z+3	; 0x03
     7aa:	80 93 3b 39 	sts	0x393B, r24	; 0x80393b <cal_e>
     7ae:	90 93 3c 39 	sts	0x393C, r25	; 0x80393c <cal_e+0x1>
     7b2:	a0 93 3d 39 	sts	0x393D, r26	; 0x80393d <cal_e+0x2>
     7b6:	b0 93 3e 39 	sts	0x393E, r27	; 0x80393e <cal_e+0x3>

	memset(tmp,0,sizeof(tmp));
     7ba:	84 e0       	ldi	r24, 0x04	; 4
     7bc:	df 01       	movw	r26, r30
     7be:	1d 92       	st	X+, r1
     7c0:	8a 95       	dec	r24
     7c2:	e9 f7       	brne	.-6      	; 0x7be <load_config+0x27c>
	for(m = 0; m < 4; m++)
     7c4:	10 92 99 38 	sts	0x3899, r1	; 0x803899 <m>
     7c8:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     7cc:	84 30       	cpi	r24, 0x04	; 4
     7ce:	b0 f4       	brcc	.+44     	; 0x7fc <load_config+0x2ba>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x08 + m);
     7d0:	c0 91 99 38 	lds	r28, 0x3899	; 0x803899 <m>
     7d4:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	4b 96       	adiw	r24, 0x1b	; 27
     7dc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_read>
     7e0:	ec 2f       	mov	r30, r28
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	e6 55       	subi	r30, 0x56	; 86
     7e6:	f7 4c       	sbci	r31, 0xC7	; 199
     7e8:	80 83       	st	Z, r24
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x04 + m);
	}
	memcpy(&cal_e, tmp, sizeof(float));

	memset(tmp,0,sizeof(tmp));
	for(m = 0; m < 4; m++)
     7ea:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <m>
     7f4:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <m>
     7f8:	84 30       	cpi	r24, 0x04	; 4
     7fa:	50 f3       	brcs	.-44     	; 0x7d0 <load_config+0x28e>
	{
		tmp[m] = EEPROM_read(EEPROM_CAL_HUM_START_BYTE + 0x08 + m);
	}
	memcpy(&cal_f, tmp, sizeof(float));
     7fc:	80 91 aa 38 	lds	r24, 0x38AA	; 0x8038aa <tmp>
     800:	90 91 ab 38 	lds	r25, 0x38AB	; 0x8038ab <tmp+0x1>
     804:	a0 91 ac 38 	lds	r26, 0x38AC	; 0x8038ac <tmp+0x2>
     808:	b0 91 ad 38 	lds	r27, 0x38AD	; 0x8038ad <tmp+0x3>
     80c:	80 93 6c 39 	sts	0x396C, r24	; 0x80396c <cal_f>
     810:	90 93 6d 39 	sts	0x396D, r25	; 0x80396d <cal_f+0x1>
     814:	a0 93 6e 39 	sts	0x396E, r26	; 0x80396e <cal_f+0x2>
     818:	b0 93 6f 39 	sts	0x396F, r27	; 0x80396f <cal_f+0x3>
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	08 95       	ret

00000826 <build_output>:

void build_output(float data)
{
	v--;
     826:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
     82a:	21 50       	subi	r18, 0x01	; 1
     82c:	20 93 9a 38 	sts	0x389A, r18	; 0x80389a <v>
	write_enabled = 0;
     830:	10 92 a5 38 	sts	0x38A5, r1	; 0x8038a5 <write_enabled>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+09.2f", data);
     834:	30 91 9a 38 	lds	r19, 0x389A	; 0x80389a <v>
     838:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	7f 93       	push	r23
     842:	6f 93       	push	r22
     844:	8e e2       	ldi	r24, 0x2E	; 46
     846:	9d ea       	ldi	r25, 0xAD	; 173
     848:	9f 93       	push	r25
     84a:	8f 93       	push	r24
     84c:	80 e8       	ldi	r24, 0x80	; 128
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	83 1b       	sub	r24, r19
     852:	91 09       	sbc	r25, r1
     854:	9f 93       	push	r25
     856:	8f 93       	push	r24
     858:	82 2f       	mov	r24, r18
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	82 55       	subi	r24, 0x52	; 82
     85e:	97 4c       	sbci	r25, 0xC7	; 199
     860:	9f 93       	push	r25
     862:	8f 93       	push	r24
     864:	0e 94 73 14 	call	0x28e6	; 0x28e6 <snprintf>
     868:	80 93 92 38 	sts	0x3892, r24	; 0x803892 <fstr_size>
     86c:	90 93 93 38 	sts	0x3893, r25	; 0x803893 <fstr_size+0x1>
	v += fstr_size;
     870:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <v>
     874:	89 0f       	add	r24, r25
     876:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <v>
	send_size = v;
     87a:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <send_size>
     884:	90 93 95 38 	sts	0x3895, r25	; 0x803895 <send_size+0x1>
	send_enable = 1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <send_enable>
     890:	90 93 97 38 	sts	0x3897, r25	; 0x803897 <send_enable+0x1>
}
     894:	8d b7       	in	r24, 0x3d	; 61
     896:	9e b7       	in	r25, 0x3e	; 62
     898:	0a 96       	adiw	r24, 0x0a	; 10
     89a:	8d bf       	out	0x3d, r24	; 61
     89c:	9e bf       	out	0x3e, r25	; 62
     89e:	08 95       	ret

000008a0 <build_cal_out_put>:

void build_cal_out_put(float a, float b, float c)
{
     8a0:	8f 92       	push	r8
     8a2:	9f 92       	push	r9
     8a4:	af 92       	push	r10
     8a6:	bf 92       	push	r11
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	b2 2e       	mov	r11, r18
     8ba:	a3 2e       	mov	r10, r19
     8bc:	94 2e       	mov	r9, r20
     8be:	85 2e       	mov	r8, r21
	v--;
     8c0:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
     8c4:	21 50       	subi	r18, 0x01	; 1
     8c6:	20 93 9a 38 	sts	0x389A, r18	; 0x80389a <v>
	write_enabled = 0;
     8ca:	10 92 a5 38 	sts	0x38A5, r1	; 0x8038a5 <write_enabled>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+012.4E", a);
     8ce:	30 91 9a 38 	lds	r19, 0x389A	; 0x80389a <v>
     8d2:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
     8d6:	9f 93       	push	r25
     8d8:	8f 93       	push	r24
     8da:	7f 93       	push	r23
     8dc:	6f 93       	push	r22
     8de:	0f 2e       	mov	r0, r31
     8e0:	f6 e3       	ldi	r31, 0x36	; 54
     8e2:	cf 2e       	mov	r12, r31
     8e4:	fd ea       	ldi	r31, 0xAD	; 173
     8e6:	df 2e       	mov	r13, r31
     8e8:	f0 2d       	mov	r31, r0
     8ea:	df 92       	push	r13
     8ec:	cf 92       	push	r12
     8ee:	c0 e8       	ldi	r28, 0x80	; 128
     8f0:	d0 e0       	ldi	r29, 0x00	; 0
     8f2:	ce 01       	movw	r24, r28
     8f4:	83 1b       	sub	r24, r19
     8f6:	91 09       	sbc	r25, r1
     8f8:	9f 93       	push	r25
     8fa:	8f 93       	push	r24
     8fc:	82 2f       	mov	r24, r18
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	82 55       	subi	r24, 0x52	; 82
     902:	97 4c       	sbci	r25, 0xC7	; 199
     904:	9f 93       	push	r25
     906:	8f 93       	push	r24
     908:	0e 94 73 14 	call	0x28e6	; 0x28e6 <snprintf>
     90c:	80 93 92 38 	sts	0x3892, r24	; 0x803892 <fstr_size>
     910:	90 93 93 38 	sts	0x3893, r25	; 0x803893 <fstr_size+0x1>
	v += fstr_size;
     914:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <v>
     918:	89 0f       	add	r24, r25
     91a:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <v>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+012.4E", b);
     91e:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <v>
     922:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
     926:	8f 92       	push	r8
     928:	9f 92       	push	r9
     92a:	af 92       	push	r10
     92c:	bf 92       	push	r11
     92e:	df 92       	push	r13
     930:	cf 92       	push	r12
     932:	9e 01       	movw	r18, r28
     934:	29 1b       	sub	r18, r25
     936:	31 09       	sbc	r19, r1
     938:	3f 93       	push	r19
     93a:	2f 93       	push	r18
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	82 55       	subi	r24, 0x52	; 82
     940:	97 4c       	sbci	r25, 0xC7	; 199
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	0e 94 73 14 	call	0x28e6	; 0x28e6 <snprintf>
     94a:	80 93 92 38 	sts	0x3892, r24	; 0x803892 <fstr_size>
     94e:	90 93 93 38 	sts	0x3893, r25	; 0x803893 <fstr_size+0x1>
	v += fstr_size;
     952:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <v>
     956:	89 0f       	add	r24, r25
     958:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <v>
	fstr_size = snprintf((char*)(recv + v), MAX_BUFFER_SIZE - v, "%+012.4E", c);
     95c:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <v>
     960:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
     964:	1f 93       	push	r17
     966:	0f 93       	push	r16
     968:	ff 92       	push	r15
     96a:	ef 92       	push	r14
     96c:	df 92       	push	r13
     96e:	cf 92       	push	r12
     970:	c9 1b       	sub	r28, r25
     972:	d1 09       	sbc	r29, r1
     974:	df 93       	push	r29
     976:	cf 93       	push	r28
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	82 55       	subi	r24, 0x52	; 82
     97c:	97 4c       	sbci	r25, 0xC7	; 199
     97e:	9f 93       	push	r25
     980:	8f 93       	push	r24
     982:	0e 94 73 14 	call	0x28e6	; 0x28e6 <snprintf>
     986:	80 93 92 38 	sts	0x3892, r24	; 0x803892 <fstr_size>
     98a:	90 93 93 38 	sts	0x3893, r25	; 0x803893 <fstr_size+0x1>
	v += fstr_size;
     98e:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <v>
     992:	89 0f       	add	r24, r25
     994:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <v>
	send_size = v;
     998:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <send_size>
     9a2:	90 93 95 38 	sts	0x3895, r25	; 0x803895 <send_size+0x1>
	send_enable = 1;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <send_enable>
     9ae:	90 93 97 38 	sts	0x3897, r25	; 0x803897 <send_enable+0x1>
}
     9b2:	8d b7       	in	r24, 0x3d	; 61
     9b4:	9e b7       	in	r25, 0x3e	; 62
     9b6:	4e 96       	adiw	r24, 0x1e	; 30
     9b8:	8d bf       	out	0x3d, r24	; 61
     9ba:	9e bf       	out	0x3e, r25	; 62
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	cf 90       	pop	r12
     9cc:	bf 90       	pop	r11
     9ce:	af 90       	pop	r10
     9d0:	9f 90       	pop	r9
     9d2:	8f 90       	pop	r8
     9d4:	08 95       	ret

000009d6 <get_avg_data>:




void get_avg_data(float *temp) {
     9d6:	6f 92       	push	r6
     9d8:	7f 92       	push	r7
     9da:	8f 92       	push	r8
     9dc:	9f 92       	push	r9
     9de:	af 92       	push	r10
     9e0:	bf 92       	push	r11
     9e2:	cf 92       	push	r12
     9e4:	df 92       	push	r13
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
	
	float sum = 0;
	int data_count = 0;
	int i = 0;
	int start_index = 0;
	if (data_index == 0) {
     9f2:	20 91 90 38 	lds	r18, 0x3890	; 0x803890 <data_index>
     9f6:	30 91 91 38 	lds	r19, 0x3891	; 0x803891 <data_index+0x1>
     9fa:	23 2b       	or	r18, r19
     9fc:	51 f4       	brne	.+20     	; 0xa12 <get_avg_data+0x3c>
		(*temp) = ERROR_DATA;
     9fe:	4c e5       	ldi	r20, 0x5C	; 92
     a00:	5f ef       	ldi	r21, 0xFF	; 255
     a02:	69 e7       	ldi	r22, 0x79	; 121
     a04:	74 e4       	ldi	r23, 0x44	; 68
     a06:	fc 01       	movw	r30, r24
     a08:	40 83       	st	Z, r20
     a0a:	51 83       	std	Z+1, r21	; 0x01
     a0c:	62 83       	std	Z+2, r22	; 0x02
     a0e:	73 83       	std	Z+3, r23	; 0x03
		return;
     a10:	d9 c0       	rjmp	.+434    	; 0xbc4 <get_avg_data+0x1ee>
	}
	if (avg_level == 0) {
     a12:	20 91 9f 38 	lds	r18, 0x389F	; 0x80389f <avg_level>
     a16:	30 91 a0 38 	lds	r19, 0x38A0	; 0x8038a0 <avg_level+0x1>
     a1a:	21 15       	cp	r18, r1
     a1c:	31 05       	cpc	r19, r1
     a1e:	a1 f4       	brne	.+40     	; 0xa48 <get_avg_data+0x72>
		(*temp) = data_arr[data_index - 1];
     a20:	e0 91 90 38 	lds	r30, 0x3890	; 0x803890 <data_index>
     a24:	f0 91 91 38 	lds	r31, 0x3891	; 0x803891 <data_index+0x1>
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	ee 0f       	add	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	e2 5f       	subi	r30, 0xF2	; 242
     a32:	f7 4c       	sbci	r31, 0xC7	; 199
     a34:	40 81       	ld	r20, Z
     a36:	51 81       	ldd	r21, Z+1	; 0x01
     a38:	62 81       	ldd	r22, Z+2	; 0x02
     a3a:	73 81       	ldd	r23, Z+3	; 0x03
     a3c:	fc 01       	movw	r30, r24
     a3e:	40 83       	st	Z, r20
     a40:	51 83       	std	Z+1, r21	; 0x01
     a42:	62 83       	std	Z+2, r22	; 0x02
     a44:	73 83       	std	Z+3, r23	; 0x03
     a46:	be c0       	rjmp	.+380    	; 0xbc4 <get_avg_data+0x1ee>
     a48:	4c 01       	movw	r8, r24
	} else {
		if (data_overflow_flag && data_index - avg_level * DATA_SIZE_PER_AVG_LEVEL < 0) { // data overflowed
     a4a:	80 91 8a 38 	lds	r24, 0x388A	; 0x80388a <data_overflow_flag>
     a4e:	90 91 8b 38 	lds	r25, 0x388B	; 0x80388b <data_overflow_flag+0x1>
     a52:	89 2b       	or	r24, r25
     a54:	09 f4       	brne	.+2      	; 0xa58 <get_avg_data+0x82>
     a56:	67 c0       	rjmp	.+206    	; 0xb26 <get_avg_data+0x150>
     a58:	59 01       	movw	r10, r18
     a5a:	aa 0c       	add	r10, r10
     a5c:	bb 1c       	adc	r11, r11
     a5e:	a2 0e       	add	r10, r18
     a60:	b3 1e       	adc	r11, r19
     a62:	b1 94       	neg	r11
     a64:	a1 94       	neg	r10
     a66:	b1 08       	sbc	r11, r1
     a68:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <data_index>
     a6c:	90 91 91 38 	lds	r25, 0x3891	; 0x803891 <data_index+0x1>
     a70:	8a 0d       	add	r24, r10
     a72:	9b 1d       	adc	r25, r11
     a74:	99 23       	and	r25, r25
     a76:	0c f0       	brlt	.+2      	; 0xa7a <get_avg_data+0xa4>
     a78:	56 c0       	rjmp	.+172    	; 0xb26 <get_avg_data+0x150>
			for(i = 0; i < data_index; i++) {
     a7a:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <data_index>
     a7e:	90 91 91 38 	lds	r25, 0x3891	; 0x803891 <data_index+0x1>
     a82:	18 16       	cp	r1, r24
     a84:	19 06       	cpc	r1, r25
     a86:	e4 f4       	brge	.+56     	; 0xac0 <get_avg_data+0xea>
     a88:	02 e1       	ldi	r16, 0x12	; 18
     a8a:	18 e3       	ldi	r17, 0x38	; 56
     a8c:	c0 e0       	ldi	r28, 0x00	; 0
     a8e:	d0 e0       	ldi	r29, 0x00	; 0
     a90:	c1 2c       	mov	r12, r1
     a92:	d1 2c       	mov	r13, r1
     a94:	76 01       	movw	r14, r12
				sum	+= data_arr[i];
     a96:	f8 01       	movw	r30, r16
     a98:	21 91       	ld	r18, Z+
     a9a:	31 91       	ld	r19, Z+
     a9c:	41 91       	ld	r20, Z+
     a9e:	51 91       	ld	r21, Z+
     aa0:	8f 01       	movw	r16, r30
     aa2:	c7 01       	movw	r24, r14
     aa4:	b6 01       	movw	r22, r12
     aa6:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__addsf3>
     aaa:	6b 01       	movw	r12, r22
     aac:	7c 01       	movw	r14, r24
				data_count++;
     aae:	21 96       	adiw	r28, 0x01	; 1
	}
	if (avg_level == 0) {
		(*temp) = data_arr[data_index - 1];
	} else {
		if (data_overflow_flag && data_index - avg_level * DATA_SIZE_PER_AVG_LEVEL < 0) { // data overflowed
			for(i = 0; i < data_index; i++) {
     ab0:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <data_index>
     ab4:	90 91 91 38 	lds	r25, 0x3891	; 0x803891 <data_index+0x1>
     ab8:	c8 17       	cp	r28, r24
     aba:	d9 07       	cpc	r29, r25
     abc:	64 f3       	brlt	.-40     	; 0xa96 <get_avg_data+0xc0>
     abe:	05 c0       	rjmp	.+10     	; 0xaca <get_avg_data+0xf4>
     ac0:	c0 e0       	ldi	r28, 0x00	; 0
     ac2:	d0 e0       	ldi	r29, 0x00	; 0
     ac4:	c1 2c       	mov	r12, r1
     ac6:	d1 2c       	mov	r13, r1
     ac8:	76 01       	movw	r14, r12
				sum	+= data_arr[i];
				data_count++;
			}
			start_index = DATA_RETAIN_SIZE - avg_level * DATA_SIZE_PER_AVG_LEVEL + data_index;
     aca:	60 90 90 38 	lds	r6, 0x3890	; 0x803890 <data_index>
     ace:	70 90 91 38 	lds	r7, 0x3891	; 0x803891 <data_index+0x1>
     ad2:	fe e1       	ldi	r31, 0x1E	; 30
     ad4:	af 0e       	add	r10, r31
     ad6:	b1 1c       	adc	r11, r1
     ad8:	6a 0c       	add	r6, r10
     ada:	7b 1c       	adc	r7, r11
			for(i = start_index; i < DATA_RETAIN_SIZE; i++) {
     adc:	8e e1       	ldi	r24, 0x1E	; 30
     ade:	68 16       	cp	r6, r24
     ae0:	71 04       	cpc	r7, r1
     ae2:	0c f0       	brlt	.+2      	; 0xae6 <get_avg_data+0x110>
     ae4:	5e c0       	rjmp	.+188    	; 0xba2 <get_avg_data+0x1cc>
     ae6:	83 01       	movw	r16, r6
     ae8:	00 0f       	add	r16, r16
     aea:	11 1f       	adc	r17, r17
     aec:	00 0f       	add	r16, r16
     aee:	11 1f       	adc	r17, r17
     af0:	0e 5e       	subi	r16, 0xEE	; 238
     af2:	17 4c       	sbci	r17, 0xC7	; 199
     af4:	0f 2e       	mov	r0, r31
     af6:	fa e8       	ldi	r31, 0x8A	; 138
     af8:	af 2e       	mov	r10, r31
     afa:	f8 e3       	ldi	r31, 0x38	; 56
     afc:	bf 2e       	mov	r11, r31
     afe:	f0 2d       	mov	r31, r0
				sum += data_arr[i];
     b00:	f8 01       	movw	r30, r16
     b02:	21 91       	ld	r18, Z+
     b04:	31 91       	ld	r19, Z+
     b06:	41 91       	ld	r20, Z+
     b08:	51 91       	ld	r21, Z+
     b0a:	8f 01       	movw	r16, r30
     b0c:	c7 01       	movw	r24, r14
     b0e:	b6 01       	movw	r22, r12
     b10:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__addsf3>
     b14:	6b 01       	movw	r12, r22
     b16:	7c 01       	movw	r14, r24
			for(i = 0; i < data_index; i++) {
				sum	+= data_arr[i];
				data_count++;
			}
			start_index = DATA_RETAIN_SIZE - avg_level * DATA_SIZE_PER_AVG_LEVEL + data_index;
			for(i = start_index; i < DATA_RETAIN_SIZE; i++) {
     b18:	a0 16       	cp	r10, r16
     b1a:	b1 06       	cpc	r11, r17
     b1c:	89 f7       	brne	.-30     	; 0xb00 <get_avg_data+0x12a>
     b1e:	c6 19       	sub	r28, r6
     b20:	d7 09       	sbc	r29, r7
     b22:	6e 96       	adiw	r28, 0x1e	; 30
     b24:	3e c0       	rjmp	.+124    	; 0xba2 <get_avg_data+0x1cc>
				data_count++;
			}
		
			
		} else {
			start_index = data_index - avg_level * DATA_SIZE_PER_AVG_LEVEL;
     b26:	00 91 90 38 	lds	r16, 0x3890	; 0x803890 <data_index>
     b2a:	10 91 91 38 	lds	r17, 0x3891	; 0x803891 <data_index+0x1>
     b2e:	c9 01       	movw	r24, r18
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	28 0f       	add	r18, r24
     b36:	39 1f       	adc	r19, r25
     b38:	02 1b       	sub	r16, r18
     b3a:	13 0b       	sbc	r17, r19
     b3c:	12 f4       	brpl	.+4      	; 0xb42 <get_avg_data+0x16c>
     b3e:	00 e0       	ldi	r16, 0x00	; 0
     b40:	10 e0       	ldi	r17, 0x00	; 0
			if (start_index < 0) start_index = 0;
			for(i = start_index; i < data_index; i++) {
     b42:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <data_index>
     b46:	90 91 91 38 	lds	r25, 0x3891	; 0x803891 <data_index+0x1>
     b4a:	08 17       	cp	r16, r24
     b4c:	19 07       	cpc	r17, r25
     b4e:	24 f5       	brge	.+72     	; 0xb98 <get_avg_data+0x1c2>
     b50:	58 01       	movw	r10, r16
     b52:	00 0f       	add	r16, r16
     b54:	11 1f       	adc	r17, r17
     b56:	00 0f       	add	r16, r16
     b58:	11 1f       	adc	r17, r17
     b5a:	0e 5e       	subi	r16, 0xEE	; 238
     b5c:	17 4c       	sbci	r17, 0xC7	; 199
     b5e:	c0 e0       	ldi	r28, 0x00	; 0
     b60:	d0 e0       	ldi	r29, 0x00	; 0
     b62:	c1 2c       	mov	r12, r1
     b64:	d1 2c       	mov	r13, r1
     b66:	76 01       	movw	r14, r12
				sum += data_arr[i];
     b68:	f8 01       	movw	r30, r16
     b6a:	21 91       	ld	r18, Z+
     b6c:	31 91       	ld	r19, Z+
     b6e:	41 91       	ld	r20, Z+
     b70:	51 91       	ld	r21, Z+
     b72:	8f 01       	movw	r16, r30
     b74:	c7 01       	movw	r24, r14
     b76:	b6 01       	movw	r22, r12
     b78:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__addsf3>
     b7c:	6b 01       	movw	r12, r22
     b7e:	7c 01       	movw	r14, r24
				data_count++;
     b80:	21 96       	adiw	r28, 0x01	; 1
		
			
		} else {
			start_index = data_index - avg_level * DATA_SIZE_PER_AVG_LEVEL;
			if (start_index < 0) start_index = 0;
			for(i = start_index; i < data_index; i++) {
     b82:	20 91 90 38 	lds	r18, 0x3890	; 0x803890 <data_index>
     b86:	30 91 91 38 	lds	r19, 0x3891	; 0x803891 <data_index+0x1>
     b8a:	ce 01       	movw	r24, r28
     b8c:	8a 0d       	add	r24, r10
     b8e:	9b 1d       	adc	r25, r11
     b90:	82 17       	cp	r24, r18
     b92:	93 07       	cpc	r25, r19
     b94:	4c f3       	brlt	.-46     	; 0xb68 <get_avg_data+0x192>
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <get_avg_data+0x1cc>
     b98:	c0 e0       	ldi	r28, 0x00	; 0
     b9a:	d0 e0       	ldi	r29, 0x00	; 0
     b9c:	c1 2c       	mov	r12, r1
     b9e:	d1 2c       	mov	r13, r1
     ba0:	76 01       	movw	r14, r12
				data_count++;
			}
		}
		
		
		(*temp) = sum / (float)data_count;
     ba2:	be 01       	movw	r22, r28
     ba4:	dd 0f       	add	r29, r29
     ba6:	88 0b       	sbc	r24, r24
     ba8:	99 0b       	sbc	r25, r25
     baa:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__floatsisf>
     bae:	9b 01       	movw	r18, r22
     bb0:	ac 01       	movw	r20, r24
     bb2:	c7 01       	movw	r24, r14
     bb4:	b6 01       	movw	r22, r12
     bb6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__divsf3>
     bba:	f4 01       	movw	r30, r8
     bbc:	60 83       	st	Z, r22
     bbe:	71 83       	std	Z+1, r23	; 0x01
     bc0:	82 83       	std	Z+2, r24	; 0x02
     bc2:	93 83       	std	Z+3, r25	; 0x03
	}

	
	
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	bf 90       	pop	r11
     bd6:	af 90       	pop	r10
     bd8:	9f 90       	pop	r9
     bda:	8f 90       	pop	r8
     bdc:	7f 90       	pop	r7
     bde:	6f 90       	pop	r6
     be0:	08 95       	ret

00000be2 <handle_uart_buffer>:

void handle_uart_buffer(){
     be2:	8f 92       	push	r8
     be4:	9f 92       	push	r9
     be6:	af 92       	push	r10
     be8:	bf 92       	push	r11
     bea:	cf 92       	push	r12
     bec:	df 92       	push	r13
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <handle_uart_buffer+0x1a>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <handle_uart_buffer+0x1c>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
	if (handle_uart_flag == 1) {
     c02:	80 91 8c 38 	lds	r24, 0x388C	; 0x80388c <handle_uart_flag>
     c06:	90 91 8d 38 	lds	r25, 0x388D	; 0x80388d <handle_uart_flag+0x1>
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	09 f0       	breq	.+2      	; 0xc10 <handle_uart_buffer+0x2e>
     c0e:	3c c4       	rjmp	.+2168   	; 0x1488 <handle_uart_buffer+0x8a6>
		if (recv[1] == single_temp_addr)
     c10:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <recv+0x1>
     c14:	80 91 39 39 	lds	r24, 0x3939	; 0x803939 <single_temp_addr>
     c18:	98 13       	cpse	r25, r24
     c1a:	07 c0       	rjmp	.+14     	; 0xc2a <handle_uart_buffer+0x48>
		{
			address_type = 0x05;
     c1c:	85 e0       	ldi	r24, 0x05	; 5
     c1e:	80 93 9d 38 	sts	0x389D, r24	; 0x80389d <address_type>
			address_length = SINGLE_ADDRESS_LEN;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	80 93 9c 38 	sts	0x389C, r24	; 0x80389c <address_length>
     c28:	24 c0       	rjmp	.+72     	; 0xc72 <handle_uart_buffer+0x90>
		}
		else if (memcmp(recv + 1, ALWAYS_RESP_ADDR,ADDRESS_LEN) == 0)
     c2a:	46 e0       	ldi	r20, 0x06	; 6
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	6f e3       	ldi	r22, 0x3F	; 63
     c30:	7d ea       	ldi	r23, 0xAD	; 173
     c32:	8f ea       	ldi	r24, 0xAF	; 175
     c34:	98 e3       	ldi	r25, 0x38	; 56
     c36:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
     c3a:	89 2b       	or	r24, r25
     c3c:	39 f4       	brne	.+14     	; 0xc4c <handle_uart_buffer+0x6a>
		{
			address_type = 0x07; // always_respond
     c3e:	87 e0       	ldi	r24, 0x07	; 7
     c40:	80 93 9d 38 	sts	0x389D, r24	; 0x80389d <address_type>
			address_length = ADDRESS_LEN;
     c44:	86 e0       	ldi	r24, 0x06	; 6
     c46:	80 93 9c 38 	sts	0x389C, r24	; 0x80389c <address_length>
     c4a:	13 c0       	rjmp	.+38     	; 0xc72 <handle_uart_buffer+0x90>
		}
		else if (memcmp(recv + 1, addr, ADDRESS_LEN) == 0)
     c4c:	46 e0       	ldi	r20, 0x06	; 6
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	6b e4       	ldi	r22, 0x4B	; 75
     c52:	79 e3       	ldi	r23, 0x39	; 57
     c54:	8f ea       	ldi	r24, 0xAF	; 175
     c56:	98 e3       	ldi	r25, 0x38	; 56
     c58:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
     c5c:	89 2b       	or	r24, r25
     c5e:	39 f4       	brne	.+14     	; 0xc6e <handle_uart_buffer+0x8c>
		{
			address_type = 0x0b; // serial_number
     c60:	8b e0       	ldi	r24, 0x0B	; 11
     c62:	80 93 9d 38 	sts	0x389D, r24	; 0x80389d <address_type>
			address_length = ADDRESS_LEN;
     c66:	86 e0       	ldi	r24, 0x06	; 6
     c68:	80 93 9c 38 	sts	0x389C, r24	; 0x80389c <address_length>
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <handle_uart_buffer+0x90>
		}
		else
		{
			address_type = 0;
     c6e:	10 92 9d 38 	sts	0x389D, r1	; 0x80389d <address_type>
		}
			
		recv[0] = '*';
     c72:	8a e2       	ldi	r24, 0x2A	; 42
     c74:	80 93 ae 38 	sts	0x38AE, r24	; 0x8038ae <recv>
		/* RD temperature sensor response, all address cases */
		if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
     c78:	20 91 9d 38 	lds	r18, 0x389D	; 0x80389d <address_type>
     c7c:	2a 83       	std	Y+2, r18	; 0x02
     c7e:	2d 7f       	andi	r18, 0xFD	; 253
     c80:	29 83       	std	Y+1, r18	; 0x01
     c82:	25 30       	cpi	r18, 0x05	; 5
     c84:	29 f0       	breq	.+10     	; 0xc90 <handle_uart_buffer+0xae>
     c86:	4a 81       	ldd	r20, Y+2	; 0x02
     c88:	4b 30       	cpi	r20, 0x0B	; 11
     c8a:	09 f0       	breq	.+2      	; 0xc8e <handle_uart_buffer+0xac>
     c8c:	cd c2       	rjmp	.+1434   	; 0x1228 <handle_uart_buffer+0x646>
     c8e:	7d c3       	rjmp	.+1786   	; 0x138a <handle_uart_buffer+0x7a8>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     c90:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
     c94:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
     c98:	fb 01       	movw	r30, r22
     c9a:	01 90       	ld	r0, Z+
     c9c:	00 20       	and	r0, r0
     c9e:	e9 f7       	brne	.-6      	; 0xc9a <handle_uart_buffer+0xb8>
     ca0:	31 97       	sbiw	r30, 0x01	; 1
     ca2:	af 01       	movw	r20, r30
     ca4:	46 1b       	sub	r20, r22
     ca6:	57 0b       	sbc	r21, r23
     ca8:	80 91 9c 38 	lds	r24, 0x389C	; 0x80389c <address_length>
     cac:	8b 83       	std	Y+3, r24	; 0x03
     cae:	e8 2e       	mov	r14, r24
     cb0:	f1 2c       	mov	r15, r1
     cb2:	87 01       	movw	r16, r14
     cb4:	01 55       	subi	r16, 0x51	; 81
     cb6:	17 4c       	sbci	r17, 0xC7	; 199
     cb8:	c8 01       	movw	r24, r16
     cba:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
			address_type = 0;
		}
			
		recv[0] = '*';
		/* RD temperature sensor response, all address cases */
		if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
     cbe:	89 2b       	or	r24, r25
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <handle_uart_buffer+0xe2>
     cc2:	50 c0       	rjmp	.+160    	; 0xd64 <handle_uart_buffer+0x182>
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
		v == address_length + 2 + cmd_len[RD])
     cc4:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
		}
			
		recv[0] = '*';
		/* RD temperature sensor response, all address cases */
		if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	eb 81       	ldd	r30, Y+3	; 0x03
     ccc:	8e 2f       	mov	r24, r30
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	04 96       	adiw	r24, 0x04	; 4
     cd2:	28 17       	cp	r18, r24
     cd4:	39 07       	cpc	r19, r25
     cd6:	09 f0       	breq	.+2      	; 0xcda <handle_uart_buffer+0xf8>
     cd8:	45 c0       	rjmp	.+138    	; 0xd64 <handle_uart_buffer+0x182>
		v == address_length + 2 + cmd_len[RD])
		{
			get_avg_data(&temp_data);
     cda:	81 e3       	ldi	r24, 0x31	; 49
     cdc:	99 e3       	ldi	r25, 0x39	; 57
     cde:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <get_avg_data>
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
     ce2:	c0 90 31 39 	lds	r12, 0x3931	; 0x803931 <temp_data>
     ce6:	d0 90 32 39 	lds	r13, 0x3932	; 0x803932 <temp_data+0x1>
     cea:	e0 90 33 39 	lds	r14, 0x3933	; 0x803933 <temp_data+0x2>
     cee:	f0 90 34 39 	lds	r15, 0x3934	; 0x803934 <temp_data+0x3>
     cf2:	20 91 52 39 	lds	r18, 0x3952	; 0x803952 <cal_b>
     cf6:	30 91 53 39 	lds	r19, 0x3953	; 0x803953 <cal_b+0x1>
     cfa:	40 91 54 39 	lds	r20, 0x3954	; 0x803954 <cal_b+0x2>
     cfe:	50 91 55 39 	lds	r21, 0x3955	; 0x803955 <cal_b+0x3>
     d02:	c7 01       	movw	r24, r14
     d04:	b6 01       	movw	r22, r12
     d06:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     d0a:	20 91 3f 39 	lds	r18, 0x393F	; 0x80393f <cal_a>
     d0e:	30 91 40 39 	lds	r19, 0x3940	; 0x803940 <cal_a+0x1>
     d12:	40 91 41 39 	lds	r20, 0x3941	; 0x803941 <cal_a+0x2>
     d16:	50 91 42 39 	lds	r21, 0x3942	; 0x803942 <cal_a+0x3>
     d1a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__addsf3>
     d1e:	4b 01       	movw	r8, r22
     d20:	5c 01       	movw	r10, r24
     d22:	20 91 a6 38 	lds	r18, 0x38A6	; 0x8038a6 <cal_c>
     d26:	30 91 a7 38 	lds	r19, 0x38A7	; 0x8038a7 <cal_c+0x1>
     d2a:	40 91 a8 38 	lds	r20, 0x38A8	; 0x8038a8 <cal_c+0x2>
     d2e:	50 91 a9 38 	lds	r21, 0x38A9	; 0x8038a9 <cal_c+0x3>
     d32:	c7 01       	movw	r24, r14
     d34:	b6 01       	movw	r22, r12
     d36:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     d3a:	a7 01       	movw	r20, r14
     d3c:	96 01       	movw	r18, r12
     d3e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     d42:	9b 01       	movw	r18, r22
     d44:	ac 01       	movw	r20, r24
     d46:	c5 01       	movw	r24, r10
     d48:	b4 01       	movw	r22, r8
     d4a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__addsf3>
     d4e:	60 93 31 39 	sts	0x3931, r22	; 0x803931 <temp_data>
     d52:	70 93 32 39 	sts	0x3932, r23	; 0x803932 <temp_data+0x1>
     d56:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <temp_data+0x2>
     d5a:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <temp_data+0x3>
			build_output(temp_data);
     d5e:	0e 94 13 04 	call	0x826	; 0x826 <build_output>
     d62:	62 c2       	rjmp	.+1220   	; 0x1228 <handle_uart_buffer+0x646>
		} // RD RH sensor response, all address cases
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
     d64:	fa 81       	ldd	r31, Y+2	; 0x02
     d66:	f5 30       	cpi	r31, 0x05	; 5
     d68:	09 f4       	brne	.+2      	; 0xd6c <handle_uart_buffer+0x18a>
     d6a:	b0 c2       	rjmp	.+1376   	; 0x12cc <handle_uart_buffer+0x6ea>
     d6c:	f7 30       	cpi	r31, 0x07	; 7
     d6e:	19 f0       	breq	.+6      	; 0xd76 <handle_uart_buffer+0x194>
     d70:	fb 30       	cpi	r31, 0x0B	; 11
     d72:	09 f0       	breq	.+2      	; 0xd76 <handle_uart_buffer+0x194>
     d74:	59 c2       	rjmp	.+1202   	; 0x1228 <handle_uart_buffer+0x646>
		memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 &&
     d76:	60 91 02 38 	lds	r22, 0x3802	; 0x803802 <__data_start+0x2>
     d7a:	70 91 03 38 	lds	r23, 0x3803	; 0x803803 <__data_start+0x3>
     d7e:	fb 01       	movw	r30, r22
     d80:	01 90       	ld	r0, Z+
     d82:	00 20       	and	r0, r0
     d84:	e9 f7       	brne	.-6      	; 0xd80 <handle_uart_buffer+0x19e>
     d86:	31 97       	sbiw	r30, 0x01	; 1
     d88:	af 01       	movw	r20, r30
     d8a:	46 1b       	sub	r20, r22
     d8c:	57 0b       	sbc	r21, r23
     d8e:	c8 01       	movw	r24, r16
     d90:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
		{
			get_avg_data(&temp_data);
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
			build_output(temp_data);
		} // RD RH sensor response, all address cases
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
     d94:	89 2b       	or	r24, r25
     d96:	b1 f4       	brne	.+44     	; 0xdc4 <handle_uart_buffer+0x1e2>
		memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 &&
		v == address_length + 2 + cmd_len[WE])
     d98:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
			get_avg_data(&temp_data);
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
			build_output(temp_data);
		} // RD RH sensor response, all address cases
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 &&
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	4b 81       	ldd	r20, Y+3	; 0x03
     da0:	84 2f       	mov	r24, r20
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	04 96       	adiw	r24, 0x04	; 4
     da6:	28 17       	cp	r18, r24
     da8:	39 07       	cpc	r19, r25
     daa:	61 f4       	brne	.+24     	; 0xdc4 <handle_uart_buffer+0x1e2>
		v == address_length + 2 + cmd_len[WE])
		{
			write_enabled = 1;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 a5 38 	sts	0x38A5, r24	; 0x8038a5 <write_enabled>
			send_enable = 1;
			send_size = v - 1;
     db2:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <send_size>
     dbe:	90 93 95 38 	sts	0x3895, r25	; 0x803895 <send_size+0x1>
     dc2:	39 c2       	rjmp	.+1138   	; 0x1236 <handle_uart_buffer+0x654>
		} // Read Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	85 30       	cpi	r24, 0x05	; 5
     dc8:	29 f0       	breq	.+10     	; 0xdd4 <handle_uart_buffer+0x1f2>
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	9b 30       	cpi	r25, 0x0B	; 11
     dce:	09 f4       	brne	.+2      	; 0xdd2 <handle_uart_buffer+0x1f0>
     dd0:	03 c3       	rjmp	.+1542   	; 0x13d8 <handle_uart_buffer+0x7f6>
     dd2:	2a c2       	rjmp	.+1108   	; 0x1228 <handle_uart_buffer+0x646>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
     dd4:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <__data_start+0x4>
     dd8:	70 91 05 38 	lds	r23, 0x3805	; 0x803805 <__data_start+0x5>
     ddc:	fb 01       	movw	r30, r22
     dde:	01 90       	ld	r0, Z+
     de0:	00 20       	and	r0, r0
     de2:	e9 f7       	brne	.-6      	; 0xdde <handle_uart_buffer+0x1fc>
     de4:	31 97       	sbiw	r30, 0x01	; 1
     de6:	af 01       	movw	r20, r30
     de8:	46 1b       	sub	r20, r22
     dea:	57 0b       	sbc	r21, r23
     dec:	c8 01       	movw	r24, r16
     dee:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
		{
			write_enabled = 1;
			send_enable = 1;
			send_size = v - 1;
		} // Read Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
     df2:	89 2b       	or	r24, r25
     df4:	29 f5       	brne	.+74     	; 0xe40 <handle_uart_buffer+0x25e>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
		v == address_length + 2 + cmd_len[RCAL])
     df6:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
			write_enabled = 1;
			send_enable = 1;
			send_size = v - 1;
		} // Read Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	eb 81       	ldd	r30, Y+3	; 0x03
     dfe:	8e 2f       	mov	r24, r30
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	06 96       	adiw	r24, 0x06	; 6
     e04:	28 17       	cp	r18, r24
     e06:	39 07       	cpc	r19, r25
     e08:	d9 f4       	brne	.+54     	; 0xe40 <handle_uart_buffer+0x25e>
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
     e0a:	e0 90 a6 38 	lds	r14, 0x38A6	; 0x8038a6 <cal_c>
     e0e:	f0 90 a7 38 	lds	r15, 0x38A7	; 0x8038a7 <cal_c+0x1>
     e12:	00 91 a8 38 	lds	r16, 0x38A8	; 0x8038a8 <cal_c+0x2>
     e16:	10 91 a9 38 	lds	r17, 0x38A9	; 0x8038a9 <cal_c+0x3>
     e1a:	20 91 52 39 	lds	r18, 0x3952	; 0x803952 <cal_b>
     e1e:	30 91 53 39 	lds	r19, 0x3953	; 0x803953 <cal_b+0x1>
     e22:	40 91 54 39 	lds	r20, 0x3954	; 0x803954 <cal_b+0x2>
     e26:	50 91 55 39 	lds	r21, 0x3955	; 0x803955 <cal_b+0x3>
     e2a:	60 91 3f 39 	lds	r22, 0x393F	; 0x80393f <cal_a>
     e2e:	70 91 40 39 	lds	r23, 0x3940	; 0x803940 <cal_a+0x1>
     e32:	80 91 41 39 	lds	r24, 0x3941	; 0x803941 <cal_a+0x2>
     e36:	90 91 42 39 	lds	r25, 0x3942	; 0x803942 <cal_a+0x3>
     e3a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <build_cal_out_put>
     e3e:	f4 c1       	rjmp	.+1000   	; 0x1228 <handle_uart_buffer+0x646>
		} // Write Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
     e40:	fa 81       	ldd	r31, Y+2	; 0x02
     e42:	f5 30       	cpi	r31, 0x05	; 5
     e44:	09 f4       	brne	.+2      	; 0xe48 <handle_uart_buffer+0x266>
     e46:	55 c2       	rjmp	.+1194   	; 0x12f2 <handle_uart_buffer+0x710>
     e48:	f7 30       	cpi	r31, 0x07	; 7
     e4a:	19 f0       	breq	.+6      	; 0xe52 <handle_uart_buffer+0x270>
     e4c:	fb 30       	cpi	r31, 0x0B	; 11
     e4e:	09 f0       	breq	.+2      	; 0xe52 <handle_uart_buffer+0x270>
     e50:	eb c1       	rjmp	.+982    	; 0x1228 <handle_uart_buffer+0x646>
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
     e52:	60 91 06 38 	lds	r22, 0x3806	; 0x803806 <__data_start+0x6>
     e56:	70 91 07 38 	lds	r23, 0x3807	; 0x803807 <__data_start+0x7>
     e5a:	fb 01       	movw	r30, r22
     e5c:	01 90       	ld	r0, Z+
     e5e:	00 20       	and	r0, r0
     e60:	e9 f7       	brne	.-6      	; 0xe5c <handle_uart_buffer+0x27a>
     e62:	31 97       	sbiw	r30, 0x01	; 1
     e64:	af 01       	movw	r20, r30
     e66:	46 1b       	sub	r20, r22
     e68:	57 0b       	sbc	r21, r23
     e6a:	c8 01       	movw	r24, r16
     e6c:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Write Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
     e70:	89 2b       	or	r24, r25
     e72:	09 f0       	breq	.+2      	; 0xe76 <handle_uart_buffer+0x294>
     e74:	8a c0       	rjmp	.+276    	; 0xf8a <handle_uart_buffer+0x3a8>
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
		v == address_length + 2 + cmd_len[WCAL] + CAL_NUM_LEN * 3 &&
     e76:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Write Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4b 81       	ldd	r20, Y+3	; 0x03
     e7e:	84 2f       	mov	r24, r20
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	8a 96       	adiw	r24, 0x2a	; 42
     e84:	28 17       	cp	r18, r24
     e86:	39 07       	cpc	r19, r25
     e88:	09 f0       	breq	.+2      	; 0xe8c <handle_uart_buffer+0x2aa>
     e8a:	7f c0       	rjmp	.+254    	; 0xf8a <handle_uart_buffer+0x3a8>
		v == address_length + 2 + cmd_len[WCAL] + CAL_NUM_LEN * 3 &&
     e8c:	80 91 a5 38 	lds	r24, 0x38A5	; 0x8038a5 <write_enabled>
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	09 f0       	breq	.+2      	; 0xe96 <handle_uart_buffer+0x2b4>
     e94:	7a c0       	rjmp	.+244    	; 0xf8a <handle_uart_buffer+0x3a8>
		write_enabled == 1)
		{
			memset(parse_buf, 0, sizeof(parse_buf));
     e96:	14 e1       	ldi	r17, 0x14	; 20
     e98:	e8 e5       	ldi	r30, 0x58	; 88
     e9a:	f9 e3       	ldi	r31, 0x39	; 57
     e9c:	21 2f       	mov	r18, r17
     e9e:	11 92       	st	Z+, r1
     ea0:	2a 95       	dec	r18
     ea2:	e9 f7       	brne	.-6      	; 0xe9e <handle_uart_buffer+0x2bc>
			memcpy(parse_buf, recv + address_length + 1 + cmd_len[WCAL], CAL_NUM_LEN);
     ea4:	f7 01       	movw	r30, r14
     ea6:	ed 54       	subi	r30, 0x4D	; 77
     ea8:	f7 4c       	sbci	r31, 0xC7	; 199
     eaa:	8c e0       	ldi	r24, 0x0C	; 12
     eac:	a8 e5       	ldi	r26, 0x58	; 88
     eae:	b9 e3       	ldi	r27, 0x39	; 57
     eb0:	01 90       	ld	r0, Z+
     eb2:	0d 92       	st	X+, r0
     eb4:	8a 95       	dec	r24
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <handle_uart_buffer+0x2ce>
			cal_a = atof((char*)parse_buf);
     eb8:	88 e5       	ldi	r24, 0x58	; 88
     eba:	99 e3       	ldi	r25, 0x39	; 57
     ebc:	0e 94 38 13 	call	0x2670	; 0x2670 <atof>
     ec0:	60 93 3f 39 	sts	0x393F, r22	; 0x80393f <cal_a>
     ec4:	70 93 40 39 	sts	0x3940, r23	; 0x803940 <cal_a+0x1>
     ec8:	80 93 41 39 	sts	0x3941, r24	; 0x803941 <cal_a+0x2>
     ecc:	90 93 42 39 	sts	0x3942, r25	; 0x803942 <cal_a+0x3>
			memset(parse_buf, 0, sizeof(parse_buf));
     ed0:	e8 e5       	ldi	r30, 0x58	; 88
     ed2:	f9 e3       	ldi	r31, 0x39	; 57
     ed4:	21 2f       	mov	r18, r17
     ed6:	11 92       	st	Z+, r1
     ed8:	2a 95       	dec	r18
     eda:	e9 f7       	brne	.-6      	; 0xed6 <handle_uart_buffer+0x2f4>
			memcpy(parse_buf, recv + address_length + 1 + CAL_NUM_LEN + cmd_len[WCAL], CAL_NUM_LEN);
     edc:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <address_length>
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	e1 54       	subi	r30, 0x41	; 65
     ee4:	f7 4c       	sbci	r31, 0xC7	; 199
     ee6:	8c e0       	ldi	r24, 0x0C	; 12
     ee8:	a8 e5       	ldi	r26, 0x58	; 88
     eea:	b9 e3       	ldi	r27, 0x39	; 57
     eec:	01 90       	ld	r0, Z+
     eee:	0d 92       	st	X+, r0
     ef0:	8a 95       	dec	r24
     ef2:	e1 f7       	brne	.-8      	; 0xeec <handle_uart_buffer+0x30a>
			cal_b = atof((char*)parse_buf);
     ef4:	88 e5       	ldi	r24, 0x58	; 88
     ef6:	99 e3       	ldi	r25, 0x39	; 57
     ef8:	0e 94 38 13 	call	0x2670	; 0x2670 <atof>
     efc:	60 93 52 39 	sts	0x3952, r22	; 0x803952 <cal_b>
     f00:	70 93 53 39 	sts	0x3953, r23	; 0x803953 <cal_b+0x1>
     f04:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <cal_b+0x2>
     f08:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <cal_b+0x3>
			memset(parse_buf, 0, sizeof(parse_buf));
     f0c:	e8 e5       	ldi	r30, 0x58	; 88
     f0e:	f9 e3       	ldi	r31, 0x39	; 57
     f10:	11 92       	st	Z+, r1
     f12:	1a 95       	dec	r17
     f14:	e9 f7       	brne	.-6      	; 0xf10 <handle_uart_buffer+0x32e>
			memcpy(parse_buf, recv + address_length + 1 + CAL_NUM_LEN * 2 + cmd_len[WCAL], CAL_NUM_LEN);
     f16:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <address_length>
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	e5 53       	subi	r30, 0x35	; 53
     f1e:	f7 4c       	sbci	r31, 0xC7	; 199
     f20:	8c e0       	ldi	r24, 0x0C	; 12
     f22:	a8 e5       	ldi	r26, 0x58	; 88
     f24:	b9 e3       	ldi	r27, 0x39	; 57
     f26:	01 90       	ld	r0, Z+
     f28:	0d 92       	st	X+, r0
     f2a:	8a 95       	dec	r24
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <handle_uart_buffer+0x344>
			cal_c = atof((char*)parse_buf);
     f2e:	88 e5       	ldi	r24, 0x58	; 88
     f30:	99 e3       	ldi	r25, 0x39	; 57
     f32:	0e 94 38 13 	call	0x2670	; 0x2670 <atof>
     f36:	60 93 a6 38 	sts	0x38A6, r22	; 0x8038a6 <cal_c>
     f3a:	70 93 a7 38 	sts	0x38A7, r23	; 0x8038a7 <cal_c+0x1>
     f3e:	80 93 a8 38 	sts	0x38A8, r24	; 0x8038a8 <cal_c+0x2>
     f42:	90 93 a9 38 	sts	0x38A9, r25	; 0x8038a9 <cal_c+0x3>
			v -= CAL_NUM_LEN * 3;
     f46:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
     f4a:	84 52       	subi	r24, 0x24	; 36
     f4c:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <v>
				
			write_temp_cal_eeprom();
     f50:	0e 94 8d 01 	call	0x31a	; 0x31a <write_temp_cal_eeprom>
			build_cal_out_put(cal_a, cal_b, cal_c);
     f54:	e0 90 a6 38 	lds	r14, 0x38A6	; 0x8038a6 <cal_c>
     f58:	f0 90 a7 38 	lds	r15, 0x38A7	; 0x8038a7 <cal_c+0x1>
     f5c:	00 91 a8 38 	lds	r16, 0x38A8	; 0x8038a8 <cal_c+0x2>
     f60:	10 91 a9 38 	lds	r17, 0x38A9	; 0x8038a9 <cal_c+0x3>
     f64:	20 91 52 39 	lds	r18, 0x3952	; 0x803952 <cal_b>
     f68:	30 91 53 39 	lds	r19, 0x3953	; 0x803953 <cal_b+0x1>
     f6c:	40 91 54 39 	lds	r20, 0x3954	; 0x803954 <cal_b+0x2>
     f70:	50 91 55 39 	lds	r21, 0x3955	; 0x803955 <cal_b+0x3>
     f74:	60 91 3f 39 	lds	r22, 0x393F	; 0x80393f <cal_a>
     f78:	70 91 40 39 	lds	r23, 0x3940	; 0x803940 <cal_a+0x1>
     f7c:	80 91 41 39 	lds	r24, 0x3941	; 0x803941 <cal_a+0x2>
     f80:	90 91 42 39 	lds	r25, 0x3942	; 0x803942 <cal_a+0x3>
     f84:	0e 94 50 04 	call	0x8a0	; 0x8a0 <build_cal_out_put>
     f88:	4f c1       	rjmp	.+670    	; 0x1228 <handle_uart_buffer+0x646>
		}  // RSRN
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
     f8a:	f9 81       	ldd	r31, Y+1	; 0x01
     f8c:	f5 30       	cpi	r31, 0x05	; 5
     f8e:	29 f0       	breq	.+10     	; 0xf9a <handle_uart_buffer+0x3b8>
     f90:	2a 81       	ldd	r18, Y+2	; 0x02
     f92:	2b 30       	cpi	r18, 0x0B	; 11
     f94:	09 f4       	brne	.+2      	; 0xf98 <handle_uart_buffer+0x3b6>
     f96:	52 c2       	rjmp	.+1188   	; 0x143c <handle_uart_buffer+0x85a>
     f98:	47 c1       	rjmp	.+654    	; 0x1228 <handle_uart_buffer+0x646>
		memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
     f9a:	60 91 08 38 	lds	r22, 0x3808	; 0x803808 <__data_start+0x8>
     f9e:	70 91 09 38 	lds	r23, 0x3809	; 0x803809 <__data_start+0x9>
     fa2:	db 01       	movw	r26, r22
     fa4:	0d 90       	ld	r0, X+
     fa6:	00 20       	and	r0, r0
     fa8:	e9 f7       	brne	.-6      	; 0xfa4 <handle_uart_buffer+0x3c2>
     faa:	11 97       	sbiw	r26, 0x01	; 1
     fac:	ad 01       	movw	r20, r26
     fae:	46 1b       	sub	r20, r22
     fb0:	57 0b       	sbc	r21, r23
     fb2:	c8 01       	movw	r24, r16
     fb4:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
			v -= CAL_NUM_LEN * 3;
				
			write_temp_cal_eeprom();
			build_cal_out_put(cal_a, cal_b, cal_c);
		}  // RSRN
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
     fb8:	89 2b       	or	r24, r25
     fba:	51 f5       	brne	.+84     	; 0x1010 <handle_uart_buffer+0x42e>
		memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
		v == address_length + 2 + cmd_len[RSRN])
     fbc:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
				
			write_temp_cal_eeprom();
			build_cal_out_put(cal_a, cal_b, cal_c);
		}  // RSRN
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4b 81       	ldd	r20, Y+3	; 0x03
     fc4:	84 2f       	mov	r24, r20
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	06 96       	adiw	r24, 0x06	; 6
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	01 f5       	brne	.+64     	; 0x1010 <handle_uart_buffer+0x42e>
		v == address_length + 2 + cmd_len[RSRN])
		{
			v--;
     fd0:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
     fd4:	81 50       	subi	r24, 0x01	; 1
     fd6:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <v>
			write_enabled = 0;
     fda:	10 92 a5 38 	sts	0x38A5, r1	; 0x8038a5 <write_enabled>
			memcpy(recv + v, addr, ADDRESS_LEN);
     fde:	a0 91 9a 38 	lds	r26, 0x389A	; 0x80389a <v>
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	a2 55       	subi	r26, 0x52	; 82
     fe6:	b7 4c       	sbci	r27, 0xC7	; 199
     fe8:	86 e0       	ldi	r24, 0x06	; 6
     fea:	eb e4       	ldi	r30, 0x4B	; 75
     fec:	f9 e3       	ldi	r31, 0x39	; 57
     fee:	01 90       	ld	r0, Z+
     ff0:	0d 92       	st	X+, r0
     ff2:	8a 95       	dec	r24
     ff4:	e1 f7       	brne	.-8      	; 0xfee <handle_uart_buffer+0x40c>
			v += ADDRESS_LEN;
     ff6:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
     ffa:	8a 5f       	subi	r24, 0xFA	; 250
     ffc:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <v>
			send_size = v;
    1000:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <send_size>
    100a:	90 93 95 38 	sts	0x3895, r25	; 0x803895 <send_size+0x1>
			send_enable = 1;
    100e:	13 c1       	rjmp	.+550    	; 0x1236 <handle_uart_buffer+0x654>
		} // RS read settings temp address
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	85 30       	cpi	r24, 0x05	; 5
    1014:	09 f4       	brne	.+2      	; 0x1018 <handle_uart_buffer+0x436>
    1016:	80 c1       	rjmp	.+768    	; 0x1318 <handle_uart_buffer+0x736>
    1018:	87 30       	cpi	r24, 0x07	; 7
    101a:	09 f4       	brne	.+2      	; 0x101e <handle_uart_buffer+0x43c>
    101c:	90 c1       	rjmp	.+800    	; 0x133e <handle_uart_buffer+0x75c>
    101e:	8b 30       	cpi	r24, 0x0B	; 11
    1020:	09 f4       	brne	.+2      	; 0x1024 <handle_uart_buffer+0x442>
    1022:	a0 c1       	rjmp	.+832    	; 0x1364 <handle_uart_buffer+0x782>
    1024:	01 c1       	rjmp	.+514    	; 0x1228 <handle_uart_buffer+0x646>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
		v == address_length + 2 + cmd_len[RS])
    1026:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
			v += ADDRESS_LEN;
			send_size = v;
			send_enable = 1;
		} // RS read settings temp address
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	eb 81       	ldd	r30, Y+3	; 0x03
    102e:	8e 2f       	mov	r24, r30
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	04 96       	adiw	r24, 0x04	; 4
    1034:	28 17       	cp	r18, r24
    1036:	39 07       	cpc	r19, r25
    1038:	01 f5       	brne	.+64     	; 0x107a <handle_uart_buffer+0x498>
		v == address_length + 2 + cmd_len[RS])
		{
			v--;
    103a:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <v>
			write_enabled = 0;
    1044:	10 92 a5 38 	sts	0x38A5, r1	; 0x8038a5 <write_enabled>
			memcpy(recv + v, setting, sizeof(setting));
    1048:	a0 91 9a 38 	lds	r26, 0x389A	; 0x80389a <v>
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	a2 55       	subi	r26, 0x52	; 82
    1050:	b7 4c       	sbci	r27, 0xC7	; 199
    1052:	88 e0       	ldi	r24, 0x08	; 8
    1054:	e3 e4       	ldi	r30, 0x43	; 67
    1056:	f9 e3       	ldi	r31, 0x39	; 57
    1058:	01 90       	ld	r0, Z+
    105a:	0d 92       	st	X+, r0
    105c:	8a 95       	dec	r24
    105e:	e1 f7       	brne	.-8      	; 0x1058 <handle_uart_buffer+0x476>
			v += sizeof(setting);
    1060:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
    1064:	88 5f       	subi	r24, 0xF8	; 248
    1066:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <v>
			send_size = v;
    106a:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <send_size>
    1074:	90 93 95 38 	sts	0x3895, r25	; 0x803895 <send_size+0x1>
			send_enable = 1;
    1078:	de c0       	rjmp	.+444    	; 0x1236 <handle_uart_buffer+0x654>
		} // SU write settings temp address
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    107a:	f9 81       	ldd	r31, Y+1	; 0x01
    107c:	f5 30       	cpi	r31, 0x05	; 5
    107e:	21 f0       	breq	.+8      	; 0x1088 <handle_uart_buffer+0x4a6>
    1080:	2a 81       	ldd	r18, Y+2	; 0x02
    1082:	2b 30       	cpi	r18, 0x0B	; 11
    1084:	09 f0       	breq	.+2      	; 0x1088 <handle_uart_buffer+0x4a6>
    1086:	d0 c0       	rjmp	.+416    	; 0x1228 <handle_uart_buffer+0x646>
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    1088:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <__data_start+0xc>
    108c:	70 91 0d 38 	lds	r23, 0x380D	; 0x80380d <__data_start+0xd>
    1090:	fb 01       	movw	r30, r22
    1092:	01 90       	ld	r0, Z+
    1094:	00 20       	and	r0, r0
    1096:	e9 f7       	brne	.-6      	; 0x1092 <handle_uart_buffer+0x4b0>
    1098:	31 97       	sbiw	r30, 0x01	; 1
    109a:	af 01       	movw	r20, r30
    109c:	46 1b       	sub	r20, r22
    109e:	57 0b       	sbc	r21, r23
    10a0:	c8 01       	movw	r24, r16
    10a2:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
			memcpy(recv + v, setting, sizeof(setting));
			v += sizeof(setting);
			send_size = v;
			send_enable = 1;
		} // SU write settings temp address
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    10a6:	89 2b       	or	r24, r25
    10a8:	09 f0       	breq	.+2      	; 0x10ac <handle_uart_buffer+0x4ca>
    10aa:	be c0       	rjmp	.+380    	; 0x1228 <handle_uart_buffer+0x646>
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
		v >= address_length + 2 + cmd_len[SU] &&
    10ac:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
			v += sizeof(setting);
			send_size = v;
			send_enable = 1;
		} // SU write settings temp address
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[SU], strlen(cmd_list[SU])) == 0 &&
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	4b 81       	ldd	r20, Y+3	; 0x03
    10b4:	84 2f       	mov	r24, r20
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	04 96       	adiw	r24, 0x04	; 4
    10ba:	28 17       	cp	r18, r24
    10bc:	39 07       	cpc	r19, r25
    10be:	0c f4       	brge	.+2      	; 0x10c2 <handle_uart_buffer+0x4e0>
    10c0:	b3 c0       	rjmp	.+358    	; 0x1228 <handle_uart_buffer+0x646>
		v >= address_length + 2 + cmd_len[SU] &&
    10c2:	80 91 a5 38 	lds	r24, 0x38A5	; 0x8038a5 <write_enabled>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	09 f0       	breq	.+2      	; 0x10cc <handle_uart_buffer+0x4ea>
    10ca:	ae c0       	rjmp	.+348    	; 0x1228 <handle_uart_buffer+0x646>
		write_enabled == 1)
		{
			v--;
    10cc:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
    10d0:	81 50       	subi	r24, 0x01	; 1
    10d2:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <v>
			write_enabled = 0;
    10d6:	10 92 a5 38 	sts	0x38A5, r1	; 0x8038a5 <write_enabled>
			memcpy(hex_tmp, recv + address_length + 1 + cmd_len[SU], 2);
    10da:	f7 01       	movw	r30, r14
    10dc:	ef 54       	subi	r30, 0x4F	; 79
    10de:	f7 4c       	sbci	r31, 0xC7	; 199
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <hex_tmp>
    10e8:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <hex_tmp+0x1>
			tmp_addr = GetByteFromString(hex_tmp);
    10ec:	8f e2       	ldi	r24, 0x2F	; 47
    10ee:	99 e3       	ldi	r25, 0x39	; 57
    10f0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <GetByteFromString>
    10f4:	80 93 2e 39 	sts	0x392E, r24	; 0x80392e <tmp_addr>
			memcpy(hex_tmp, recv + address_length + 3 + cmd_len[SU], 2);
    10f8:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <address_length>
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	ed 54       	subi	r30, 0x4D	; 77
    1100:	f7 4c       	sbci	r31, 0xC7	; 199
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <hex_tmp>
    110a:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <hex_tmp+0x1>
			tmp_uart = GetByteFromString(hex_tmp);
    110e:	8f e2       	ldi	r24, 0x2F	; 47
    1110:	99 e3       	ldi	r25, 0x39	; 57
    1112:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <GetByteFromString>
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	80 93 51 39 	sts	0x3951, r24	; 0x803951 <tmp_uart>
			
			if (tmp_addr >= 0x21 && temp_data <= 0x7E)
    111c:	80 91 2e 39 	lds	r24, 0x392E	; 0x80392e <tmp_addr>
    1120:	8a 83       	std	Y+2, r24	; 0x02
    1122:	81 32       	cpi	r24, 0x21	; 33
    1124:	f8 f0       	brcs	.+62     	; 0x1164 <handle_uart_buffer+0x582>
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	4c ef       	ldi	r20, 0xFC	; 252
    112c:	52 e4       	ldi	r21, 0x42	; 66
    112e:	60 91 31 39 	lds	r22, 0x3931	; 0x803931 <temp_data>
    1132:	70 91 32 39 	lds	r23, 0x3932	; 0x803932 <temp_data+0x1>
    1136:	80 91 33 39 	lds	r24, 0x3933	; 0x803933 <temp_data+0x2>
    113a:	90 91 34 39 	lds	r25, 0x3934	; 0x803934 <temp_data+0x3>
    113e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__cmpsf2>
    1142:	18 16       	cp	r1, r24
    1144:	7c f0       	brlt	.+30     	; 0x1164 <handle_uart_buffer+0x582>
			{
				setting[0] = recv[address_length + 1 + cmd_len[SU]];
    1146:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <address_length>
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	a3 e4       	ldi	r26, 0x43	; 67
    114e:	b9 e3       	ldi	r27, 0x39	; 57
    1150:	e2 55       	subi	r30, 0x52	; 82
    1152:	f7 4c       	sbci	r31, 0xC7	; 199
    1154:	83 81       	ldd	r24, Z+3	; 0x03
    1156:	8c 93       	st	X, r24
				setting[1] = recv[address_length + 2 + cmd_len[SU]];
    1158:	84 81       	ldd	r24, Z+4	; 0x04
    115a:	11 96       	adiw	r26, 0x01	; 1
    115c:	8c 93       	st	X, r24
				single_temp_addr = tmp_addr;
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	90 93 39 39 	sts	0x3939, r25	; 0x803939 <single_temp_addr>
			}
			if (tmp_uart == 0x02 || tmp_uart == 0x04 || tmp_uart == 0x05 || tmp_uart == 0x06 || tmp_uart == 0x07)
    1164:	e9 81       	ldd	r30, Y+1	; 0x01
    1166:	e2 30       	cpi	r30, 0x02	; 2
    1168:	21 f0       	breq	.+8      	; 0x1172 <handle_uart_buffer+0x590>
    116a:	8e 2f       	mov	r24, r30
    116c:	84 50       	subi	r24, 0x04	; 4
    116e:	84 30       	cpi	r24, 0x04	; 4
    1170:	c8 f4       	brcc	.+50     	; 0x11a4 <handle_uart_buffer+0x5c2>
			{
				if (tmp_uart != uart_baud_rate) {
    1172:	80 91 56 39 	lds	r24, 0x3956	; 0x803956 <uart_baud_rate>
    1176:	f9 81       	ldd	r31, Y+1	; 0x01
    1178:	f8 17       	cp	r31, r24
    117a:	19 f0       	breq	.+6      	; 0x1182 <handle_uart_buffer+0x5a0>
					bUpdateUart = 1;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 93 9e 38 	sts	0x389E, r24	; 0x80389e <bUpdateUart>
				}
				uart_baud_rate = tmp_uart;
    1182:	29 81       	ldd	r18, Y+1	; 0x01
    1184:	20 93 56 39 	sts	0x3956, r18	; 0x803956 <uart_baud_rate>
				setting[2] = recv[address_length + 3 + cmd_len[SU]];
    1188:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <address_length>
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	a3 e4       	ldi	r26, 0x43	; 67
    1190:	b9 e3       	ldi	r27, 0x39	; 57
    1192:	e2 55       	subi	r30, 0x52	; 82
    1194:	f7 4c       	sbci	r31, 0xC7	; 199
    1196:	85 81       	ldd	r24, Z+5	; 0x05
    1198:	12 96       	adiw	r26, 0x02	; 2
    119a:	8c 93       	st	X, r24
    119c:	12 97       	sbiw	r26, 0x02	; 2
				setting[3] = recv[address_length + 4 + cmd_len[SU]];
    119e:	86 81       	ldd	r24, Z+6	; 0x06
    11a0:	13 96       	adiw	r26, 0x03	; 3
    11a2:	8c 93       	st	X, r24
				//EEPROM_write(EEPROM_BAUD_RATE_START_BYTE, uart_baud_rate);
			}
			setting[4] = recv[address_length + 5 + cmd_len[SU]];
    11a4:	e0 91 9c 38 	lds	r30, 0x389C	; 0x80389c <address_length>
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	e2 55       	subi	r30, 0x52	; 82
    11ac:	f7 4c       	sbci	r31, 0xC7	; 199
    11ae:	47 81       	ldd	r20, Z+7	; 0x07
    11b0:	a3 e4       	ldi	r26, 0x43	; 67
    11b2:	b9 e3       	ldi	r27, 0x39	; 57
    11b4:	14 96       	adiw	r26, 0x04	; 4
    11b6:	4c 93       	st	X, r20
    11b8:	14 97       	sbiw	r26, 0x04	; 4
			setting[5] = recv[address_length + 6 + cmd_len[SU]];
    11ba:	20 85       	ldd	r18, Z+8	; 0x08
    11bc:	15 96       	adiw	r26, 0x05	; 5
    11be:	2c 93       	st	X, r18
    11c0:	15 97       	sbiw	r26, 0x05	; 5
			setting[6] = recv[address_length + 7 + cmd_len[SU]];
    11c2:	81 85       	ldd	r24, Z+9	; 0x09
    11c4:	16 96       	adiw	r26, 0x06	; 6
    11c6:	8c 93       	st	X, r24
    11c8:	16 97       	sbiw	r26, 0x06	; 6
			
			check_sum_enable = setting[4] - 0x30;
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	40 53       	subi	r20, 0x30	; 48
    11ce:	51 09       	sbc	r21, r1
    11d0:	40 93 a3 38 	sts	0x38A3, r20	; 0x8038a3 <check_sum_enable>
    11d4:	50 93 a4 38 	sts	0x38A4, r21	; 0x8038a4 <check_sum_enable+0x1>
			delay = setting[5] - 0x30;
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	20 53       	subi	r18, 0x30	; 48
    11dc:	31 09       	sbc	r19, r1
    11de:	20 93 a1 38 	sts	0x38A1, r18	; 0x8038a1 <delay>
    11e2:	30 93 a2 38 	sts	0x38A2, r19	; 0x8038a2 <delay+0x1>
			avg_level = setting[6] - 0x30;
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	c0 97       	sbiw	r24, 0x30	; 48
    11ea:	80 93 9f 38 	sts	0x389F, r24	; 0x80389f <avg_level>
    11ee:	90 93 a0 38 	sts	0x38A0, r25	; 0x8038a0 <avg_level+0x1>
    11f2:	8d 01       	movw	r16, r26
    11f4:	82 e2       	ldi	r24, 0x22	; 34
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	9c 83       	std	Y+4, r25	; 0x04
			
			for(int i = 0; i < 8; i++) {
				EEPROM_write(EEPROM_SETTING_START_BYTE + i, setting[i]);
    11fc:	f8 01       	movw	r30, r16
    11fe:	61 91       	ld	r22, Z+
    1200:	8f 01       	movw	r16, r30
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	8b 83       	std	Y+3, r24	; 0x03
    1212:	9c 83       	std	Y+4, r25	; 0x04
			
			check_sum_enable = setting[4] - 0x30;
			delay = setting[5] - 0x30;
			avg_level = setting[6] - 0x30;
			
			for(int i = 0; i < 8; i++) {
    1214:	8a 97       	sbiw	r24, 0x2a	; 42
    1216:	91 f7       	brne	.-28     	; 0x11fc <handle_uart_buffer+0x61a>
				EEPROM_write(EEPROM_SETTING_START_BYTE + i, setting[i]);
			}
			
			send_size = v;
    1218:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <v>
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	80 93 94 38 	sts	0x3894, r24	; 0x803894 <send_size>
    1222:	90 93 95 38 	sts	0x3895, r25	; 0x803895 <send_size+0x1>
    1226:	07 c0       	rjmp	.+14     	; 0x1236 <handle_uart_buffer+0x654>
			send_enable = 1;
		}
			
		if (send_enable == 1)
    1228:	80 91 96 38 	lds	r24, 0x3896	; 0x803896 <send_enable>
    122c:	90 91 97 38 	lds	r25, 0x3897	; 0x803897 <send_enable+0x1>
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	09 f0       	breq	.+2      	; 0x1236 <handle_uart_buffer+0x654>
    1234:	42 c0       	rjmp	.+132    	; 0x12ba <handle_uart_buffer+0x6d8>
		{
			send_enable = 0;
    1236:	10 92 96 38 	sts	0x3896, r1	; 0x803896 <send_enable>
    123a:	10 92 97 38 	sts	0x3897, r1	; 0x803897 <send_enable+0x1>
			if (delay != 0)
    123e:	80 91 a1 38 	lds	r24, 0x38A1	; 0x8038a1 <delay>
    1242:	90 91 a2 38 	lds	r25, 0x38A2	; 0x8038a2 <delay+0x1>
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	e1 f0       	breq	.+56     	; 0x1282 <handle_uart_buffer+0x6a0>
			{
				for(n = 0; n < delay; n++)
    124a:	10 92 98 38 	sts	0x3898, r1	; 0x803898 <n>
    124e:	20 91 98 38 	lds	r18, 0x3898	; 0x803898 <n>
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	28 17       	cp	r18, r24
    1256:	39 07       	cpc	r19, r25
    1258:	a4 f4       	brge	.+40     	; 0x1282 <handle_uart_buffer+0x6a0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    125a:	e2 e6       	ldi	r30, 0x62	; 98
    125c:	f3 e0       	ldi	r31, 0x03	; 3
    125e:	31 97       	sbiw	r30, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <handle_uart_buffer+0x67c>
    1262:	00 c0       	rjmp	.+0      	; 0x1264 <handle_uart_buffer+0x682>
    1264:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <n>
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <n>
    126e:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <n>
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	20 91 a1 38 	lds	r18, 0x38A1	; 0x8038a1 <delay>
    1278:	30 91 a2 38 	lds	r19, 0x38A2	; 0x8038a2 <delay+0x1>
    127c:	82 17       	cp	r24, r18
    127e:	93 07       	cpc	r25, r19
    1280:	64 f3       	brlt	.-40     	; 0x125a <handle_uart_buffer+0x678>
				{
					_delay_us(1040);
				}
			}
			print_bytes((uint8_t *)recv, send_size, check_sum_enable);
    1282:	40 91 a3 38 	lds	r20, 0x38A3	; 0x8038a3 <check_sum_enable>
    1286:	50 91 a4 38 	lds	r21, 0x38A4	; 0x8038a4 <check_sum_enable+0x1>
    128a:	60 91 94 38 	lds	r22, 0x3894	; 0x803894 <send_size>
    128e:	8e ea       	ldi	r24, 0xAE	; 174
    1290:	98 e3       	ldi	r25, 0x38	; 56
    1292:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <print_bytes>
				
			if (bUpdateUart)
    1296:	80 91 9e 38 	lds	r24, 0x389E	; 0x80389e <bUpdateUart>
    129a:	88 23       	and	r24, r24
    129c:	71 f0       	breq	.+28     	; 0x12ba <handle_uart_buffer+0x6d8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    129e:	fa e2       	ldi	r31, 0x2A	; 42
    12a0:	2c e2       	ldi	r18, 0x2C	; 44
    12a2:	4a e0       	ldi	r20, 0x0A	; 10
    12a4:	f1 50       	subi	r31, 0x01	; 1
    12a6:	20 40       	sbci	r18, 0x00	; 0
    12a8:	40 40       	sbci	r20, 0x00	; 0
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <handle_uart_buffer+0x6c2>
    12ac:	00 00       	nop
			{
				_delay_ms(1000);
				bUpdateUart = 0;
    12ae:	10 92 9e 38 	sts	0x389E, r1	; 0x80389e <bUpdateUart>
				initUSART(uart_baud_rate);
    12b2:	80 91 56 39 	lds	r24, 0x3956	; 0x803956 <uart_baud_rate>
    12b6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <initUSART>
			}
		}
		address_type = 0;
    12ba:	10 92 9d 38 	sts	0x389D, r1	; 0x80389d <address_type>
		v = 0;
    12be:	10 92 9a 38 	sts	0x389A, r1	; 0x80389a <v>
		
		handle_uart_flag = 0;
    12c2:	10 92 8c 38 	sts	0x388C, r1	; 0x80388c <handle_uart_flag>
    12c6:	10 92 8d 38 	sts	0x388D, r1	; 0x80388d <handle_uart_flag+0x1>
	}
}
    12ca:	de c0       	rjmp	.+444    	; 0x1488 <handle_uart_buffer+0x8a6>
			get_avg_data(&temp_data);
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
			build_output(temp_data);
		} // RD RH sensor response, all address cases
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 &&
    12cc:	60 91 02 38 	lds	r22, 0x3802	; 0x803802 <__data_start+0x2>
    12d0:	70 91 03 38 	lds	r23, 0x3803	; 0x803803 <__data_start+0x3>
    12d4:	fb 01       	movw	r30, r22
    12d6:	01 90       	ld	r0, Z+
    12d8:	00 20       	and	r0, r0
    12da:	e9 f7       	brne	.-6      	; 0x12d6 <handle_uart_buffer+0x6f4>
    12dc:	31 97       	sbiw	r30, 0x01	; 1
    12de:	af 01       	movw	r20, r30
    12e0:	46 1b       	sub	r20, r22
    12e2:	57 0b       	sbc	r21, r23
    12e4:	c8 01       	movw	r24, r16
    12e6:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
		{
			get_avg_data(&temp_data);
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
			build_output(temp_data);
		} // RD RH sensor response, all address cases
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    12ea:	89 2b       	or	r24, r25
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <handle_uart_buffer+0x70e>
    12ee:	68 c0       	rjmp	.+208    	; 0x13c0 <handle_uart_buffer+0x7de>
    12f0:	86 c0       	rjmp	.+268    	; 0x13fe <handle_uart_buffer+0x81c>
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Write Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
    12f2:	60 91 06 38 	lds	r22, 0x3806	; 0x803806 <__data_start+0x6>
    12f6:	70 91 07 38 	lds	r23, 0x3807	; 0x803807 <__data_start+0x7>
    12fa:	fb 01       	movw	r30, r22
    12fc:	01 90       	ld	r0, Z+
    12fe:	00 20       	and	r0, r0
    1300:	e9 f7       	brne	.-6      	; 0x12fc <handle_uart_buffer+0x71a>
    1302:	31 97       	sbiw	r30, 0x01	; 1
    1304:	af 01       	movw	r20, r30
    1306:	46 1b       	sub	r20, r22
    1308:	57 0b       	sbc	r21, r23
    130a:	c8 01       	movw	r24, r16
    130c:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Write Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    1310:	89 2b       	or	r24, r25
    1312:	09 f4       	brne	.+2      	; 0x1316 <handle_uart_buffer+0x734>
    1314:	87 c0       	rjmp	.+270    	; 0x1424 <handle_uart_buffer+0x842>
    1316:	a5 c0       	rjmp	.+330    	; 0x1462 <handle_uart_buffer+0x880>
			v += ADDRESS_LEN;
			send_size = v;
			send_enable = 1;
		} // RS read settings temp address
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    1318:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    131c:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    1320:	fb 01       	movw	r30, r22
    1322:	01 90       	ld	r0, Z+
    1324:	00 20       	and	r0, r0
    1326:	e9 f7       	brne	.-6      	; 0x1322 <handle_uart_buffer+0x740>
    1328:	31 97       	sbiw	r30, 0x01	; 1
    132a:	af 01       	movw	r20, r30
    132c:	46 1b       	sub	r20, r22
    132e:	57 0b       	sbc	r21, r23
    1330:	c8 01       	movw	r24, r16
    1332:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
			memcpy(recv + v, addr, ADDRESS_LEN);
			v += ADDRESS_LEN;
			send_size = v;
			send_enable = 1;
		} // RS read settings temp address
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    1336:	89 2b       	or	r24, r25
    1338:	09 f0       	breq	.+2      	; 0x133c <handle_uart_buffer+0x75a>
    133a:	a6 ce       	rjmp	.-692    	; 0x1088 <handle_uart_buffer+0x4a6>
    133c:	74 ce       	rjmp	.-792    	; 0x1026 <handle_uart_buffer+0x444>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    133e:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    1342:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    1346:	fb 01       	movw	r30, r22
    1348:	01 90       	ld	r0, Z+
    134a:	00 20       	and	r0, r0
    134c:	e9 f7       	brne	.-6      	; 0x1348 <handle_uart_buffer+0x766>
    134e:	31 97       	sbiw	r30, 0x01	; 1
    1350:	af 01       	movw	r20, r30
    1352:	46 1b       	sub	r20, r22
    1354:	57 0b       	sbc	r21, r23
    1356:	c8 01       	movw	r24, r16
    1358:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
			memcpy(recv + v, addr, ADDRESS_LEN);
			v += ADDRESS_LEN;
			send_size = v;
			send_enable = 1;
		} // RS read settings temp address
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    135c:	89 2b       	or	r24, r25
    135e:	09 f0       	breq	.+2      	; 0x1362 <handle_uart_buffer+0x780>
    1360:	93 ce       	rjmp	.-730    	; 0x1088 <handle_uart_buffer+0x4a6>
    1362:	61 ce       	rjmp	.-830    	; 0x1026 <handle_uart_buffer+0x444>
		memcmp(recv + 1 + address_length, cmd_list[RS], strlen(cmd_list[RS])) == 0 &&
    1364:	60 91 0a 38 	lds	r22, 0x380A	; 0x80380a <__data_start+0xa>
    1368:	70 91 0b 38 	lds	r23, 0x380B	; 0x80380b <__data_start+0xb>
    136c:	fb 01       	movw	r30, r22
    136e:	01 90       	ld	r0, Z+
    1370:	00 20       	and	r0, r0
    1372:	e9 f7       	brne	.-6      	; 0x136e <handle_uart_buffer+0x78c>
    1374:	31 97       	sbiw	r30, 0x01	; 1
    1376:	af 01       	movw	r20, r30
    1378:	46 1b       	sub	r20, r22
    137a:	57 0b       	sbc	r21, r23
    137c:	c8 01       	movw	r24, r16
    137e:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
			memcpy(recv + v, addr, ADDRESS_LEN);
			v += ADDRESS_LEN;
			send_size = v;
			send_enable = 1;
		} // RS read settings temp address
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    1382:	89 2b       	or	r24, r25
    1384:	09 f4       	brne	.+2      	; 0x1388 <handle_uart_buffer+0x7a6>
    1386:	4f ce       	rjmp	.-866    	; 0x1026 <handle_uart_buffer+0x444>
    1388:	7f ce       	rjmp	.-770    	; 0x1088 <handle_uart_buffer+0x4a6>
		}
			
		recv[0] = '*';
		/* RD temperature sensor response, all address cases */
		if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RD], strlen(cmd_list[RD])) == 0 &&
    138a:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__data_start>
    138e:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__data_start+0x1>
    1392:	fb 01       	movw	r30, r22
    1394:	01 90       	ld	r0, Z+
    1396:	00 20       	and	r0, r0
    1398:	e9 f7       	brne	.-6      	; 0x1394 <handle_uart_buffer+0x7b2>
    139a:	31 97       	sbiw	r30, 0x01	; 1
    139c:	af 01       	movw	r20, r30
    139e:	46 1b       	sub	r20, r22
    13a0:	57 0b       	sbc	r21, r23
    13a2:	80 91 9c 38 	lds	r24, 0x389C	; 0x80389c <address_length>
    13a6:	8b 83       	std	Y+3, r24	; 0x03
    13a8:	e8 2e       	mov	r14, r24
    13aa:	f1 2c       	mov	r15, r1
    13ac:	87 01       	movw	r16, r14
    13ae:	01 55       	subi	r16, 0x51	; 81
    13b0:	17 4c       	sbci	r17, 0xC7	; 199
    13b2:	c8 01       	movw	r24, r16
    13b4:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
			address_type = 0;
		}
			
		recv[0] = '*';
		/* RD temperature sensor response, all address cases */
		if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    13b8:	89 2b       	or	r24, r25
    13ba:	09 f4       	brne	.+2      	; 0x13be <handle_uart_buffer+0x7dc>
    13bc:	83 cc       	rjmp	.-1786   	; 0xcc4 <handle_uart_buffer+0xe2>
    13be:	db cc       	rjmp	.-1610   	; 0xd76 <handle_uart_buffer+0x194>
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
			build_output(temp_data);
		} // RD RH sensor response, all address cases
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 &&
		v == address_length + 2 + cmd_len[WE])
    13c0:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
			get_avg_data(&temp_data);
			temp_data =  cal_a + cal_b * temp_data + cal_c * temp_data * temp_data;
			build_output(temp_data);
		} // RD RH sensor response, all address cases
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[WE], strlen(cmd_list[WE])) == 0 &&
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	eb 81       	ldd	r30, Y+3	; 0x03
    13c8:	8e 2f       	mov	r24, r30
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	04 96       	adiw	r24, 0x04	; 4
    13ce:	28 17       	cp	r18, r24
    13d0:	39 07       	cpc	r19, r25
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <handle_uart_buffer+0x7f4>
    13d4:	ff cc       	rjmp	.-1538   	; 0xdd4 <handle_uart_buffer+0x1f2>
    13d6:	ea cc       	rjmp	.-1580   	; 0xdac <handle_uart_buffer+0x1ca>
			write_enabled = 1;
			send_enable = 1;
			send_size = v - 1;
		} // Read Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
    13d8:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <__data_start+0x4>
    13dc:	70 91 05 38 	lds	r23, 0x3805	; 0x803805 <__data_start+0x5>
    13e0:	fb 01       	movw	r30, r22
    13e2:	01 90       	ld	r0, Z+
    13e4:	00 20       	and	r0, r0
    13e6:	e9 f7       	brne	.-6      	; 0x13e2 <handle_uart_buffer+0x800>
    13e8:	31 97       	sbiw	r30, 0x01	; 1
    13ea:	af 01       	movw	r20, r30
    13ec:	46 1b       	sub	r20, r22
    13ee:	57 0b       	sbc	r21, r23
    13f0:	c8 01       	movw	r24, r16
    13f2:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
		{
			write_enabled = 1;
			send_enable = 1;
			send_size = v - 1;
		} // Read Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    13f6:	89 2b       	or	r24, r25
    13f8:	09 f4       	brne	.+2      	; 0x13fc <handle_uart_buffer+0x81a>
    13fa:	fd cc       	rjmp	.-1542   	; 0xdf6 <handle_uart_buffer+0x214>
    13fc:	2a cd       	rjmp	.-1452   	; 0xe52 <handle_uart_buffer+0x270>
		memcmp(recv + 1 + address_length, cmd_list[RCAL], strlen(cmd_list[RCAL])) == 0 &&
    13fe:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <__data_start+0x4>
    1402:	70 91 05 38 	lds	r23, 0x3805	; 0x803805 <__data_start+0x5>
    1406:	fb 01       	movw	r30, r22
    1408:	01 90       	ld	r0, Z+
    140a:	00 20       	and	r0, r0
    140c:	e9 f7       	brne	.-6      	; 0x1408 <handle_uart_buffer+0x826>
    140e:	31 97       	sbiw	r30, 0x01	; 1
    1410:	af 01       	movw	r20, r30
    1412:	46 1b       	sub	r20, r22
    1414:	57 0b       	sbc	r21, r23
    1416:	c8 01       	movw	r24, r16
    1418:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
		{
			write_enabled = 1;
			send_enable = 1;
			send_size = v - 1;
		} // Read Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    141c:	89 2b       	or	r24, r25
    141e:	09 f0       	breq	.+2      	; 0x1422 <handle_uart_buffer+0x840>
    1420:	68 cf       	rjmp	.-304    	; 0x12f2 <handle_uart_buffer+0x710>
    1422:	e9 cc       	rjmp	.-1582   	; 0xdf6 <handle_uart_buffer+0x214>
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Write Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
		v == address_length + 2 + cmd_len[WCAL] + CAL_NUM_LEN * 3 &&
    1424:	20 91 9a 38 	lds	r18, 0x389A	; 0x80389a <v>
		v == address_length + 2 + cmd_len[RCAL])
		{
			build_cal_out_put(cal_a, cal_b, cal_c);
		} // Write Temp Cal
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[WCAL], strlen(cmd_list[WCAL])) == 0 &&
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	fb 81       	ldd	r31, Y+3	; 0x03
    142c:	8f 2f       	mov	r24, r31
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	8a 96       	adiw	r24, 0x2a	; 42
    1432:	28 17       	cp	r18, r24
    1434:	39 07       	cpc	r19, r25
    1436:	09 f0       	breq	.+2      	; 0x143a <handle_uart_buffer+0x858>
    1438:	b0 cd       	rjmp	.-1184   	; 0xf9a <handle_uart_buffer+0x3b8>
    143a:	28 cd       	rjmp	.-1456   	; 0xe8c <handle_uart_buffer+0x2aa>
				
			write_temp_cal_eeprom();
			build_cal_out_put(cal_a, cal_b, cal_c);
		}  // RSRN
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
		memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
    143c:	60 91 08 38 	lds	r22, 0x3808	; 0x803808 <__data_start+0x8>
    1440:	70 91 09 38 	lds	r23, 0x3809	; 0x803809 <__data_start+0x9>
    1444:	fb 01       	movw	r30, r22
    1446:	01 90       	ld	r0, Z+
    1448:	00 20       	and	r0, r0
    144a:	e9 f7       	brne	.-6      	; 0x1446 <handle_uart_buffer+0x864>
    144c:	31 97       	sbiw	r30, 0x01	; 1
    144e:	af 01       	movw	r20, r30
    1450:	46 1b       	sub	r20, r22
    1452:	57 0b       	sbc	r21, r23
    1454:	c8 01       	movw	r24, r16
    1456:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
			v -= CAL_NUM_LEN * 3;
				
			write_temp_cal_eeprom();
			build_cal_out_put(cal_a, cal_b, cal_c);
		}  // RSRN
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    145a:	89 2b       	or	r24, r25
    145c:	09 f4       	brne	.+2      	; 0x1460 <handle_uart_buffer+0x87e>
    145e:	ae cd       	rjmp	.-1188   	; 0xfbc <handle_uart_buffer+0x3da>
    1460:	81 cf       	rjmp	.-254    	; 0x1364 <handle_uart_buffer+0x782>
		memcmp(recv + 1 + address_length, cmd_list[RSRN], strlen(cmd_list[RSRN])) == 0 &&
    1462:	60 91 08 38 	lds	r22, 0x3808	; 0x803808 <__data_start+0x8>
    1466:	70 91 09 38 	lds	r23, 0x3809	; 0x803809 <__data_start+0x9>
    146a:	fb 01       	movw	r30, r22
    146c:	01 90       	ld	r0, Z+
    146e:	00 20       	and	r0, r0
    1470:	e9 f7       	brne	.-6      	; 0x146c <handle_uart_buffer+0x88a>
    1472:	31 97       	sbiw	r30, 0x01	; 1
    1474:	af 01       	movw	r20, r30
    1476:	46 1b       	sub	r20, r22
    1478:	57 0b       	sbc	r21, r23
    147a:	c8 01       	movw	r24, r16
    147c:	0e 94 1f 14 	call	0x283e	; 0x283e <memcmp>
			v -= CAL_NUM_LEN * 3;
				
			write_temp_cal_eeprom();
			build_cal_out_put(cal_a, cal_b, cal_c);
		}  // RSRN
		else if ((address_type == 0x05 || address_type == 0x07 || address_type == 0x0b) &&
    1480:	89 2b       	or	r24, r25
    1482:	09 f0       	breq	.+2      	; 0x1486 <handle_uart_buffer+0x8a4>
    1484:	49 cf       	rjmp	.-366    	; 0x1318 <handle_uart_buffer+0x736>
    1486:	9a cd       	rjmp	.-1228   	; 0xfbc <handle_uart_buffer+0x3da>
		address_type = 0;
		v = 0;
		
		handle_uart_flag = 0;
	}
}
    1488:	24 96       	adiw	r28, 0x04	; 4
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	ff 90       	pop	r15
    1498:	ef 90       	pop	r14
    149a:	df 90       	pop	r13
    149c:	cf 90       	pop	r12
    149e:	bf 90       	pop	r11
    14a0:	af 90       	pop	r10
    14a2:	9f 90       	pop	r9
    14a4:	8f 90       	pop	r8
    14a6:	08 95       	ret

000014a8 <main>:



int main(void)
{	
	RTC.CLKSEL = 0x00;
    14a8:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
	
	loop_until_bit_is_clear(RTC.STATUS, RTC_PERBUSY_bp);
    14ac:	e1 e4       	ldi	r30, 0x41	; 65
    14ae:	f1 e0       	ldi	r31, 0x01	; 1
    14b0:	80 81       	ld	r24, Z
    14b2:	82 fd       	sbrc	r24, 2
    14b4:	fd cf       	rjmp	.-6      	; 0x14b0 <main+0x8>
		
	RTC_PER = 0x8000;  // set overflow to 32768, since clock is 32768Hz
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e8       	ldi	r25, 0x80	; 128
    14ba:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    14be:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>

	RTC.INTCTRL = (1 << RTC_OVF_bp);
    14c2:	e0 e4       	ldi	r30, 0x40	; 64
    14c4:	f1 e0       	ldi	r31, 0x01	; 1
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	82 83       	std	Z+2, r24	; 0x02
  
	RTC.CTRLA = 0x01;
    14ca:	80 83       	st	Z, r24
  
	if (read_init() != INITED)
    14cc:	0e 94 9c 02 	call	0x538	; 0x538 <read_init>
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	39 f0       	breq	.+14     	; 0x14e2 <main+0x3a>
	{
		EEPROM_write(EEPROM_INIT_STATUS_BYTE, INITED);
    14d4:	61 e0       	ldi	r22, 0x01	; 1
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EEPROM_write>
		init_config();
    14de:	0e 94 00 02 	call	0x400	; 0x400 <init_config>
	}
	
	load_config();
    14e2:	0e 94 a1 02 	call	0x542	; 0x542 <load_config>
    	
	initUSART(uart_baud_rate);
    14e6:	80 91 56 39 	lds	r24, 0x3956	; 0x803956 <uart_baud_rate>
    14ea:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <initUSART>
	
	init_sts35_sensor();
    14ee:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <init_sts35_sensor>
	
	enable_periodic_daq();
    14f2:	0e 94 17 0b 	call	0x162e	; 0x162e <enable_periodic_daq>
	
	
	sei();
    14f6:	78 94       	sei
		if (read_temp_flag) {
			read_temp_flag = 0;
			// read temp and save to arr
			if (data_index >= DATA_RETAIN_SIZE) {
				data_index = 0;
				data_overflow_flag = 1;
    14f8:	c1 e0       	ldi	r28, 0x01	; 1
    14fa:	d0 e0       	ldi	r29, 0x00	; 0
	
	sei();
	
	while (1) 
    {
		handle_uart_buffer();
    14fc:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <handle_uart_buffer>
		
		if (read_temp_flag) {
    1500:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <read_temp_flag>
    1504:	88 23       	and	r24, r24
    1506:	d1 f3       	breq	.-12     	; 0x14fc <main+0x54>
			read_temp_flag = 0;
    1508:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <read_temp_flag>
			// read temp and save to arr
			if (data_index >= DATA_RETAIN_SIZE) {
    150c:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <data_index>
    1510:	90 91 91 38 	lds	r25, 0x3891	; 0x803891 <data_index+0x1>
    1514:	4e 97       	sbiw	r24, 0x1e	; 30
    1516:	44 f0       	brlt	.+16     	; 0x1528 <main+0x80>
				data_index = 0;
    1518:	10 92 90 38 	sts	0x3890, r1	; 0x803890 <data_index>
    151c:	10 92 91 38 	sts	0x3891, r1	; 0x803891 <data_index+0x1>
				data_overflow_flag = 1;
    1520:	c0 93 8a 38 	sts	0x388A, r28	; 0x80388a <data_overflow_flag>
    1524:	d0 93 8b 38 	sts	0x388B, r29	; 0x80388b <data_overflow_flag+0x1>
			}
			

			if (current_data_index < data_index) {
    1528:	20 91 8e 38 	lds	r18, 0x388E	; 0x80388e <current_data_index>
    152c:	30 91 8f 38 	lds	r19, 0x388F	; 0x80388f <current_data_index+0x1>
    1530:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <data_index>
    1534:	90 91 91 38 	lds	r25, 0x3891	; 0x803891 <data_index+0x1>
    1538:	28 17       	cp	r18, r24
    153a:	39 07       	cpc	r19, r25
    153c:	44 f4       	brge	.+16     	; 0x154e <main+0xa6>
				current_data_index = data_index;
    153e:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <data_index>
    1542:	90 91 91 38 	lds	r25, 0x3891	; 0x803891 <data_index+0x1>
    1546:	80 93 8e 38 	sts	0x388E, r24	; 0x80388e <current_data_index>
    154a:	90 93 8f 38 	sts	0x388F, r25	; 0x80388f <current_data_index+0x1>
			}

			get_periodic_data(&data_arr[data_index++]);
    154e:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <data_index>
    1552:	90 91 91 38 	lds	r25, 0x3891	; 0x803891 <data_index+0x1>
    1556:	9c 01       	movw	r18, r24
    1558:	2f 5f       	subi	r18, 0xFF	; 255
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	20 93 90 38 	sts	0x3890, r18	; 0x803890 <data_index>
    1560:	30 93 91 38 	sts	0x3891, r19	; 0x803891 <data_index+0x1>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	8e 5e       	subi	r24, 0xEE	; 238
    156e:	97 4c       	sbci	r25, 0xC7	; 199
    1570:	0e 94 2a 0b 	call	0x1654	; 0x1654 <get_periodic_data>
    1574:	c3 cf       	rjmp	.-122    	; 0x14fc <main+0x54>

00001576 <__vector_25>:

TWI_Master_t twi_master;
TWI_t inst;

ISR(TWI0_TWIM_vect)
{
    1576:	1f 92       	push	r1
    1578:	0f 92       	push	r0
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	0f 92       	push	r0
    157e:	11 24       	eor	r1, r1
    1580:	2f 93       	push	r18
    1582:	3f 93       	push	r19
    1584:	4f 93       	push	r20
    1586:	5f 93       	push	r21
    1588:	6f 93       	push	r22
    158a:	7f 93       	push	r23
    158c:	8f 93       	push	r24
    158e:	9f 93       	push	r25
    1590:	af 93       	push	r26
    1592:	bf 93       	push	r27
    1594:	ef 93       	push	r30
    1596:	ff 93       	push	r31
	/* Needed for the TWI to complete transactions */
	TWI_MasterInterruptHandler(&twi_master);
    1598:	86 e8       	ldi	r24, 0x86	; 134
    159a:	99 e3       	ldi	r25, 0x39	; 57
    159c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <TWI_MasterInterruptHandler>
}
    15a0:	ff 91       	pop	r31
    15a2:	ef 91       	pop	r30
    15a4:	bf 91       	pop	r27
    15a6:	af 91       	pop	r26
    15a8:	9f 91       	pop	r25
    15aa:	8f 91       	pop	r24
    15ac:	7f 91       	pop	r23
    15ae:	6f 91       	pop	r22
    15b0:	5f 91       	pop	r21
    15b2:	4f 91       	pop	r20
    15b4:	3f 91       	pop	r19
    15b6:	2f 91       	pop	r18
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	0f 90       	pop	r0
    15be:	1f 90       	pop	r1
    15c0:	18 95       	reti

000015c2 <init_i2c>:


void init_i2c() {
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	1f 92       	push	r1
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62

	PORTMUX_CTRLB |= PORTMUX_TWI0_ALTERNATE_gc;
    15cc:	e1 e0       	ldi	r30, 0x01	; 1
    15ce:	f2 e0       	ldi	r31, 0x02	; 2
    15d0:	80 81       	ld	r24, Z
    15d2:	80 61       	ori	r24, 0x10	; 16
    15d4:	80 83       	st	Z, r24

	volatile uint8_t baud_rate = (CLK_PER/(2*TWI_BAUDRATE) - 5);
    15d6:	8b e0       	ldi	r24, 0x0B	; 11
    15d8:	89 83       	std	Y+1, r24	; 0x01
	
	TWI_MasterInit(&twi_master, &TWI0, (TWI_RIEN_bm | TWI_WIEN_bm), baud_rate);
    15da:	29 81       	ldd	r18, Y+1	; 0x01
    15dc:	40 ec       	ldi	r20, 0xC0	; 192
    15de:	60 e1       	ldi	r22, 0x10	; 16
    15e0:	78 e0       	ldi	r23, 0x08	; 8
    15e2:	86 e8       	ldi	r24, 0x86	; 134
    15e4:	99 e3       	ldi	r25, 0x39	; 57
    15e6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <TWI_MasterInit>
}
    15ea:	0f 90       	pop	r0
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	08 95       	ret

000015f2 <init_sts35_sensor>:

void init_sts35_sensor() {
	init_i2c();
    15f2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <init_i2c>
    15f6:	08 95       	ret

000015f8 <crc8>:
   */

  const uint8_t POLYNOMIAL = 0x31;
  uint8_t crc = 0xFF;

  for (int j = len; j; --j) {
    15f8:	61 15       	cp	r22, r1
    15fa:	71 05       	cpc	r23, r1
    15fc:	b1 f0       	breq	.+44     	; 0x162a <crc8+0x32>
    15fe:	fc 01       	movw	r30, r24
    1600:	68 0f       	add	r22, r24
    1602:	79 1f       	adc	r23, r25
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    crc ^= *data++;

    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
    1606:	91 e3       	ldi	r25, 0x31	; 49

  const uint8_t POLYNOMIAL = 0x31;
  uint8_t crc = 0xFF;

  for (int j = len; j; --j) {
    crc ^= *data++;
    1608:	21 91       	ld	r18, Z+
    160a:	82 27       	eor	r24, r18
    160c:	28 e0       	ldi	r18, 0x08	; 8
    160e:	30 e0       	ldi	r19, 0x00	; 0

    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
    1610:	88 23       	and	r24, r24
    1612:	1c f4       	brge	.+6      	; 0x161a <crc8+0x22>
    1614:	88 0f       	add	r24, r24
    1616:	89 27       	eor	r24, r25
    1618:	01 c0       	rjmp	.+2      	; 0x161c <crc8+0x24>
    161a:	88 0f       	add	r24, r24
    161c:	21 50       	subi	r18, 0x01	; 1
    161e:	31 09       	sbc	r19, r1
  uint8_t crc = 0xFF;

  for (int j = len; j; --j) {
    crc ^= *data++;

    for (int i = 8; i; --i) {
    1620:	b9 f7       	brne	.-18     	; 0x1610 <crc8+0x18>
   */

  const uint8_t POLYNOMIAL = 0x31;
  uint8_t crc = 0xFF;

  for (int j = len; j; --j) {
    1622:	e6 17       	cp	r30, r22
    1624:	f7 07       	cpc	r31, r23
    1626:	81 f7       	brne	.-32     	; 0x1608 <crc8+0x10>
    1628:	08 95       	ret
   * Polynomial 0x31 (x8 + x5 +x4 +1)
   * Final XOR 0x00
   */

  const uint8_t POLYNOMIAL = 0x31;
  uint8_t crc = 0xFF;
    162a:	8f ef       	ldi	r24, 0xFF	; 255
    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
    }
  }
  return crc;
}
    162c:	08 95       	ret

0000162e <enable_periodic_daq>:

void enable_periodic_daq() {
	
	data_buf[0] = STS3X_PERIODIC_DAQ_1_HIGH >> 8;
    162e:	e0 e8       	ldi	r30, 0x80	; 128
    1630:	f9 e3       	ldi	r31, 0x39	; 57
    1632:	81 e2       	ldi	r24, 0x21	; 33
    1634:	80 83       	st	Z, r24
	data_buf[1] = (uint8_t)STS3X_PERIODIC_DAQ_1_HIGH;
    1636:	80 e3       	ldi	r24, 0x30	; 48
    1638:	81 83       	std	Z+1, r24	; 0x01
	
	TWI_MasterWrite(&twi_master, STS3X_DEFAULT_ADDR, data_buf, 2);
    163a:	22 e0       	ldi	r18, 0x02	; 2
    163c:	af 01       	movw	r20, r30
    163e:	6a e4       	ldi	r22, 0x4A	; 74
    1640:	86 e8       	ldi	r24, 0x86	; 134
    1642:	99 e3       	ldi	r25, 0x39	; 57
    1644:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <TWI_MasterWrite>
    1648:	82 ec       	ldi	r24, 0xC2	; 194
    164a:	92 ea       	ldi	r25, 0xA2	; 162
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <enable_periodic_daq+0x1e>
    1650:	00 c0       	rjmp	.+0      	; 0x1652 <enable_periodic_daq+0x24>
    1652:	08 95       	ret

00001654 <get_periodic_data>:
	
	_delay_ms(50);
}


void get_periodic_data(float *temp_out) {
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	ec 01       	movw	r28, r24
	float temp = 0;
	
	data_buf[0] = STS3X_FETCH_DATA >> 8;
    165a:	e0 e8       	ldi	r30, 0x80	; 128
    165c:	f9 e3       	ldi	r31, 0x39	; 57
    165e:	80 ee       	ldi	r24, 0xE0	; 224
    1660:	80 83       	st	Z, r24
	data_buf[1] = (uint8_t)STS3X_FETCH_DATA;
    1662:	11 82       	std	Z+1, r1	; 0x01
	
	TWI_MasterWrite(&twi_master, STS3X_DEFAULT_ADDR, data_buf, 2);
    1664:	22 e0       	ldi	r18, 0x02	; 2
    1666:	af 01       	movw	r20, r30
    1668:	6a e4       	ldi	r22, 0x4A	; 74
    166a:	86 e8       	ldi	r24, 0x86	; 134
    166c:	99 e3       	ldi	r25, 0x39	; 57
    166e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <TWI_MasterWrite>
    1672:	82 ec       	ldi	r24, 0xC2	; 194
    1674:	92 ea       	ldi	r25, 0xA2	; 162
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <get_periodic_data+0x22>
    167a:	00 c0       	rjmp	.+0      	; 0x167c <get_periodic_data+0x28>
	
	_delay_ms(50);
	
	TWI_MasterRead(&twi_master, STS3X_DEFAULT_ADDR, 3);
    167c:	43 e0       	ldi	r20, 0x03	; 3
    167e:	6a e4       	ldi	r22, 0x4A	; 74
    1680:	86 e8       	ldi	r24, 0x86	; 134
    1682:	99 e3       	ldi	r25, 0x39	; 57
    1684:	0e 94 de 0b 	call	0x17bc	; 0x17bc <TWI_MasterRead>
    1688:	8d e8       	ldi	r24, 0x8D	; 141
    168a:	90 e2       	ldi	r25, 0x20	; 32
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <get_periodic_data+0x38>
    1690:	00 00       	nop

	_delay_ms(10);

	if (crc8((uint8_t*)twi_master.readData, 2) == twi_master.readData[2])
    1692:	62 e0       	ldi	r22, 0x02	; 2
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	8a e9       	ldi	r24, 0x9A	; 154
    1698:	99 e3       	ldi	r25, 0x39	; 57
    169a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <crc8>
    169e:	90 91 9c 39 	lds	r25, 0x399C	; 0x80399c <twi_master+0x16>
    16a2:	89 13       	cpse	r24, r25
    16a4:	20 c0       	rjmp	.+64     	; 0x16e6 <get_periodic_data+0x92>
	{
		uint16_t tmp_raw = (twi_master.readData[0] * 256) + twi_master.readData[1];
    16a6:	e6 e8       	ldi	r30, 0x86	; 134
    16a8:	f9 e3       	ldi	r31, 0x39	; 57
    16aa:	64 89       	ldd	r22, Z+20	; 0x14
    16ac:	85 89       	ldd	r24, Z+21	; 0x15
		
		temp = (float)tmp_raw;
		
		temp = -45.0 + (175.0 * temp / 65535.0);
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	76 2f       	mov	r23, r22
    16b2:	66 27       	eor	r22, r22
    16b4:	68 0f       	add	r22, r24
    16b6:	71 1d       	adc	r23, r1
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__floatunsisf>
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	4f e2       	ldi	r20, 0x2F	; 47
    16c6:	53 e4       	ldi	r21, 0x43	; 67
    16c8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	3f ef       	ldi	r19, 0xFF	; 255
    16d0:	4f e7       	ldi	r20, 0x7F	; 127
    16d2:	57 e4       	ldi	r21, 0x47	; 71
    16d4:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__divsf3>
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	44 e3       	ldi	r20, 0x34	; 52
    16de:	52 e4       	ldi	r21, 0x42	; 66
    16e0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__subsf3>
    16e4:	04 c0       	rjmp	.+8      	; 0x16ee <get_periodic_data+0x9a>
		} else {
		temp = 999.99;
    16e6:	6c e5       	ldi	r22, 0x5C	; 92
    16e8:	7f ef       	ldi	r23, 0xFF	; 255
    16ea:	89 e7       	ldi	r24, 0x79	; 121
    16ec:	94 e4       	ldi	r25, 0x44	; 68
	}



	(*temp_out) = temp;
    16ee:	68 83       	st	Y, r22
    16f0:	79 83       	std	Y+1, r23	; 0x01
    16f2:	8a 83       	std	Y+2, r24	; 0x02
    16f4:	9b 83       	std	Y+3, r25	; 0x03
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <TWI_MasterInit>:
    16fc:	fc 01       	movw	r30, r24
    16fe:	60 83       	st	Z, r22
    1700:	71 83       	std	Z+1, r23	; 0x01
    1702:	41 60       	ori	r20, 0x01	; 1
    1704:	db 01       	movw	r26, r22
    1706:	13 96       	adiw	r26, 0x03	; 3
    1708:	4c 93       	st	X, r20
    170a:	a0 81       	ld	r26, Z
    170c:	b1 81       	ldd	r27, Z+1	; 0x01
    170e:	16 96       	adiw	r26, 0x06	; 6
    1710:	2c 93       	st	X, r18
    1712:	01 90       	ld	r0, Z+
    1714:	f0 81       	ld	r31, Z
    1716:	e0 2d       	mov	r30, r0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	85 83       	std	Z+5, r24	; 0x05
    171c:	08 95       	ret

0000171e <TWI_MasterWriteRead>:
    171e:	0f 93       	push	r16
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	ec 01       	movw	r28, r24
    1726:	22 31       	cpi	r18, 0x12	; 18
    1728:	c0 f5       	brcc	.+112    	; 0x179a <TWI_MasterWriteRead+0x7c>
    172a:	01 31       	cpi	r16, 0x11	; 17
    172c:	c0 f5       	brcc	.+112    	; 0x179e <TWI_MasterWriteRead+0x80>
    172e:	88 a5       	ldd	r24, Y+40	; 0x28
    1730:	81 11       	cpse	r24, r1
    1732:	37 c0       	rjmp	.+110    	; 0x17a2 <TWI_MasterWriteRead+0x84>
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	88 a7       	std	Y+40, r24	; 0x28
    1738:	19 a6       	std	Y+41, r1	; 0x29
    173a:	66 0f       	add	r22, r22
    173c:	6a 83       	std	Y+2, r22	; 0x02
    173e:	22 23       	and	r18, r18
    1740:	a1 f0       	breq	.+40     	; 0x176a <TWI_MasterWriteRead+0x4c>
    1742:	e4 2f       	mov	r30, r20
    1744:	f5 2f       	mov	r31, r21
    1746:	6f ef       	ldi	r22, 0xFF	; 255
    1748:	62 0f       	add	r22, r18
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	6f 5f       	subi	r22, 0xFF	; 255
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	91 91       	ld	r25, Z+
    1756:	de 01       	movw	r26, r28
    1758:	a4 0f       	add	r26, r20
    175a:	b5 1f       	adc	r27, r21
    175c:	13 96       	adiw	r26, 0x03	; 3
    175e:	9c 93       	st	X, r25
    1760:	4f 5f       	subi	r20, 0xFF	; 255
    1762:	5f 4f       	sbci	r21, 0xFF	; 255
    1764:	46 17       	cp	r20, r22
    1766:	57 07       	cpc	r21, r23
    1768:	a9 f7       	brne	.-22     	; 0x1754 <TWI_MasterWriteRead+0x36>
    176a:	2c a3       	std	Y+36, r18	; 0x24
    176c:	0d a3       	std	Y+37, r16	; 0x25
    176e:	1e a2       	std	Y+38, r1	; 0x26
    1770:	1f a2       	std	Y+39, r1	; 0x27
    1772:	8c a1       	ldd	r24, Y+36	; 0x24
    1774:	88 23       	and	r24, r24
    1776:	39 f0       	breq	.+14     	; 0x1786 <TWI_MasterWriteRead+0x68>
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	8e 7f       	andi	r24, 0xFE	; 254
    177c:	e8 81       	ld	r30, Y
    177e:	f9 81       	ldd	r31, Y+1	; 0x01
    1780:	87 83       	std	Z+7, r24	; 0x07
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	11 c0       	rjmp	.+34     	; 0x17a8 <TWI_MasterWriteRead+0x8a>
    1786:	8d a1       	ldd	r24, Y+37	; 0x25
    1788:	88 23       	and	r24, r24
    178a:	69 f0       	breq	.+26     	; 0x17a6 <TWI_MasterWriteRead+0x88>
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	81 60       	ori	r24, 0x01	; 1
    1790:	e8 81       	ld	r30, Y
    1792:	f9 81       	ldd	r31, Y+1	; 0x01
    1794:	87 83       	std	Z+7, r24	; 0x07
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	07 c0       	rjmp	.+14     	; 0x17a8 <TWI_MasterWriteRead+0x8a>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	05 c0       	rjmp	.+10     	; 0x17a8 <TWI_MasterWriteRead+0x8a>
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	03 c0       	rjmp	.+6      	; 0x17a8 <TWI_MasterWriteRead+0x8a>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <TWI_MasterWriteRead+0x8a>
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

000017b0 <TWI_MasterWrite>:
    17b0:	0f 93       	push	r16
    17b2:	00 e0       	ldi	r16, 0x00	; 0
    17b4:	0e 94 8f 0b 	call	0x171e	; 0x171e <TWI_MasterWriteRead>
    17b8:	0f 91       	pop	r16
    17ba:	08 95       	ret

000017bc <TWI_MasterRead>:
    17bc:	0f 93       	push	r16
    17be:	04 2f       	mov	r16, r20
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	0e 94 8f 0b 	call	0x171e	; 0x171e <TWI_MasterWriteRead>
    17ca:	0f 91       	pop	r16
    17cc:	08 95       	ret

000017ce <TWI_MasterArbitrationLostBusErrorHandler>:
    17ce:	fc 01       	movw	r30, r24
    17d0:	a0 81       	ld	r26, Z
    17d2:	b1 81       	ldd	r27, Z+1	; 0x01
    17d4:	15 96       	adiw	r26, 0x05	; 5
    17d6:	9c 91       	ld	r25, X
    17d8:	15 97       	sbiw	r26, 0x05	; 5
    17da:	92 ff       	sbrs	r25, 2
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
    17de:	84 e0       	ldi	r24, 0x04	; 4
    17e0:	81 a7       	std	Z+41, r24	; 0x29
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
    17e4:	83 e0       	ldi	r24, 0x03	; 3
    17e6:	81 a7       	std	Z+41, r24	; 0x29
    17e8:	98 60       	ori	r25, 0x08	; 8
    17ea:	15 96       	adiw	r26, 0x05	; 5
    17ec:	9c 93       	st	X, r25
    17ee:	10 a6       	std	Z+40, r1	; 0x28
    17f0:	08 95       	ret

000017f2 <TWI_MasterWriteHandler>:
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	fc 01       	movw	r30, r24
    17f8:	94 a1       	ldd	r25, Z+36	; 0x24
    17fa:	25 a1       	ldd	r18, Z+37	; 0x25
    17fc:	a0 81       	ld	r26, Z
    17fe:	b1 81       	ldd	r27, Z+1	; 0x01
    1800:	15 96       	adiw	r26, 0x05	; 5
    1802:	8c 91       	ld	r24, X
    1804:	15 97       	sbiw	r26, 0x05	; 5
    1806:	84 ff       	sbrs	r24, 4
    1808:	07 c0       	rjmp	.+14     	; 0x1818 <TWI_MasterWriteHandler+0x26>
    180a:	83 e0       	ldi	r24, 0x03	; 3
    180c:	14 96       	adiw	r26, 0x04	; 4
    180e:	8c 93       	st	X, r24
    1810:	85 e0       	ldi	r24, 0x05	; 5
    1812:	81 a7       	std	Z+41, r24	; 0x29
    1814:	10 a6       	std	Z+40, r1	; 0x28
    1816:	1c c0       	rjmp	.+56     	; 0x1850 <TWI_MasterWriteHandler+0x5e>
    1818:	86 a1       	ldd	r24, Z+38	; 0x26
    181a:	89 17       	cp	r24, r25
    181c:	58 f4       	brcc	.+22     	; 0x1834 <TWI_MasterWriteHandler+0x42>
    181e:	86 a1       	ldd	r24, Z+38	; 0x26
    1820:	ef 01       	movw	r28, r30
    1822:	c8 0f       	add	r28, r24
    1824:	d1 1d       	adc	r29, r1
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	18 96       	adiw	r26, 0x08	; 8
    182a:	8c 93       	st	X, r24
    182c:	86 a1       	ldd	r24, Z+38	; 0x26
    182e:	8f 5f       	subi	r24, 0xFF	; 255
    1830:	86 a3       	std	Z+38, r24	; 0x26
    1832:	0e c0       	rjmp	.+28     	; 0x1850 <TWI_MasterWriteHandler+0x5e>
    1834:	87 a1       	ldd	r24, Z+39	; 0x27
    1836:	82 17       	cp	r24, r18
    1838:	28 f4       	brcc	.+10     	; 0x1844 <TWI_MasterWriteHandler+0x52>
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	81 60       	ori	r24, 0x01	; 1
    183e:	17 96       	adiw	r26, 0x07	; 7
    1840:	8c 93       	st	X, r24
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <TWI_MasterWriteHandler+0x5e>
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	14 96       	adiw	r26, 0x04	; 4
    1848:	8c 93       	st	X, r24
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	81 a7       	std	Z+41, r24	; 0x29
    184e:	10 a6       	std	Z+40, r1	; 0x28
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <TWI_MasterReadHandler>:
    1856:	fc 01       	movw	r30, r24
    1858:	87 a1       	ldd	r24, Z+39	; 0x27
    185a:	80 31       	cpi	r24, 0x10	; 16
    185c:	70 f4       	brcc	.+28     	; 0x187a <TWI_MasterReadHandler+0x24>
    185e:	a0 81       	ld	r26, Z
    1860:	b1 81       	ldd	r27, Z+1	; 0x01
    1862:	18 96       	adiw	r26, 0x08	; 8
    1864:	8c 91       	ld	r24, X
    1866:	97 a1       	ldd	r25, Z+39	; 0x27
    1868:	df 01       	movw	r26, r30
    186a:	a9 0f       	add	r26, r25
    186c:	b1 1d       	adc	r27, r1
    186e:	54 96       	adiw	r26, 0x14	; 20
    1870:	8c 93       	st	X, r24
    1872:	87 a1       	ldd	r24, Z+39	; 0x27
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	87 a3       	std	Z+39, r24	; 0x27
    1878:	08 c0       	rjmp	.+16     	; 0x188a <TWI_MasterReadHandler+0x34>
    187a:	a0 81       	ld	r26, Z
    187c:	b1 81       	ldd	r27, Z+1	; 0x01
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	14 96       	adiw	r26, 0x04	; 4
    1882:	8c 93       	st	X, r24
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	81 a7       	std	Z+41, r24	; 0x29
    1888:	10 a6       	std	Z+40, r1	; 0x28
    188a:	95 a1       	ldd	r25, Z+37	; 0x25
    188c:	87 a1       	ldd	r24, Z+39	; 0x27
    188e:	89 17       	cp	r24, r25
    1890:	30 f4       	brcc	.+12     	; 0x189e <TWI_MasterReadHandler+0x48>
    1892:	01 90       	ld	r0, Z+
    1894:	f0 81       	ld	r31, Z
    1896:	e0 2d       	mov	r30, r0
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	84 83       	std	Z+4, r24	; 0x04
    189c:	08 95       	ret
    189e:	a0 81       	ld	r26, Z
    18a0:	b1 81       	ldd	r27, Z+1	; 0x01
    18a2:	87 e0       	ldi	r24, 0x07	; 7
    18a4:	14 96       	adiw	r26, 0x04	; 4
    18a6:	8c 93       	st	X, r24
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	81 a7       	std	Z+41, r24	; 0x29
    18ac:	10 a6       	std	Z+40, r1	; 0x28
    18ae:	08 95       	ret

000018b0 <TWI_MasterInterruptHandler>:
    18b0:	dc 01       	movw	r26, r24
    18b2:	ed 91       	ld	r30, X+
    18b4:	fc 91       	ld	r31, X
    18b6:	25 81       	ldd	r18, Z+5	; 0x05
    18b8:	32 2f       	mov	r19, r18
    18ba:	3c 70       	andi	r19, 0x0C	; 12
    18bc:	19 f0       	breq	.+6      	; 0x18c4 <TWI_MasterInterruptHandler+0x14>
    18be:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <TWI_MasterArbitrationLostBusErrorHandler>
    18c2:	08 95       	ret
    18c4:	26 ff       	sbrs	r18, 6
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <TWI_MasterInterruptHandler+0x1e>
    18c8:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <TWI_MasterWriteHandler>
    18cc:	08 95       	ret
    18ce:	22 23       	and	r18, r18
    18d0:	1c f4       	brge	.+6      	; 0x18d8 <TWI_MasterInterruptHandler+0x28>
    18d2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <TWI_MasterReadHandler>
    18d6:	08 95       	ret
    18d8:	26 e0       	ldi	r18, 0x06	; 6
    18da:	fc 01       	movw	r30, r24
    18dc:	21 a7       	std	Z+41, r18	; 0x29
    18de:	10 a6       	std	Z+40, r1	; 0x28
    18e0:	08 95       	ret

000018e2 <initUSART>:
	 uint8_t i = 0;
	 while (myString[i]) {
		 transmit_byte(myString[i]);
		 i++;
	 }
 }
    18e2:	85 30       	cpi	r24, 0x05	; 5
    18e4:	71 f0       	breq	.+28     	; 0x1902 <initUSART+0x20>
    18e6:	28 f4       	brcc	.+10     	; 0x18f2 <initUSART+0x10>
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	b9 f0       	breq	.+46     	; 0x191a <initUSART+0x38>
    18ec:	84 30       	cpi	r24, 0x04	; 4
    18ee:	31 f0       	breq	.+12     	; 0x18fc <initUSART+0x1a>
    18f0:	11 c0       	rjmp	.+34     	; 0x1914 <initUSART+0x32>
    18f2:	86 30       	cpi	r24, 0x06	; 6
    18f4:	49 f0       	breq	.+18     	; 0x1908 <initUSART+0x26>
    18f6:	87 30       	cpi	r24, 0x07	; 7
    18f8:	51 f0       	breq	.+20     	; 0x190e <initUSART+0x2c>
    18fa:	0c c0       	rjmp	.+24     	; 0x1914 <initUSART+0x32>
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3b e4       	ldi	r19, 0x4B	; 75
    1900:	0e c0       	rjmp	.+28     	; 0x191e <initUSART+0x3c>
    1902:	20 eb       	ldi	r18, 0xB0	; 176
    1904:	34 e0       	ldi	r19, 0x04	; 4
    1906:	0b c0       	rjmp	.+22     	; 0x191e <initUSART+0x3c>
    1908:	20 ec       	ldi	r18, 0xC0	; 192
    190a:	32 e1       	ldi	r19, 0x12	; 18
    190c:	08 c0       	rjmp	.+16     	; 0x191e <initUSART+0x3c>
    190e:	2c e2       	ldi	r18, 0x2C	; 44
    1910:	31 e0       	ldi	r19, 0x01	; 1
    1912:	05 c0       	rjmp	.+10     	; 0x191e <initUSART+0x3c>
    1914:	2c e2       	ldi	r18, 0x2C	; 44
    1916:	31 e0       	ldi	r19, 0x01	; 1
    1918:	02 c0       	rjmp	.+4      	; 0x191e <initUSART+0x3c>
    191a:	20 e8       	ldi	r18, 0x80	; 128
    191c:	35 e2       	ldi	r19, 0x25	; 37
    191e:	03 2e       	mov	r0, r19
    1920:	00 0c       	add	r0, r0
    1922:	44 0b       	sbc	r20, r20
    1924:	55 0b       	sbc	r21, r21
    1926:	64 e5       	ldi	r22, 0x54	; 84
    1928:	73 e7       	ldi	r23, 0x73	; 115
    192a:	8b ec       	ldi	r24, 0xCB	; 203
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__udivmodsi4>
    1932:	e0 e2       	ldi	r30, 0x20	; 32
    1934:	f4 e0       	ldi	r31, 0x04	; 4
    1936:	80 81       	ld	r24, Z
    1938:	84 60       	ori	r24, 0x04	; 4
    193a:	80 83       	st	Z, r24
    193c:	a4 e2       	ldi	r26, 0x24	; 36
    193e:	b4 e0       	ldi	r27, 0x04	; 4
    1940:	8c 91       	ld	r24, X
    1942:	84 60       	ori	r24, 0x04	; 4
    1944:	8c 93       	st	X, r24
    1946:	80 81       	ld	r24, Z
    1948:	87 7f       	andi	r24, 0xF7	; 247
    194a:	80 83       	st	Z, r24
    194c:	80 81       	ld	r24, Z
    194e:	81 60       	ori	r24, 0x01	; 1
    1950:	80 83       	st	Z, r24
    1952:	83 2f       	mov	r24, r19
    1954:	99 27       	eor	r25, r25
    1956:	87 fd       	sbrc	r24, 7
    1958:	9a 95       	dec	r25
    195a:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    195e:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
    1962:	e5 e0       	ldi	r30, 0x05	; 5
    1964:	f8 e0       	ldi	r31, 0x08	; 8
    1966:	80 81       	ld	r24, Z
    1968:	81 60       	ori	r24, 0x01	; 1
    196a:	80 83       	st	Z, r24
    196c:	80 81       	ld	r24, Z
    196e:	80 68       	ori	r24, 0x80	; 128
    1970:	80 83       	st	Z, r24
    1972:	80 ec       	ldi	r24, 0xC0	; 192
    1974:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
    197e:	e4 e0       	ldi	r30, 0x04	; 4
    1980:	f8 e0       	ldi	r31, 0x08	; 8
    1982:	80 81       	ld	r24, Z
    1984:	80 78       	andi	r24, 0x80	; 128
    1986:	80 83       	st	Z, r24
    1988:	08 95       	ret

0000198a <transmit_byte>:
    198a:	e4 e0       	ldi	r30, 0x04	; 4
    198c:	f8 e0       	ldi	r31, 0x08	; 8
    198e:	90 81       	ld	r25, Z
    1990:	95 ff       	sbrs	r25, 5
    1992:	fd cf       	rjmp	.-6      	; 0x198e <transmit_byte+0x4>
    1994:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    1998:	08 95       	ret

0000199a <nibbleToHexCharacter>:
 
 char nibbleToHexCharacter(uint8_t nibble) {
	 /* Converts 4 bits into hexadecimal */
	 if (nibble < 10) {
    199a:	8a 30       	cpi	r24, 0x0A	; 10
    199c:	10 f4       	brcc	.+4      	; 0x19a2 <nibbleToHexCharacter+0x8>
		 return ('0' + nibble);
    199e:	80 5d       	subi	r24, 0xD0	; 208
    19a0:	08 95       	ret
	 }
	 else {
		 return ('A' + nibble - 10);
    19a2:	89 5c       	subi	r24, 0xC9	; 201
	 }
 }
    19a4:	08 95       	ret

000019a6 <GetHexString>:

 void GetHexString(uint8_t byte, char *out)
 {
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	18 2f       	mov	r17, r24
    19ae:	eb 01       	movw	r28, r22
	 uint8_t nibble;
	 nibble = (byte & 0b11110000) >> 4;
	 out[0] = nibbleToHexCharacter(nibble);
    19b0:	82 95       	swap	r24
    19b2:	8f 70       	andi	r24, 0x0F	; 15
    19b4:	0e 94 cd 0c 	call	0x199a	; 0x199a <nibbleToHexCharacter>
    19b8:	88 83       	st	Y, r24
	 nibble = byte & 0b00001111;
	 out[1] = nibbleToHexCharacter(nibble);
    19ba:	81 2f       	mov	r24, r17
    19bc:	8f 70       	andi	r24, 0x0F	; 15
    19be:	0e 94 cd 0c 	call	0x199a	; 0x199a <nibbleToHexCharacter>
    19c2:	89 83       	std	Y+1, r24	; 0x01
 }
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	08 95       	ret

000019cc <GetByteFromString>:

uint8_t GetByteFromString(char *in)
{
    19cc:	fc 01       	movw	r30, r24
	uint8_t out = 0x00;
	
	if (in[0] >= 0x30 && in[0] <= 0x39)
    19ce:	20 81       	ld	r18, Z
    19d0:	90 ed       	ldi	r25, 0xD0	; 208
    19d2:	92 0f       	add	r25, r18
    19d4:	9a 30       	cpi	r25, 0x0A	; 10
    19d6:	20 f4       	brcc	.+8      	; 0x19e0 <GetByteFromString+0x14>
	{
		out += (in[0] - 0x30) << 4;
    19d8:	89 2f       	mov	r24, r25
    19da:	82 95       	swap	r24
    19dc:	80 7f       	andi	r24, 0xF0	; 240
    19de:	0a c0       	rjmp	.+20     	; 0x19f4 <GetByteFromString+0x28>
	}
	else if (in[0] >= 0x41 && in[0] <= 0x46)
    19e0:	8f eb       	ldi	r24, 0xBF	; 191
    19e2:	82 0f       	add	r24, r18
    19e4:	86 30       	cpi	r24, 0x06	; 6
    19e6:	28 f4       	brcc	.+10     	; 0x19f2 <GetByteFromString+0x26>
	{
		out += (in[0] - 0x37) << 4;
    19e8:	27 53       	subi	r18, 0x37	; 55
    19ea:	82 2f       	mov	r24, r18
    19ec:	82 95       	swap	r24
    19ee:	80 7f       	andi	r24, 0xF0	; 240
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <GetByteFromString+0x28>
	 out[1] = nibbleToHexCharacter(nibble);
 }

uint8_t GetByteFromString(char *in)
{
	uint8_t out = 0x00;
    19f2:	80 e0       	ldi	r24, 0x00	; 0
	else if (in[0] >= 0x41 && in[0] <= 0x46)
	{
		out += (in[0] - 0x37) << 4;
	}
	
	if (in[1] >= 0x30 && in[1] <= 0x39)
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	20 ed       	ldi	r18, 0xD0	; 208
    19f8:	29 0f       	add	r18, r25
    19fa:	2a 30       	cpi	r18, 0x0A	; 10
    19fc:	10 f4       	brcc	.+4      	; 0x1a02 <GetByteFromString+0x36>
	{
		out += (in[1] - 0x30);
    19fe:	82 0f       	add	r24, r18
    1a00:	08 95       	ret
	}
	else if (in[1] >= 0x41 && in[1] <= 0x46)
    1a02:	2f eb       	ldi	r18, 0xBF	; 191
    1a04:	29 0f       	add	r18, r25
    1a06:	26 30       	cpi	r18, 0x06	; 6
    1a08:	10 f4       	brcc	.+4      	; 0x1a0e <GetByteFromString+0x42>
	{
		out += (in[1] - 0x37);
    1a0a:	97 53       	subi	r25, 0x37	; 55
    1a0c:	89 0f       	add	r24, r25
		
	}
	
	
	return out;
}
    1a0e:	08 95       	ret

00001a10 <print_bytes>:

 void print_bytes(uint8_t myBytes[], uint8_t len, int check_sum_enable)
 {
    1a10:	af 92       	push	r10
    1a12:	bf 92       	push	r11
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <print_bytes+0x16>
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	 uint8_t i = 0;
	 int checksum = 0;
	 char tmp[2];
	 
	 if (check_sum_enable == 1)
    1a2a:	41 30       	cpi	r20, 0x01	; 1
    1a2c:	51 05       	cpc	r21, r1
    1a2e:	19 f0       	breq	.+6      	; 0x1a36 <print_bytes+0x26>
		 GetHexString((uint8_t)checksum, tmp);
		 transmit_byte(tmp[0]);
		 transmit_byte(tmp[1]);
	 }
	 else{
		 for(i = 0; i < len; i++)
    1a30:	61 11       	cpse	r22, r1
    1a32:	2b c0       	rjmp	.+86     	; 0x1a8a <print_bytes+0x7a>
    1a34:	3a c0       	rjmp	.+116    	; 0x1aaa <print_bytes+0x9a>
	 int checksum = 0;
	 char tmp[2];
	 
	 if (check_sum_enable == 1)
	 {
		 for(i = 0; i < len; i++)
    1a36:	66 23       	and	r22, r22
    1a38:	c9 f0       	breq	.+50     	; 0x1a6c <print_bytes+0x5c>
    1a3a:	8c 01       	movw	r16, r24
    1a3c:	61 50       	subi	r22, 0x01	; 1
    1a3e:	26 2f       	mov	r18, r22
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	2f 5f       	subi	r18, 0xFF	; 255
    1a44:	3f 4f       	sbci	r19, 0xFF	; 255
    1a46:	7c 01       	movw	r14, r24
    1a48:	e2 0e       	add	r14, r18
    1a4a:	f3 1e       	adc	r15, r19
    1a4c:	c1 2c       	mov	r12, r1
    1a4e:	d1 2c       	mov	r13, r1
    1a50:	58 01       	movw	r10, r16
		 {
			 transmit_byte(myBytes[i]);
    1a52:	f8 01       	movw	r30, r16
    1a54:	81 91       	ld	r24, Z+
    1a56:	8f 01       	movw	r16, r30
    1a58:	0e 94 c5 0c 	call	0x198a	; 0x198a <transmit_byte>
			 checksum += myBytes[i];
    1a5c:	f5 01       	movw	r30, r10
    1a5e:	80 81       	ld	r24, Z
    1a60:	c8 0e       	add	r12, r24
    1a62:	d1 1c       	adc	r13, r1
	 int checksum = 0;
	 char tmp[2];
	 
	 if (check_sum_enable == 1)
	 {
		 for(i = 0; i < len; i++)
    1a64:	e0 16       	cp	r14, r16
    1a66:	f1 06       	cpc	r15, r17
    1a68:	99 f7       	brne	.-26     	; 0x1a50 <print_bytes+0x40>
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <print_bytes+0x60>
    1a6c:	c1 2c       	mov	r12, r1
    1a6e:	d1 2c       	mov	r13, r1
		 {
			 transmit_byte(myBytes[i]);
			 checksum += myBytes[i];
		 }
		 checksum = checksum & 0xff;
		 GetHexString((uint8_t)checksum, tmp);
    1a70:	be 01       	movw	r22, r28
    1a72:	6f 5f       	subi	r22, 0xFF	; 255
    1a74:	7f 4f       	sbci	r23, 0xFF	; 255
    1a76:	8c 2d       	mov	r24, r12
    1a78:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <GetHexString>
		 transmit_byte(tmp[0]);
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	0e 94 c5 0c 	call	0x198a	; 0x198a <transmit_byte>
		 transmit_byte(tmp[1]);
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	0e 94 c5 0c 	call	0x198a	; 0x198a <transmit_byte>
    1a88:	10 c0       	rjmp	.+32     	; 0x1aaa <print_bytes+0x9a>
    1a8a:	8c 01       	movw	r16, r24
    1a8c:	61 50       	subi	r22, 0x01	; 1
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	6f 5f       	subi	r22, 0xFF	; 255
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	7c 01       	movw	r14, r24
    1a96:	e6 0e       	add	r14, r22
    1a98:	f7 1e       	adc	r15, r23
	 }
	 else{
		 for(i = 0; i < len; i++)
		 {
			 transmit_byte(myBytes[i]);
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	81 91       	ld	r24, Z+
    1a9e:	8f 01       	movw	r16, r30
    1aa0:	0e 94 c5 0c 	call	0x198a	; 0x198a <transmit_byte>
		 GetHexString((uint8_t)checksum, tmp);
		 transmit_byte(tmp[0]);
		 transmit_byte(tmp[1]);
	 }
	 else{
		 for(i = 0; i < len; i++)
    1aa4:	0e 15       	cp	r16, r14
    1aa6:	1f 05       	cpc	r17, r15
    1aa8:	c1 f7       	brne	.-16     	; 0x1a9a <print_bytes+0x8a>
		 {
			 transmit_byte(myBytes[i]);
		 }
	 }

	 transmit_byte(0x0d);
    1aaa:	8d e0       	ldi	r24, 0x0D	; 13
    1aac:	0e 94 c5 0c 	call	0x198a	; 0x198a <transmit_byte>
	 
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	df 90       	pop	r13
    1ac2:	cf 90       	pop	r12
    1ac4:	bf 90       	pop	r11
    1ac6:	af 90       	pop	r10
    1ac8:	08 95       	ret

00001aca <__subsf3>:
    1aca:	50 58       	subi	r21, 0x80	; 128

00001acc <__addsf3>:
    1acc:	bb 27       	eor	r27, r27
    1ace:	aa 27       	eor	r26, r26
    1ad0:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__addsf3x>
    1ad4:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__fp_round>
    1ad8:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__fp_pscA>
    1adc:	38 f0       	brcs	.+14     	; 0x1aec <__addsf3+0x20>
    1ade:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_pscB>
    1ae2:	20 f0       	brcs	.+8      	; 0x1aec <__addsf3+0x20>
    1ae4:	39 f4       	brne	.+14     	; 0x1af4 <__addsf3+0x28>
    1ae6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae8:	19 f4       	brne	.+6      	; 0x1af0 <__addsf3+0x24>
    1aea:	26 f4       	brtc	.+8      	; 0x1af4 <__addsf3+0x28>
    1aec:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__fp_nan>
    1af0:	0e f4       	brtc	.+2      	; 0x1af4 <__addsf3+0x28>
    1af2:	e0 95       	com	r30
    1af4:	e7 fb       	bst	r30, 7
    1af6:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__fp_inf>

00001afa <__addsf3x>:
    1afa:	e9 2f       	mov	r30, r25
    1afc:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__fp_split3>
    1b00:	58 f3       	brcs	.-42     	; 0x1ad8 <__addsf3+0xc>
    1b02:	ba 17       	cp	r27, r26
    1b04:	62 07       	cpc	r22, r18
    1b06:	73 07       	cpc	r23, r19
    1b08:	84 07       	cpc	r24, r20
    1b0a:	95 07       	cpc	r25, r21
    1b0c:	20 f0       	brcs	.+8      	; 0x1b16 <__addsf3x+0x1c>
    1b0e:	79 f4       	brne	.+30     	; 0x1b2e <__addsf3x+0x34>
    1b10:	a6 f5       	brtc	.+104    	; 0x1b7a <__addsf3x+0x80>
    1b12:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__fp_zero>
    1b16:	0e f4       	brtc	.+2      	; 0x1b1a <__addsf3x+0x20>
    1b18:	e0 95       	com	r30
    1b1a:	0b 2e       	mov	r0, r27
    1b1c:	ba 2f       	mov	r27, r26
    1b1e:	a0 2d       	mov	r26, r0
    1b20:	0b 01       	movw	r0, r22
    1b22:	b9 01       	movw	r22, r18
    1b24:	90 01       	movw	r18, r0
    1b26:	0c 01       	movw	r0, r24
    1b28:	ca 01       	movw	r24, r20
    1b2a:	a0 01       	movw	r20, r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	ff 27       	eor	r31, r31
    1b30:	59 1b       	sub	r21, r25
    1b32:	99 f0       	breq	.+38     	; 0x1b5a <__addsf3x+0x60>
    1b34:	59 3f       	cpi	r21, 0xF9	; 249
    1b36:	50 f4       	brcc	.+20     	; 0x1b4c <__addsf3x+0x52>
    1b38:	50 3e       	cpi	r21, 0xE0	; 224
    1b3a:	68 f1       	brcs	.+90     	; 0x1b96 <__addsf3x+0x9c>
    1b3c:	1a 16       	cp	r1, r26
    1b3e:	f0 40       	sbci	r31, 0x00	; 0
    1b40:	a2 2f       	mov	r26, r18
    1b42:	23 2f       	mov	r18, r19
    1b44:	34 2f       	mov	r19, r20
    1b46:	44 27       	eor	r20, r20
    1b48:	58 5f       	subi	r21, 0xF8	; 248
    1b4a:	f3 cf       	rjmp	.-26     	; 0x1b32 <__addsf3x+0x38>
    1b4c:	46 95       	lsr	r20
    1b4e:	37 95       	ror	r19
    1b50:	27 95       	ror	r18
    1b52:	a7 95       	ror	r26
    1b54:	f0 40       	sbci	r31, 0x00	; 0
    1b56:	53 95       	inc	r21
    1b58:	c9 f7       	brne	.-14     	; 0x1b4c <__addsf3x+0x52>
    1b5a:	7e f4       	brtc	.+30     	; 0x1b7a <__addsf3x+0x80>
    1b5c:	1f 16       	cp	r1, r31
    1b5e:	ba 0b       	sbc	r27, r26
    1b60:	62 0b       	sbc	r22, r18
    1b62:	73 0b       	sbc	r23, r19
    1b64:	84 0b       	sbc	r24, r20
    1b66:	ba f0       	brmi	.+46     	; 0x1b96 <__addsf3x+0x9c>
    1b68:	91 50       	subi	r25, 0x01	; 1
    1b6a:	a1 f0       	breq	.+40     	; 0x1b94 <__addsf3x+0x9a>
    1b6c:	ff 0f       	add	r31, r31
    1b6e:	bb 1f       	adc	r27, r27
    1b70:	66 1f       	adc	r22, r22
    1b72:	77 1f       	adc	r23, r23
    1b74:	88 1f       	adc	r24, r24
    1b76:	c2 f7       	brpl	.-16     	; 0x1b68 <__addsf3x+0x6e>
    1b78:	0e c0       	rjmp	.+28     	; 0x1b96 <__addsf3x+0x9c>
    1b7a:	ba 0f       	add	r27, r26
    1b7c:	62 1f       	adc	r22, r18
    1b7e:	73 1f       	adc	r23, r19
    1b80:	84 1f       	adc	r24, r20
    1b82:	48 f4       	brcc	.+18     	; 0x1b96 <__addsf3x+0x9c>
    1b84:	87 95       	ror	r24
    1b86:	77 95       	ror	r23
    1b88:	67 95       	ror	r22
    1b8a:	b7 95       	ror	r27
    1b8c:	f7 95       	ror	r31
    1b8e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b90:	08 f0       	brcs	.+2      	; 0x1b94 <__addsf3x+0x9a>
    1b92:	b0 cf       	rjmp	.-160    	; 0x1af4 <__addsf3+0x28>
    1b94:	93 95       	inc	r25
    1b96:	88 0f       	add	r24, r24
    1b98:	08 f0       	brcs	.+2      	; 0x1b9c <__addsf3x+0xa2>
    1b9a:	99 27       	eor	r25, r25
    1b9c:	ee 0f       	add	r30, r30
    1b9e:	97 95       	ror	r25
    1ba0:	87 95       	ror	r24
    1ba2:	08 95       	ret

00001ba4 <__cmpsf2>:
    1ba4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__fp_cmp>
    1ba8:	08 f4       	brcc	.+2      	; 0x1bac <__cmpsf2+0x8>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	08 95       	ret

00001bae <__divsf3>:
    1bae:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__divsf3x>
    1bb2:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__fp_round>
    1bb6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_pscB>
    1bba:	58 f0       	brcs	.+22     	; 0x1bd2 <__divsf3+0x24>
    1bbc:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__fp_pscA>
    1bc0:	40 f0       	brcs	.+16     	; 0x1bd2 <__divsf3+0x24>
    1bc2:	29 f4       	brne	.+10     	; 0x1bce <__divsf3+0x20>
    1bc4:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc6:	29 f0       	breq	.+10     	; 0x1bd2 <__divsf3+0x24>
    1bc8:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__fp_inf>
    1bcc:	51 11       	cpse	r21, r1
    1bce:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__fp_szero>
    1bd2:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__fp_nan>

00001bd6 <__divsf3x>:
    1bd6:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__fp_split3>
    1bda:	68 f3       	brcs	.-38     	; 0x1bb6 <__divsf3+0x8>

00001bdc <__divsf3_pse>:
    1bdc:	99 23       	and	r25, r25
    1bde:	b1 f3       	breq	.-20     	; 0x1bcc <__divsf3+0x1e>
    1be0:	55 23       	and	r21, r21
    1be2:	91 f3       	breq	.-28     	; 0x1bc8 <__divsf3+0x1a>
    1be4:	95 1b       	sub	r25, r21
    1be6:	55 0b       	sbc	r21, r21
    1be8:	bb 27       	eor	r27, r27
    1bea:	aa 27       	eor	r26, r26
    1bec:	62 17       	cp	r22, r18
    1bee:	73 07       	cpc	r23, r19
    1bf0:	84 07       	cpc	r24, r20
    1bf2:	38 f0       	brcs	.+14     	; 0x1c02 <__divsf3_pse+0x26>
    1bf4:	9f 5f       	subi	r25, 0xFF	; 255
    1bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf8:	22 0f       	add	r18, r18
    1bfa:	33 1f       	adc	r19, r19
    1bfc:	44 1f       	adc	r20, r20
    1bfe:	aa 1f       	adc	r26, r26
    1c00:	a9 f3       	breq	.-22     	; 0x1bec <__divsf3_pse+0x10>
    1c02:	35 d0       	rcall	.+106    	; 0x1c6e <__divsf3_pse+0x92>
    1c04:	0e 2e       	mov	r0, r30
    1c06:	3a f0       	brmi	.+14     	; 0x1c16 <__divsf3_pse+0x3a>
    1c08:	e0 e8       	ldi	r30, 0x80	; 128
    1c0a:	32 d0       	rcall	.+100    	; 0x1c70 <__divsf3_pse+0x94>
    1c0c:	91 50       	subi	r25, 0x01	; 1
    1c0e:	50 40       	sbci	r21, 0x00	; 0
    1c10:	e6 95       	lsr	r30
    1c12:	00 1c       	adc	r0, r0
    1c14:	ca f7       	brpl	.-14     	; 0x1c08 <__divsf3_pse+0x2c>
    1c16:	2b d0       	rcall	.+86     	; 0x1c6e <__divsf3_pse+0x92>
    1c18:	fe 2f       	mov	r31, r30
    1c1a:	29 d0       	rcall	.+82     	; 0x1c6e <__divsf3_pse+0x92>
    1c1c:	66 0f       	add	r22, r22
    1c1e:	77 1f       	adc	r23, r23
    1c20:	88 1f       	adc	r24, r24
    1c22:	bb 1f       	adc	r27, r27
    1c24:	26 17       	cp	r18, r22
    1c26:	37 07       	cpc	r19, r23
    1c28:	48 07       	cpc	r20, r24
    1c2a:	ab 07       	cpc	r26, r27
    1c2c:	b0 e8       	ldi	r27, 0x80	; 128
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <__divsf3_pse+0x56>
    1c30:	bb 0b       	sbc	r27, r27
    1c32:	80 2d       	mov	r24, r0
    1c34:	bf 01       	movw	r22, r30
    1c36:	ff 27       	eor	r31, r31
    1c38:	93 58       	subi	r25, 0x83	; 131
    1c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3c:	3a f0       	brmi	.+14     	; 0x1c4c <__divsf3_pse+0x70>
    1c3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c40:	51 05       	cpc	r21, r1
    1c42:	78 f0       	brcs	.+30     	; 0x1c62 <__divsf3_pse+0x86>
    1c44:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__fp_inf>
    1c48:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__fp_szero>
    1c4c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4e:	e4 f3       	brlt	.-8      	; 0x1c48 <__divsf3_pse+0x6c>
    1c50:	98 3e       	cpi	r25, 0xE8	; 232
    1c52:	d4 f3       	brlt	.-12     	; 0x1c48 <__divsf3_pse+0x6c>
    1c54:	86 95       	lsr	r24
    1c56:	77 95       	ror	r23
    1c58:	67 95       	ror	r22
    1c5a:	b7 95       	ror	r27
    1c5c:	f7 95       	ror	r31
    1c5e:	9f 5f       	subi	r25, 0xFF	; 255
    1c60:	c9 f7       	brne	.-14     	; 0x1c54 <__divsf3_pse+0x78>
    1c62:	88 0f       	add	r24, r24
    1c64:	91 1d       	adc	r25, r1
    1c66:	96 95       	lsr	r25
    1c68:	87 95       	ror	r24
    1c6a:	97 f9       	bld	r25, 7
    1c6c:	08 95       	ret
    1c6e:	e1 e0       	ldi	r30, 0x01	; 1
    1c70:	66 0f       	add	r22, r22
    1c72:	77 1f       	adc	r23, r23
    1c74:	88 1f       	adc	r24, r24
    1c76:	bb 1f       	adc	r27, r27
    1c78:	62 17       	cp	r22, r18
    1c7a:	73 07       	cpc	r23, r19
    1c7c:	84 07       	cpc	r24, r20
    1c7e:	ba 07       	cpc	r27, r26
    1c80:	20 f0       	brcs	.+8      	; 0x1c8a <__divsf3_pse+0xae>
    1c82:	62 1b       	sub	r22, r18
    1c84:	73 0b       	sbc	r23, r19
    1c86:	84 0b       	sbc	r24, r20
    1c88:	ba 0b       	sbc	r27, r26
    1c8a:	ee 1f       	adc	r30, r30
    1c8c:	88 f7       	brcc	.-30     	; 0x1c70 <__divsf3_pse+0x94>
    1c8e:	e0 95       	com	r30
    1c90:	08 95       	ret

00001c92 <__floatunsisf>:
    1c92:	e8 94       	clt
    1c94:	09 c0       	rjmp	.+18     	; 0x1ca8 <__floatsisf+0x12>

00001c96 <__floatsisf>:
    1c96:	97 fb       	bst	r25, 7
    1c98:	3e f4       	brtc	.+14     	; 0x1ca8 <__floatsisf+0x12>
    1c9a:	90 95       	com	r25
    1c9c:	80 95       	com	r24
    1c9e:	70 95       	com	r23
    1ca0:	61 95       	neg	r22
    1ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca8:	99 23       	and	r25, r25
    1caa:	a9 f0       	breq	.+42     	; 0x1cd6 <__floatsisf+0x40>
    1cac:	f9 2f       	mov	r31, r25
    1cae:	96 e9       	ldi	r25, 0x96	; 150
    1cb0:	bb 27       	eor	r27, r27
    1cb2:	93 95       	inc	r25
    1cb4:	f6 95       	lsr	r31
    1cb6:	87 95       	ror	r24
    1cb8:	77 95       	ror	r23
    1cba:	67 95       	ror	r22
    1cbc:	b7 95       	ror	r27
    1cbe:	f1 11       	cpse	r31, r1
    1cc0:	f8 cf       	rjmp	.-16     	; 0x1cb2 <__floatsisf+0x1c>
    1cc2:	fa f4       	brpl	.+62     	; 0x1d02 <__floatsisf+0x6c>
    1cc4:	bb 0f       	add	r27, r27
    1cc6:	11 f4       	brne	.+4      	; 0x1ccc <__floatsisf+0x36>
    1cc8:	60 ff       	sbrs	r22, 0
    1cca:	1b c0       	rjmp	.+54     	; 0x1d02 <__floatsisf+0x6c>
    1ccc:	6f 5f       	subi	r22, 0xFF	; 255
    1cce:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd4:	16 c0       	rjmp	.+44     	; 0x1d02 <__floatsisf+0x6c>
    1cd6:	88 23       	and	r24, r24
    1cd8:	11 f0       	breq	.+4      	; 0x1cde <__floatsisf+0x48>
    1cda:	96 e9       	ldi	r25, 0x96	; 150
    1cdc:	11 c0       	rjmp	.+34     	; 0x1d00 <__floatsisf+0x6a>
    1cde:	77 23       	and	r23, r23
    1ce0:	21 f0       	breq	.+8      	; 0x1cea <__floatsisf+0x54>
    1ce2:	9e e8       	ldi	r25, 0x8E	; 142
    1ce4:	87 2f       	mov	r24, r23
    1ce6:	76 2f       	mov	r23, r22
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <__floatsisf+0x5e>
    1cea:	66 23       	and	r22, r22
    1cec:	71 f0       	breq	.+28     	; 0x1d0a <__floatsisf+0x74>
    1cee:	96 e8       	ldi	r25, 0x86	; 134
    1cf0:	86 2f       	mov	r24, r22
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	2a f0       	brmi	.+10     	; 0x1d02 <__floatsisf+0x6c>
    1cf8:	9a 95       	dec	r25
    1cfa:	66 0f       	add	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	88 1f       	adc	r24, r24
    1d00:	da f7       	brpl	.-10     	; 0x1cf8 <__floatsisf+0x62>
    1d02:	88 0f       	add	r24, r24
    1d04:	96 95       	lsr	r25
    1d06:	87 95       	ror	r24
    1d08:	97 f9       	bld	r25, 7
    1d0a:	08 95       	ret

00001d0c <__fp_cmp>:
    1d0c:	99 0f       	add	r25, r25
    1d0e:	00 08       	sbc	r0, r0
    1d10:	55 0f       	add	r21, r21
    1d12:	aa 0b       	sbc	r26, r26
    1d14:	e0 e8       	ldi	r30, 0x80	; 128
    1d16:	fe ef       	ldi	r31, 0xFE	; 254
    1d18:	16 16       	cp	r1, r22
    1d1a:	17 06       	cpc	r1, r23
    1d1c:	e8 07       	cpc	r30, r24
    1d1e:	f9 07       	cpc	r31, r25
    1d20:	c0 f0       	brcs	.+48     	; 0x1d52 <__fp_cmp+0x46>
    1d22:	12 16       	cp	r1, r18
    1d24:	13 06       	cpc	r1, r19
    1d26:	e4 07       	cpc	r30, r20
    1d28:	f5 07       	cpc	r31, r21
    1d2a:	98 f0       	brcs	.+38     	; 0x1d52 <__fp_cmp+0x46>
    1d2c:	62 1b       	sub	r22, r18
    1d2e:	73 0b       	sbc	r23, r19
    1d30:	84 0b       	sbc	r24, r20
    1d32:	95 0b       	sbc	r25, r21
    1d34:	39 f4       	brne	.+14     	; 0x1d44 <__fp_cmp+0x38>
    1d36:	0a 26       	eor	r0, r26
    1d38:	61 f0       	breq	.+24     	; 0x1d52 <__fp_cmp+0x46>
    1d3a:	23 2b       	or	r18, r19
    1d3c:	24 2b       	or	r18, r20
    1d3e:	25 2b       	or	r18, r21
    1d40:	21 f4       	brne	.+8      	; 0x1d4a <__fp_cmp+0x3e>
    1d42:	08 95       	ret
    1d44:	0a 26       	eor	r0, r26
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <__fp_cmp+0x3e>
    1d48:	a1 40       	sbci	r26, 0x01	; 1
    1d4a:	a6 95       	lsr	r26
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	81 1d       	adc	r24, r1
    1d50:	81 1d       	adc	r24, r1
    1d52:	08 95       	ret

00001d54 <__fp_inf>:
    1d54:	97 f9       	bld	r25, 7
    1d56:	9f 67       	ori	r25, 0x7F	; 127
    1d58:	80 e8       	ldi	r24, 0x80	; 128
    1d5a:	70 e0       	ldi	r23, 0x00	; 0
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	08 95       	ret

00001d60 <__fp_nan>:
    1d60:	9f ef       	ldi	r25, 0xFF	; 255
    1d62:	80 ec       	ldi	r24, 0xC0	; 192
    1d64:	08 95       	ret

00001d66 <__fp_pscA>:
    1d66:	00 24       	eor	r0, r0
    1d68:	0a 94       	dec	r0
    1d6a:	16 16       	cp	r1, r22
    1d6c:	17 06       	cpc	r1, r23
    1d6e:	18 06       	cpc	r1, r24
    1d70:	09 06       	cpc	r0, r25
    1d72:	08 95       	ret

00001d74 <__fp_pscB>:
    1d74:	00 24       	eor	r0, r0
    1d76:	0a 94       	dec	r0
    1d78:	12 16       	cp	r1, r18
    1d7a:	13 06       	cpc	r1, r19
    1d7c:	14 06       	cpc	r1, r20
    1d7e:	05 06       	cpc	r0, r21
    1d80:	08 95       	ret

00001d82 <__fp_round>:
    1d82:	09 2e       	mov	r0, r25
    1d84:	03 94       	inc	r0
    1d86:	00 0c       	add	r0, r0
    1d88:	11 f4       	brne	.+4      	; 0x1d8e <__fp_round+0xc>
    1d8a:	88 23       	and	r24, r24
    1d8c:	52 f0       	brmi	.+20     	; 0x1da2 <__fp_round+0x20>
    1d8e:	bb 0f       	add	r27, r27
    1d90:	40 f4       	brcc	.+16     	; 0x1da2 <__fp_round+0x20>
    1d92:	bf 2b       	or	r27, r31
    1d94:	11 f4       	brne	.+4      	; 0x1d9a <__fp_round+0x18>
    1d96:	60 ff       	sbrs	r22, 0
    1d98:	04 c0       	rjmp	.+8      	; 0x1da2 <__fp_round+0x20>
    1d9a:	6f 5f       	subi	r22, 0xFF	; 255
    1d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1da0:	9f 4f       	sbci	r25, 0xFF	; 255
    1da2:	08 95       	ret

00001da4 <__fp_split3>:
    1da4:	57 fd       	sbrc	r21, 7
    1da6:	90 58       	subi	r25, 0x80	; 128
    1da8:	44 0f       	add	r20, r20
    1daa:	55 1f       	adc	r21, r21
    1dac:	59 f0       	breq	.+22     	; 0x1dc4 <__fp_splitA+0x10>
    1dae:	5f 3f       	cpi	r21, 0xFF	; 255
    1db0:	71 f0       	breq	.+28     	; 0x1dce <__fp_splitA+0x1a>
    1db2:	47 95       	ror	r20

00001db4 <__fp_splitA>:
    1db4:	88 0f       	add	r24, r24
    1db6:	97 fb       	bst	r25, 7
    1db8:	99 1f       	adc	r25, r25
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <__fp_splitA+0x20>
    1dbc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dbe:	79 f0       	breq	.+30     	; 0x1dde <__fp_splitA+0x2a>
    1dc0:	87 95       	ror	r24
    1dc2:	08 95       	ret
    1dc4:	12 16       	cp	r1, r18
    1dc6:	13 06       	cpc	r1, r19
    1dc8:	14 06       	cpc	r1, r20
    1dca:	55 1f       	adc	r21, r21
    1dcc:	f2 cf       	rjmp	.-28     	; 0x1db2 <__fp_split3+0xe>
    1dce:	46 95       	lsr	r20
    1dd0:	f1 df       	rcall	.-30     	; 0x1db4 <__fp_splitA>
    1dd2:	08 c0       	rjmp	.+16     	; 0x1de4 <__fp_splitA+0x30>
    1dd4:	16 16       	cp	r1, r22
    1dd6:	17 06       	cpc	r1, r23
    1dd8:	18 06       	cpc	r1, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	f1 cf       	rjmp	.-30     	; 0x1dc0 <__fp_splitA+0xc>
    1dde:	86 95       	lsr	r24
    1de0:	71 05       	cpc	r23, r1
    1de2:	61 05       	cpc	r22, r1
    1de4:	08 94       	sec
    1de6:	08 95       	ret

00001de8 <__fp_zero>:
    1de8:	e8 94       	clt

00001dea <__fp_szero>:
    1dea:	bb 27       	eor	r27, r27
    1dec:	66 27       	eor	r22, r22
    1dee:	77 27       	eor	r23, r23
    1df0:	cb 01       	movw	r24, r22
    1df2:	97 f9       	bld	r25, 7
    1df4:	08 95       	ret

00001df6 <__mulsf3>:
    1df6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__mulsf3x>
    1dfa:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__fp_round>
    1dfe:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__fp_pscA>
    1e02:	38 f0       	brcs	.+14     	; 0x1e12 <__mulsf3+0x1c>
    1e04:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_pscB>
    1e08:	20 f0       	brcs	.+8      	; 0x1e12 <__mulsf3+0x1c>
    1e0a:	95 23       	and	r25, r21
    1e0c:	11 f0       	breq	.+4      	; 0x1e12 <__mulsf3+0x1c>
    1e0e:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__fp_inf>
    1e12:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__fp_nan>
    1e16:	11 24       	eor	r1, r1
    1e18:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__fp_szero>

00001e1c <__mulsf3x>:
    1e1c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__fp_split3>
    1e20:	70 f3       	brcs	.-36     	; 0x1dfe <__mulsf3+0x8>

00001e22 <__mulsf3_pse>:
    1e22:	95 9f       	mul	r25, r21
    1e24:	c1 f3       	breq	.-16     	; 0x1e16 <__mulsf3+0x20>
    1e26:	95 0f       	add	r25, r21
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	55 1f       	adc	r21, r21
    1e2c:	62 9f       	mul	r22, r18
    1e2e:	f0 01       	movw	r30, r0
    1e30:	72 9f       	mul	r23, r18
    1e32:	bb 27       	eor	r27, r27
    1e34:	f0 0d       	add	r31, r0
    1e36:	b1 1d       	adc	r27, r1
    1e38:	63 9f       	mul	r22, r19
    1e3a:	aa 27       	eor	r26, r26
    1e3c:	f0 0d       	add	r31, r0
    1e3e:	b1 1d       	adc	r27, r1
    1e40:	aa 1f       	adc	r26, r26
    1e42:	64 9f       	mul	r22, r20
    1e44:	66 27       	eor	r22, r22
    1e46:	b0 0d       	add	r27, r0
    1e48:	a1 1d       	adc	r26, r1
    1e4a:	66 1f       	adc	r22, r22
    1e4c:	82 9f       	mul	r24, r18
    1e4e:	22 27       	eor	r18, r18
    1e50:	b0 0d       	add	r27, r0
    1e52:	a1 1d       	adc	r26, r1
    1e54:	62 1f       	adc	r22, r18
    1e56:	73 9f       	mul	r23, r19
    1e58:	b0 0d       	add	r27, r0
    1e5a:	a1 1d       	adc	r26, r1
    1e5c:	62 1f       	adc	r22, r18
    1e5e:	83 9f       	mul	r24, r19
    1e60:	a0 0d       	add	r26, r0
    1e62:	61 1d       	adc	r22, r1
    1e64:	22 1f       	adc	r18, r18
    1e66:	74 9f       	mul	r23, r20
    1e68:	33 27       	eor	r19, r19
    1e6a:	a0 0d       	add	r26, r0
    1e6c:	61 1d       	adc	r22, r1
    1e6e:	23 1f       	adc	r18, r19
    1e70:	84 9f       	mul	r24, r20
    1e72:	60 0d       	add	r22, r0
    1e74:	21 1d       	adc	r18, r1
    1e76:	82 2f       	mov	r24, r18
    1e78:	76 2f       	mov	r23, r22
    1e7a:	6a 2f       	mov	r22, r26
    1e7c:	11 24       	eor	r1, r1
    1e7e:	9f 57       	subi	r25, 0x7F	; 127
    1e80:	50 40       	sbci	r21, 0x00	; 0
    1e82:	9a f0       	brmi	.+38     	; 0x1eaa <__mulsf3_pse+0x88>
    1e84:	f1 f0       	breq	.+60     	; 0x1ec2 <__mulsf3_pse+0xa0>
    1e86:	88 23       	and	r24, r24
    1e88:	4a f0       	brmi	.+18     	; 0x1e9c <__mulsf3_pse+0x7a>
    1e8a:	ee 0f       	add	r30, r30
    1e8c:	ff 1f       	adc	r31, r31
    1e8e:	bb 1f       	adc	r27, r27
    1e90:	66 1f       	adc	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	88 1f       	adc	r24, r24
    1e96:	91 50       	subi	r25, 0x01	; 1
    1e98:	50 40       	sbci	r21, 0x00	; 0
    1e9a:	a9 f7       	brne	.-22     	; 0x1e86 <__mulsf3_pse+0x64>
    1e9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	80 f0       	brcs	.+32     	; 0x1ec2 <__mulsf3_pse+0xa0>
    1ea2:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__fp_inf>
    1ea6:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__fp_szero>
    1eaa:	5f 3f       	cpi	r21, 0xFF	; 255
    1eac:	e4 f3       	brlt	.-8      	; 0x1ea6 <__mulsf3_pse+0x84>
    1eae:	98 3e       	cpi	r25, 0xE8	; 232
    1eb0:	d4 f3       	brlt	.-12     	; 0x1ea6 <__mulsf3_pse+0x84>
    1eb2:	86 95       	lsr	r24
    1eb4:	77 95       	ror	r23
    1eb6:	67 95       	ror	r22
    1eb8:	b7 95       	ror	r27
    1eba:	f7 95       	ror	r31
    1ebc:	e7 95       	ror	r30
    1ebe:	9f 5f       	subi	r25, 0xFF	; 255
    1ec0:	c1 f7       	brne	.-16     	; 0x1eb2 <__mulsf3_pse+0x90>
    1ec2:	fe 2b       	or	r31, r30
    1ec4:	88 0f       	add	r24, r24
    1ec6:	91 1d       	adc	r25, r1
    1ec8:	96 95       	lsr	r25
    1eca:	87 95       	ror	r24
    1ecc:	97 f9       	bld	r25, 7
    1ece:	08 95       	ret

00001ed0 <vfprintf>:
    1ed0:	a0 e1       	ldi	r26, 0x10	; 16
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	ee e6       	ldi	r30, 0x6E	; 110
    1ed6:	ff e0       	ldi	r31, 0x0F	; 15
    1ed8:	0c 94 07 13 	jmp	0x260e	; 0x260e <__prologue_saves__>
    1edc:	7c 01       	movw	r14, r24
    1ede:	1b 01       	movw	r2, r22
    1ee0:	6a 01       	movw	r12, r20
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	16 82       	std	Z+6, r1	; 0x06
    1ee6:	17 82       	std	Z+7, r1	; 0x07
    1ee8:	83 81       	ldd	r24, Z+3	; 0x03
    1eea:	81 ff       	sbrs	r24, 1
    1eec:	44 c3       	rjmp	.+1672   	; 0x2576 <vfprintf+0x6a6>
    1eee:	9e 01       	movw	r18, r28
    1ef0:	2f 5f       	subi	r18, 0xFF	; 255
    1ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef4:	39 01       	movw	r6, r18
    1ef6:	f7 01       	movw	r30, r14
    1ef8:	93 81       	ldd	r25, Z+3	; 0x03
    1efa:	f1 01       	movw	r30, r2
    1efc:	93 fd       	sbrc	r25, 3
    1efe:	85 91       	lpm	r24, Z+
    1f00:	93 ff       	sbrs	r25, 3
    1f02:	81 91       	ld	r24, Z+
    1f04:	1f 01       	movw	r2, r30
    1f06:	88 23       	and	r24, r24
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <vfprintf+0x3c>
    1f0a:	31 c3       	rjmp	.+1634   	; 0x256e <vfprintf+0x69e>
    1f0c:	85 32       	cpi	r24, 0x25	; 37
    1f0e:	39 f4       	brne	.+14     	; 0x1f1e <vfprintf+0x4e>
    1f10:	93 fd       	sbrc	r25, 3
    1f12:	85 91       	lpm	r24, Z+
    1f14:	93 ff       	sbrs	r25, 3
    1f16:	81 91       	ld	r24, Z+
    1f18:	1f 01       	movw	r2, r30
    1f1a:	85 32       	cpi	r24, 0x25	; 37
    1f1c:	39 f4       	brne	.+14     	; 0x1f2c <vfprintf+0x5c>
    1f1e:	b7 01       	movw	r22, r14
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    1f26:	56 01       	movw	r10, r12
    1f28:	65 01       	movw	r12, r10
    1f2a:	e5 cf       	rjmp	.-54     	; 0x1ef6 <vfprintf+0x26>
    1f2c:	10 e0       	ldi	r17, 0x00	; 0
    1f2e:	51 2c       	mov	r5, r1
    1f30:	91 2c       	mov	r9, r1
    1f32:	ff e1       	ldi	r31, 0x1F	; 31
    1f34:	f9 15       	cp	r31, r9
    1f36:	d8 f0       	brcs	.+54     	; 0x1f6e <vfprintf+0x9e>
    1f38:	8b 32       	cpi	r24, 0x2B	; 43
    1f3a:	79 f0       	breq	.+30     	; 0x1f5a <vfprintf+0x8a>
    1f3c:	38 f4       	brcc	.+14     	; 0x1f4c <vfprintf+0x7c>
    1f3e:	80 32       	cpi	r24, 0x20	; 32
    1f40:	79 f0       	breq	.+30     	; 0x1f60 <vfprintf+0x90>
    1f42:	83 32       	cpi	r24, 0x23	; 35
    1f44:	a1 f4       	brne	.+40     	; 0x1f6e <vfprintf+0x9e>
    1f46:	f9 2d       	mov	r31, r9
    1f48:	f0 61       	ori	r31, 0x10	; 16
    1f4a:	2e c0       	rjmp	.+92     	; 0x1fa8 <vfprintf+0xd8>
    1f4c:	8d 32       	cpi	r24, 0x2D	; 45
    1f4e:	61 f0       	breq	.+24     	; 0x1f68 <vfprintf+0x98>
    1f50:	80 33       	cpi	r24, 0x30	; 48
    1f52:	69 f4       	brne	.+26     	; 0x1f6e <vfprintf+0x9e>
    1f54:	29 2d       	mov	r18, r9
    1f56:	21 60       	ori	r18, 0x01	; 1
    1f58:	2d c0       	rjmp	.+90     	; 0x1fb4 <vfprintf+0xe4>
    1f5a:	39 2d       	mov	r19, r9
    1f5c:	32 60       	ori	r19, 0x02	; 2
    1f5e:	93 2e       	mov	r9, r19
    1f60:	89 2d       	mov	r24, r9
    1f62:	84 60       	ori	r24, 0x04	; 4
    1f64:	98 2e       	mov	r9, r24
    1f66:	2a c0       	rjmp	.+84     	; 0x1fbc <vfprintf+0xec>
    1f68:	e9 2d       	mov	r30, r9
    1f6a:	e8 60       	ori	r30, 0x08	; 8
    1f6c:	15 c0       	rjmp	.+42     	; 0x1f98 <vfprintf+0xc8>
    1f6e:	97 fc       	sbrc	r9, 7
    1f70:	2d c0       	rjmp	.+90     	; 0x1fcc <vfprintf+0xfc>
    1f72:	20 ed       	ldi	r18, 0xD0	; 208
    1f74:	28 0f       	add	r18, r24
    1f76:	2a 30       	cpi	r18, 0x0A	; 10
    1f78:	88 f4       	brcc	.+34     	; 0x1f9c <vfprintf+0xcc>
    1f7a:	96 fe       	sbrs	r9, 6
    1f7c:	06 c0       	rjmp	.+12     	; 0x1f8a <vfprintf+0xba>
    1f7e:	3a e0       	ldi	r19, 0x0A	; 10
    1f80:	13 9f       	mul	r17, r19
    1f82:	20 0d       	add	r18, r0
    1f84:	11 24       	eor	r1, r1
    1f86:	12 2f       	mov	r17, r18
    1f88:	19 c0       	rjmp	.+50     	; 0x1fbc <vfprintf+0xec>
    1f8a:	8a e0       	ldi	r24, 0x0A	; 10
    1f8c:	58 9e       	mul	r5, r24
    1f8e:	20 0d       	add	r18, r0
    1f90:	11 24       	eor	r1, r1
    1f92:	52 2e       	mov	r5, r18
    1f94:	e9 2d       	mov	r30, r9
    1f96:	e0 62       	ori	r30, 0x20	; 32
    1f98:	9e 2e       	mov	r9, r30
    1f9a:	10 c0       	rjmp	.+32     	; 0x1fbc <vfprintf+0xec>
    1f9c:	8e 32       	cpi	r24, 0x2E	; 46
    1f9e:	31 f4       	brne	.+12     	; 0x1fac <vfprintf+0xdc>
    1fa0:	96 fc       	sbrc	r9, 6
    1fa2:	e5 c2       	rjmp	.+1482   	; 0x256e <vfprintf+0x69e>
    1fa4:	f9 2d       	mov	r31, r9
    1fa6:	f0 64       	ori	r31, 0x40	; 64
    1fa8:	9f 2e       	mov	r9, r31
    1faa:	08 c0       	rjmp	.+16     	; 0x1fbc <vfprintf+0xec>
    1fac:	8c 36       	cpi	r24, 0x6C	; 108
    1fae:	21 f4       	brne	.+8      	; 0x1fb8 <vfprintf+0xe8>
    1fb0:	29 2d       	mov	r18, r9
    1fb2:	20 68       	ori	r18, 0x80	; 128
    1fb4:	92 2e       	mov	r9, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <vfprintf+0xec>
    1fb8:	88 36       	cpi	r24, 0x68	; 104
    1fba:	41 f4       	brne	.+16     	; 0x1fcc <vfprintf+0xfc>
    1fbc:	f1 01       	movw	r30, r2
    1fbe:	93 fd       	sbrc	r25, 3
    1fc0:	85 91       	lpm	r24, Z+
    1fc2:	93 ff       	sbrs	r25, 3
    1fc4:	81 91       	ld	r24, Z+
    1fc6:	1f 01       	movw	r2, r30
    1fc8:	81 11       	cpse	r24, r1
    1fca:	b3 cf       	rjmp	.-154    	; 0x1f32 <vfprintf+0x62>
    1fcc:	9b eb       	ldi	r25, 0xBB	; 187
    1fce:	98 0f       	add	r25, r24
    1fd0:	93 30       	cpi	r25, 0x03	; 3
    1fd2:	20 f4       	brcc	.+8      	; 0x1fdc <vfprintf+0x10c>
    1fd4:	99 2d       	mov	r25, r9
    1fd6:	90 61       	ori	r25, 0x10	; 16
    1fd8:	80 5e       	subi	r24, 0xE0	; 224
    1fda:	07 c0       	rjmp	.+14     	; 0x1fea <vfprintf+0x11a>
    1fdc:	9b e9       	ldi	r25, 0x9B	; 155
    1fde:	98 0f       	add	r25, r24
    1fe0:	93 30       	cpi	r25, 0x03	; 3
    1fe2:	08 f0       	brcs	.+2      	; 0x1fe6 <vfprintf+0x116>
    1fe4:	66 c1       	rjmp	.+716    	; 0x22b2 <vfprintf+0x3e2>
    1fe6:	99 2d       	mov	r25, r9
    1fe8:	9f 7e       	andi	r25, 0xEF	; 239
    1fea:	96 ff       	sbrs	r25, 6
    1fec:	16 e0       	ldi	r17, 0x06	; 6
    1fee:	9f 73       	andi	r25, 0x3F	; 63
    1ff0:	99 2e       	mov	r9, r25
    1ff2:	85 36       	cpi	r24, 0x65	; 101
    1ff4:	19 f4       	brne	.+6      	; 0x1ffc <vfprintf+0x12c>
    1ff6:	90 64       	ori	r25, 0x40	; 64
    1ff8:	99 2e       	mov	r9, r25
    1ffa:	08 c0       	rjmp	.+16     	; 0x200c <vfprintf+0x13c>
    1ffc:	86 36       	cpi	r24, 0x66	; 102
    1ffe:	21 f4       	brne	.+8      	; 0x2008 <vfprintf+0x138>
    2000:	39 2f       	mov	r19, r25
    2002:	30 68       	ori	r19, 0x80	; 128
    2004:	93 2e       	mov	r9, r19
    2006:	02 c0       	rjmp	.+4      	; 0x200c <vfprintf+0x13c>
    2008:	11 11       	cpse	r17, r1
    200a:	11 50       	subi	r17, 0x01	; 1
    200c:	97 fe       	sbrs	r9, 7
    200e:	07 c0       	rjmp	.+14     	; 0x201e <vfprintf+0x14e>
    2010:	1c 33       	cpi	r17, 0x3C	; 60
    2012:	50 f4       	brcc	.+20     	; 0x2028 <vfprintf+0x158>
    2014:	44 24       	eor	r4, r4
    2016:	43 94       	inc	r4
    2018:	41 0e       	add	r4, r17
    201a:	27 e0       	ldi	r18, 0x07	; 7
    201c:	0b c0       	rjmp	.+22     	; 0x2034 <vfprintf+0x164>
    201e:	18 30       	cpi	r17, 0x08	; 8
    2020:	38 f0       	brcs	.+14     	; 0x2030 <vfprintf+0x160>
    2022:	27 e0       	ldi	r18, 0x07	; 7
    2024:	17 e0       	ldi	r17, 0x07	; 7
    2026:	05 c0       	rjmp	.+10     	; 0x2032 <vfprintf+0x162>
    2028:	27 e0       	ldi	r18, 0x07	; 7
    202a:	9c e3       	ldi	r25, 0x3C	; 60
    202c:	49 2e       	mov	r4, r25
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <vfprintf+0x164>
    2030:	21 2f       	mov	r18, r17
    2032:	41 2c       	mov	r4, r1
    2034:	56 01       	movw	r10, r12
    2036:	84 e0       	ldi	r24, 0x04	; 4
    2038:	a8 0e       	add	r10, r24
    203a:	b1 1c       	adc	r11, r1
    203c:	f6 01       	movw	r30, r12
    203e:	60 81       	ld	r22, Z
    2040:	71 81       	ldd	r23, Z+1	; 0x01
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	04 2d       	mov	r16, r4
    2048:	a3 01       	movw	r20, r6
    204a:	0e 94 3c 13 	call	0x2678	; 0x2678 <__ftoa_engine>
    204e:	6c 01       	movw	r12, r24
    2050:	f9 81       	ldd	r31, Y+1	; 0x01
    2052:	fc 87       	std	Y+12, r31	; 0x0c
    2054:	f0 ff       	sbrs	r31, 0
    2056:	02 c0       	rjmp	.+4      	; 0x205c <vfprintf+0x18c>
    2058:	f3 ff       	sbrs	r31, 3
    205a:	06 c0       	rjmp	.+12     	; 0x2068 <vfprintf+0x198>
    205c:	91 fc       	sbrc	r9, 1
    205e:	06 c0       	rjmp	.+12     	; 0x206c <vfprintf+0x19c>
    2060:	92 fe       	sbrs	r9, 2
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <vfprintf+0x1a0>
    2064:	00 e2       	ldi	r16, 0x20	; 32
    2066:	05 c0       	rjmp	.+10     	; 0x2072 <vfprintf+0x1a2>
    2068:	0d e2       	ldi	r16, 0x2D	; 45
    206a:	03 c0       	rjmp	.+6      	; 0x2072 <vfprintf+0x1a2>
    206c:	0b e2       	ldi	r16, 0x2B	; 43
    206e:	01 c0       	rjmp	.+2      	; 0x2072 <vfprintf+0x1a2>
    2070:	00 e0       	ldi	r16, 0x00	; 0
    2072:	8c 85       	ldd	r24, Y+12	; 0x0c
    2074:	8c 70       	andi	r24, 0x0C	; 12
    2076:	19 f0       	breq	.+6      	; 0x207e <vfprintf+0x1ae>
    2078:	01 11       	cpse	r16, r1
    207a:	5a c2       	rjmp	.+1204   	; 0x2530 <vfprintf+0x660>
    207c:	9b c2       	rjmp	.+1334   	; 0x25b4 <vfprintf+0x6e4>
    207e:	97 fe       	sbrs	r9, 7
    2080:	10 c0       	rjmp	.+32     	; 0x20a2 <vfprintf+0x1d2>
    2082:	4c 0c       	add	r4, r12
    2084:	fc 85       	ldd	r31, Y+12	; 0x0c
    2086:	f4 ff       	sbrs	r31, 4
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <vfprintf+0x1c2>
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	81 33       	cpi	r24, 0x31	; 49
    208e:	09 f4       	brne	.+2      	; 0x2092 <vfprintf+0x1c2>
    2090:	4a 94       	dec	r4
    2092:	14 14       	cp	r1, r4
    2094:	74 f5       	brge	.+92     	; 0x20f2 <vfprintf+0x222>
    2096:	28 e0       	ldi	r18, 0x08	; 8
    2098:	24 15       	cp	r18, r4
    209a:	78 f5       	brcc	.+94     	; 0x20fa <vfprintf+0x22a>
    209c:	88 e0       	ldi	r24, 0x08	; 8
    209e:	48 2e       	mov	r4, r24
    20a0:	2c c0       	rjmp	.+88     	; 0x20fa <vfprintf+0x22a>
    20a2:	96 fc       	sbrc	r9, 6
    20a4:	2a c0       	rjmp	.+84     	; 0x20fa <vfprintf+0x22a>
    20a6:	81 2f       	mov	r24, r17
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	8c 15       	cp	r24, r12
    20ac:	9d 05       	cpc	r25, r13
    20ae:	9c f0       	brlt	.+38     	; 0x20d6 <vfprintf+0x206>
    20b0:	3c ef       	ldi	r19, 0xFC	; 252
    20b2:	c3 16       	cp	r12, r19
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	d3 06       	cpc	r13, r19
    20b8:	74 f0       	brlt	.+28     	; 0x20d6 <vfprintf+0x206>
    20ba:	89 2d       	mov	r24, r9
    20bc:	80 68       	ori	r24, 0x80	; 128
    20be:	98 2e       	mov	r9, r24
    20c0:	0a c0       	rjmp	.+20     	; 0x20d6 <vfprintf+0x206>
    20c2:	e2 e0       	ldi	r30, 0x02	; 2
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	ec 0f       	add	r30, r28
    20c8:	fd 1f       	adc	r31, r29
    20ca:	e1 0f       	add	r30, r17
    20cc:	f1 1d       	adc	r31, r1
    20ce:	80 81       	ld	r24, Z
    20d0:	80 33       	cpi	r24, 0x30	; 48
    20d2:	19 f4       	brne	.+6      	; 0x20da <vfprintf+0x20a>
    20d4:	11 50       	subi	r17, 0x01	; 1
    20d6:	11 11       	cpse	r17, r1
    20d8:	f4 cf       	rjmp	.-24     	; 0x20c2 <vfprintf+0x1f2>
    20da:	97 fe       	sbrs	r9, 7
    20dc:	0e c0       	rjmp	.+28     	; 0x20fa <vfprintf+0x22a>
    20de:	44 24       	eor	r4, r4
    20e0:	43 94       	inc	r4
    20e2:	41 0e       	add	r4, r17
    20e4:	81 2f       	mov	r24, r17
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	c8 16       	cp	r12, r24
    20ea:	d9 06       	cpc	r13, r25
    20ec:	2c f4       	brge	.+10     	; 0x20f8 <vfprintf+0x228>
    20ee:	1c 19       	sub	r17, r12
    20f0:	04 c0       	rjmp	.+8      	; 0x20fa <vfprintf+0x22a>
    20f2:	44 24       	eor	r4, r4
    20f4:	43 94       	inc	r4
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <vfprintf+0x22a>
    20f8:	10 e0       	ldi	r17, 0x00	; 0
    20fa:	97 fe       	sbrs	r9, 7
    20fc:	06 c0       	rjmp	.+12     	; 0x210a <vfprintf+0x23a>
    20fe:	1c 14       	cp	r1, r12
    2100:	1d 04       	cpc	r1, r13
    2102:	34 f4       	brge	.+12     	; 0x2110 <vfprintf+0x240>
    2104:	c6 01       	movw	r24, r12
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	05 c0       	rjmp	.+10     	; 0x2114 <vfprintf+0x244>
    210a:	85 e0       	ldi	r24, 0x05	; 5
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <vfprintf+0x244>
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	01 11       	cpse	r16, r1
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	11 23       	and	r17, r17
    211a:	31 f0       	breq	.+12     	; 0x2128 <vfprintf+0x258>
    211c:	21 2f       	mov	r18, r17
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	2f 5f       	subi	r18, 0xFF	; 255
    2122:	3f 4f       	sbci	r19, 0xFF	; 255
    2124:	82 0f       	add	r24, r18
    2126:	93 1f       	adc	r25, r19
    2128:	25 2d       	mov	r18, r5
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	82 17       	cp	r24, r18
    212e:	93 07       	cpc	r25, r19
    2130:	14 f4       	brge	.+4      	; 0x2136 <vfprintf+0x266>
    2132:	58 1a       	sub	r5, r24
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <vfprintf+0x268>
    2136:	51 2c       	mov	r5, r1
    2138:	89 2d       	mov	r24, r9
    213a:	89 70       	andi	r24, 0x09	; 9
    213c:	49 f4       	brne	.+18     	; 0x2150 <vfprintf+0x280>
    213e:	55 20       	and	r5, r5
    2140:	39 f0       	breq	.+14     	; 0x2150 <vfprintf+0x280>
    2142:	b7 01       	movw	r22, r14
    2144:	80 e2       	ldi	r24, 0x20	; 32
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    214c:	5a 94       	dec	r5
    214e:	f7 cf       	rjmp	.-18     	; 0x213e <vfprintf+0x26e>
    2150:	00 23       	and	r16, r16
    2152:	29 f0       	breq	.+10     	; 0x215e <vfprintf+0x28e>
    2154:	b7 01       	movw	r22, r14
    2156:	80 2f       	mov	r24, r16
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    215e:	93 fc       	sbrc	r9, 3
    2160:	09 c0       	rjmp	.+18     	; 0x2174 <vfprintf+0x2a4>
    2162:	55 20       	and	r5, r5
    2164:	39 f0       	breq	.+14     	; 0x2174 <vfprintf+0x2a4>
    2166:	b7 01       	movw	r22, r14
    2168:	80 e3       	ldi	r24, 0x30	; 48
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    2170:	5a 94       	dec	r5
    2172:	f7 cf       	rjmp	.-18     	; 0x2162 <vfprintf+0x292>
    2174:	97 fe       	sbrs	r9, 7
    2176:	4c c0       	rjmp	.+152    	; 0x2210 <vfprintf+0x340>
    2178:	46 01       	movw	r8, r12
    217a:	d7 fe       	sbrs	r13, 7
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <vfprintf+0x2b2>
    217e:	81 2c       	mov	r8, r1
    2180:	91 2c       	mov	r9, r1
    2182:	c6 01       	movw	r24, r12
    2184:	88 19       	sub	r24, r8
    2186:	99 09       	sbc	r25, r9
    2188:	f3 01       	movw	r30, r6
    218a:	e8 0f       	add	r30, r24
    218c:	f9 1f       	adc	r31, r25
    218e:	ed 87       	std	Y+13, r30	; 0x0d
    2190:	fe 87       	std	Y+14, r31	; 0x0e
    2192:	96 01       	movw	r18, r12
    2194:	24 19       	sub	r18, r4
    2196:	31 09       	sbc	r19, r1
    2198:	2f 87       	std	Y+15, r18	; 0x0f
    219a:	38 8b       	std	Y+16, r19	; 0x10
    219c:	01 2f       	mov	r16, r17
    219e:	10 e0       	ldi	r17, 0x00	; 0
    21a0:	11 95       	neg	r17
    21a2:	01 95       	neg	r16
    21a4:	11 09       	sbc	r17, r1
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	83 16       	cp	r8, r19
    21aa:	93 06       	cpc	r9, r19
    21ac:	29 f4       	brne	.+10     	; 0x21b8 <vfprintf+0x2e8>
    21ae:	b7 01       	movw	r22, r14
    21b0:	8e e2       	ldi	r24, 0x2E	; 46
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    21b8:	c8 14       	cp	r12, r8
    21ba:	d9 04       	cpc	r13, r9
    21bc:	4c f0       	brlt	.+18     	; 0x21d0 <vfprintf+0x300>
    21be:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c0:	98 89       	ldd	r25, Y+16	; 0x10
    21c2:	88 15       	cp	r24, r8
    21c4:	99 05       	cpc	r25, r9
    21c6:	24 f4       	brge	.+8      	; 0x21d0 <vfprintf+0x300>
    21c8:	ed 85       	ldd	r30, Y+13	; 0x0d
    21ca:	fe 85       	ldd	r31, Y+14	; 0x0e
    21cc:	81 81       	ldd	r24, Z+1	; 0x01
    21ce:	01 c0       	rjmp	.+2      	; 0x21d2 <vfprintf+0x302>
    21d0:	80 e3       	ldi	r24, 0x30	; 48
    21d2:	f1 e0       	ldi	r31, 0x01	; 1
    21d4:	8f 1a       	sub	r8, r31
    21d6:	91 08       	sbc	r9, r1
    21d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    21da:	3e 85       	ldd	r19, Y+14	; 0x0e
    21dc:	2f 5f       	subi	r18, 0xFF	; 255
    21de:	3f 4f       	sbci	r19, 0xFF	; 255
    21e0:	2d 87       	std	Y+13, r18	; 0x0d
    21e2:	3e 87       	std	Y+14, r19	; 0x0e
    21e4:	80 16       	cp	r8, r16
    21e6:	91 06       	cpc	r9, r17
    21e8:	2c f0       	brlt	.+10     	; 0x21f4 <vfprintf+0x324>
    21ea:	b7 01       	movw	r22, r14
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    21f2:	d9 cf       	rjmp	.-78     	; 0x21a6 <vfprintf+0x2d6>
    21f4:	c8 14       	cp	r12, r8
    21f6:	d9 04       	cpc	r13, r9
    21f8:	41 f4       	brne	.+16     	; 0x220a <vfprintf+0x33a>
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	96 33       	cpi	r25, 0x36	; 54
    21fe:	20 f4       	brcc	.+8      	; 0x2208 <vfprintf+0x338>
    2200:	95 33       	cpi	r25, 0x35	; 53
    2202:	19 f4       	brne	.+6      	; 0x220a <vfprintf+0x33a>
    2204:	3c 85       	ldd	r19, Y+12	; 0x0c
    2206:	34 ff       	sbrs	r19, 4
    2208:	81 e3       	ldi	r24, 0x31	; 49
    220a:	b7 01       	movw	r22, r14
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	4e c0       	rjmp	.+156    	; 0x22ac <vfprintf+0x3dc>
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	81 33       	cpi	r24, 0x31	; 49
    2214:	19 f0       	breq	.+6      	; 0x221c <vfprintf+0x34c>
    2216:	9c 85       	ldd	r25, Y+12	; 0x0c
    2218:	9f 7e       	andi	r25, 0xEF	; 239
    221a:	9c 87       	std	Y+12, r25	; 0x0c
    221c:	b7 01       	movw	r22, r14
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    2224:	11 11       	cpse	r17, r1
    2226:	05 c0       	rjmp	.+10     	; 0x2232 <vfprintf+0x362>
    2228:	94 fc       	sbrc	r9, 4
    222a:	18 c0       	rjmp	.+48     	; 0x225c <vfprintf+0x38c>
    222c:	85 e6       	ldi	r24, 0x65	; 101
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	17 c0       	rjmp	.+46     	; 0x2260 <vfprintf+0x390>
    2232:	b7 01       	movw	r22, r14
    2234:	8e e2       	ldi	r24, 0x2E	; 46
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    223c:	1e 5f       	subi	r17, 0xFE	; 254
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	01 e0       	ldi	r16, 0x01	; 1
    2242:	08 0f       	add	r16, r24
    2244:	f3 01       	movw	r30, r6
    2246:	e8 0f       	add	r30, r24
    2248:	f1 1d       	adc	r31, r1
    224a:	80 81       	ld	r24, Z
    224c:	b7 01       	movw	r22, r14
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    2254:	80 2f       	mov	r24, r16
    2256:	01 13       	cpse	r16, r17
    2258:	f3 cf       	rjmp	.-26     	; 0x2240 <vfprintf+0x370>
    225a:	e6 cf       	rjmp	.-52     	; 0x2228 <vfprintf+0x358>
    225c:	85 e4       	ldi	r24, 0x45	; 69
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	b7 01       	movw	r22, r14
    2262:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    2266:	d7 fc       	sbrc	r13, 7
    2268:	06 c0       	rjmp	.+12     	; 0x2276 <vfprintf+0x3a6>
    226a:	c1 14       	cp	r12, r1
    226c:	d1 04       	cpc	r13, r1
    226e:	41 f4       	brne	.+16     	; 0x2280 <vfprintf+0x3b0>
    2270:	ec 85       	ldd	r30, Y+12	; 0x0c
    2272:	e4 ff       	sbrs	r30, 4
    2274:	05 c0       	rjmp	.+10     	; 0x2280 <vfprintf+0x3b0>
    2276:	d1 94       	neg	r13
    2278:	c1 94       	neg	r12
    227a:	d1 08       	sbc	r13, r1
    227c:	8d e2       	ldi	r24, 0x2D	; 45
    227e:	01 c0       	rjmp	.+2      	; 0x2282 <vfprintf+0x3b2>
    2280:	8b e2       	ldi	r24, 0x2B	; 43
    2282:	b7 01       	movw	r22, r14
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    228a:	80 e3       	ldi	r24, 0x30	; 48
    228c:	2a e0       	ldi	r18, 0x0A	; 10
    228e:	c2 16       	cp	r12, r18
    2290:	d1 04       	cpc	r13, r1
    2292:	2c f0       	brlt	.+10     	; 0x229e <vfprintf+0x3ce>
    2294:	8f 5f       	subi	r24, 0xFF	; 255
    2296:	fa e0       	ldi	r31, 0x0A	; 10
    2298:	cf 1a       	sub	r12, r31
    229a:	d1 08       	sbc	r13, r1
    229c:	f7 cf       	rjmp	.-18     	; 0x228c <vfprintf+0x3bc>
    229e:	b7 01       	movw	r22, r14
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    22a6:	b7 01       	movw	r22, r14
    22a8:	c6 01       	movw	r24, r12
    22aa:	c0 96       	adiw	r24, 0x30	; 48
    22ac:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    22b0:	54 c1       	rjmp	.+680    	; 0x255a <vfprintf+0x68a>
    22b2:	83 36       	cpi	r24, 0x63	; 99
    22b4:	31 f0       	breq	.+12     	; 0x22c2 <vfprintf+0x3f2>
    22b6:	83 37       	cpi	r24, 0x73	; 115
    22b8:	79 f0       	breq	.+30     	; 0x22d8 <vfprintf+0x408>
    22ba:	83 35       	cpi	r24, 0x53	; 83
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <vfprintf+0x3f0>
    22be:	56 c0       	rjmp	.+172    	; 0x236c <vfprintf+0x49c>
    22c0:	20 c0       	rjmp	.+64     	; 0x2302 <vfprintf+0x432>
    22c2:	56 01       	movw	r10, r12
    22c4:	32 e0       	ldi	r19, 0x02	; 2
    22c6:	a3 0e       	add	r10, r19
    22c8:	b1 1c       	adc	r11, r1
    22ca:	f6 01       	movw	r30, r12
    22cc:	80 81       	ld	r24, Z
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	01 e0       	ldi	r16, 0x01	; 1
    22d2:	10 e0       	ldi	r17, 0x00	; 0
    22d4:	63 01       	movw	r12, r6
    22d6:	12 c0       	rjmp	.+36     	; 0x22fc <vfprintf+0x42c>
    22d8:	56 01       	movw	r10, r12
    22da:	f2 e0       	ldi	r31, 0x02	; 2
    22dc:	af 0e       	add	r10, r31
    22de:	b1 1c       	adc	r11, r1
    22e0:	f6 01       	movw	r30, r12
    22e2:	c0 80       	ld	r12, Z
    22e4:	d1 80       	ldd	r13, Z+1	; 0x01
    22e6:	96 fe       	sbrs	r9, 6
    22e8:	03 c0       	rjmp	.+6      	; 0x22f0 <vfprintf+0x420>
    22ea:	61 2f       	mov	r22, r17
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <vfprintf+0x424>
    22f0:	6f ef       	ldi	r22, 0xFF	; 255
    22f2:	7f ef       	ldi	r23, 0xFF	; 255
    22f4:	c6 01       	movw	r24, r12
    22f6:	0e 94 2c 14 	call	0x2858	; 0x2858 <strnlen>
    22fa:	8c 01       	movw	r16, r24
    22fc:	f9 2d       	mov	r31, r9
    22fe:	ff 77       	andi	r31, 0x7F	; 127
    2300:	14 c0       	rjmp	.+40     	; 0x232a <vfprintf+0x45a>
    2302:	56 01       	movw	r10, r12
    2304:	22 e0       	ldi	r18, 0x02	; 2
    2306:	a2 0e       	add	r10, r18
    2308:	b1 1c       	adc	r11, r1
    230a:	f6 01       	movw	r30, r12
    230c:	c0 80       	ld	r12, Z
    230e:	d1 80       	ldd	r13, Z+1	; 0x01
    2310:	96 fe       	sbrs	r9, 6
    2312:	03 c0       	rjmp	.+6      	; 0x231a <vfprintf+0x44a>
    2314:	61 2f       	mov	r22, r17
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	02 c0       	rjmp	.+4      	; 0x231e <vfprintf+0x44e>
    231a:	6f ef       	ldi	r22, 0xFF	; 255
    231c:	7f ef       	ldi	r23, 0xFF	; 255
    231e:	c6 01       	movw	r24, r12
    2320:	0e 94 14 14 	call	0x2828	; 0x2828 <strnlen_P>
    2324:	8c 01       	movw	r16, r24
    2326:	f9 2d       	mov	r31, r9
    2328:	f0 68       	ori	r31, 0x80	; 128
    232a:	9f 2e       	mov	r9, r31
    232c:	f3 fd       	sbrc	r31, 3
    232e:	1a c0       	rjmp	.+52     	; 0x2364 <vfprintf+0x494>
    2330:	85 2d       	mov	r24, r5
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	08 17       	cp	r16, r24
    2336:	19 07       	cpc	r17, r25
    2338:	a8 f4       	brcc	.+42     	; 0x2364 <vfprintf+0x494>
    233a:	b7 01       	movw	r22, r14
    233c:	80 e2       	ldi	r24, 0x20	; 32
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    2344:	5a 94       	dec	r5
    2346:	f4 cf       	rjmp	.-24     	; 0x2330 <vfprintf+0x460>
    2348:	f6 01       	movw	r30, r12
    234a:	97 fc       	sbrc	r9, 7
    234c:	85 91       	lpm	r24, Z+
    234e:	97 fe       	sbrs	r9, 7
    2350:	81 91       	ld	r24, Z+
    2352:	6f 01       	movw	r12, r30
    2354:	b7 01       	movw	r22, r14
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    235c:	51 10       	cpse	r5, r1
    235e:	5a 94       	dec	r5
    2360:	01 50       	subi	r16, 0x01	; 1
    2362:	11 09       	sbc	r17, r1
    2364:	01 15       	cp	r16, r1
    2366:	11 05       	cpc	r17, r1
    2368:	79 f7       	brne	.-34     	; 0x2348 <vfprintf+0x478>
    236a:	f7 c0       	rjmp	.+494    	; 0x255a <vfprintf+0x68a>
    236c:	84 36       	cpi	r24, 0x64	; 100
    236e:	11 f0       	breq	.+4      	; 0x2374 <vfprintf+0x4a4>
    2370:	89 36       	cpi	r24, 0x69	; 105
    2372:	61 f5       	brne	.+88     	; 0x23cc <vfprintf+0x4fc>
    2374:	56 01       	movw	r10, r12
    2376:	97 fe       	sbrs	r9, 7
    2378:	09 c0       	rjmp	.+18     	; 0x238c <vfprintf+0x4bc>
    237a:	24 e0       	ldi	r18, 0x04	; 4
    237c:	a2 0e       	add	r10, r18
    237e:	b1 1c       	adc	r11, r1
    2380:	f6 01       	movw	r30, r12
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	0a c0       	rjmp	.+20     	; 0x23a0 <vfprintf+0x4d0>
    238c:	f2 e0       	ldi	r31, 0x02	; 2
    238e:	af 0e       	add	r10, r31
    2390:	b1 1c       	adc	r11, r1
    2392:	f6 01       	movw	r30, r12
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	07 2e       	mov	r0, r23
    239a:	00 0c       	add	r0, r0
    239c:	88 0b       	sbc	r24, r24
    239e:	99 0b       	sbc	r25, r25
    23a0:	f9 2d       	mov	r31, r9
    23a2:	ff 76       	andi	r31, 0x6F	; 111
    23a4:	9f 2e       	mov	r9, r31
    23a6:	97 ff       	sbrs	r25, 7
    23a8:	09 c0       	rjmp	.+18     	; 0x23bc <vfprintf+0x4ec>
    23aa:	90 95       	com	r25
    23ac:	80 95       	com	r24
    23ae:	70 95       	com	r23
    23b0:	61 95       	neg	r22
    23b2:	7f 4f       	sbci	r23, 0xFF	; 255
    23b4:	8f 4f       	sbci	r24, 0xFF	; 255
    23b6:	9f 4f       	sbci	r25, 0xFF	; 255
    23b8:	f0 68       	ori	r31, 0x80	; 128
    23ba:	9f 2e       	mov	r9, r31
    23bc:	2a e0       	ldi	r18, 0x0A	; 10
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	a3 01       	movw	r20, r6
    23c2:	0e 94 a3 14 	call	0x2946	; 0x2946 <__ultoa_invert>
    23c6:	c8 2e       	mov	r12, r24
    23c8:	c6 18       	sub	r12, r6
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <vfprintf+0x57a>
    23cc:	09 2d       	mov	r16, r9
    23ce:	85 37       	cpi	r24, 0x75	; 117
    23d0:	21 f4       	brne	.+8      	; 0x23da <vfprintf+0x50a>
    23d2:	0f 7e       	andi	r16, 0xEF	; 239
    23d4:	2a e0       	ldi	r18, 0x0A	; 10
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	1d c0       	rjmp	.+58     	; 0x2414 <vfprintf+0x544>
    23da:	09 7f       	andi	r16, 0xF9	; 249
    23dc:	8f 36       	cpi	r24, 0x6F	; 111
    23de:	91 f0       	breq	.+36     	; 0x2404 <vfprintf+0x534>
    23e0:	18 f4       	brcc	.+6      	; 0x23e8 <vfprintf+0x518>
    23e2:	88 35       	cpi	r24, 0x58	; 88
    23e4:	59 f0       	breq	.+22     	; 0x23fc <vfprintf+0x52c>
    23e6:	c3 c0       	rjmp	.+390    	; 0x256e <vfprintf+0x69e>
    23e8:	80 37       	cpi	r24, 0x70	; 112
    23ea:	19 f0       	breq	.+6      	; 0x23f2 <vfprintf+0x522>
    23ec:	88 37       	cpi	r24, 0x78	; 120
    23ee:	11 f0       	breq	.+4      	; 0x23f4 <vfprintf+0x524>
    23f0:	be c0       	rjmp	.+380    	; 0x256e <vfprintf+0x69e>
    23f2:	00 61       	ori	r16, 0x10	; 16
    23f4:	04 ff       	sbrs	r16, 4
    23f6:	09 c0       	rjmp	.+18     	; 0x240a <vfprintf+0x53a>
    23f8:	04 60       	ori	r16, 0x04	; 4
    23fa:	07 c0       	rjmp	.+14     	; 0x240a <vfprintf+0x53a>
    23fc:	94 fe       	sbrs	r9, 4
    23fe:	08 c0       	rjmp	.+16     	; 0x2410 <vfprintf+0x540>
    2400:	06 60       	ori	r16, 0x06	; 6
    2402:	06 c0       	rjmp	.+12     	; 0x2410 <vfprintf+0x540>
    2404:	28 e0       	ldi	r18, 0x08	; 8
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	05 c0       	rjmp	.+10     	; 0x2414 <vfprintf+0x544>
    240a:	20 e1       	ldi	r18, 0x10	; 16
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <vfprintf+0x544>
    2410:	20 e1       	ldi	r18, 0x10	; 16
    2412:	32 e0       	ldi	r19, 0x02	; 2
    2414:	56 01       	movw	r10, r12
    2416:	07 ff       	sbrs	r16, 7
    2418:	09 c0       	rjmp	.+18     	; 0x242c <vfprintf+0x55c>
    241a:	84 e0       	ldi	r24, 0x04	; 4
    241c:	a8 0e       	add	r10, r24
    241e:	b1 1c       	adc	r11, r1
    2420:	f6 01       	movw	r30, r12
    2422:	60 81       	ld	r22, Z
    2424:	71 81       	ldd	r23, Z+1	; 0x01
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	08 c0       	rjmp	.+16     	; 0x243c <vfprintf+0x56c>
    242c:	f2 e0       	ldi	r31, 0x02	; 2
    242e:	af 0e       	add	r10, r31
    2430:	b1 1c       	adc	r11, r1
    2432:	f6 01       	movw	r30, r12
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a3 01       	movw	r20, r6
    243e:	0e 94 a3 14 	call	0x2946	; 0x2946 <__ultoa_invert>
    2442:	c8 2e       	mov	r12, r24
    2444:	c6 18       	sub	r12, r6
    2446:	0f 77       	andi	r16, 0x7F	; 127
    2448:	90 2e       	mov	r9, r16
    244a:	96 fe       	sbrs	r9, 6
    244c:	0b c0       	rjmp	.+22     	; 0x2464 <vfprintf+0x594>
    244e:	09 2d       	mov	r16, r9
    2450:	0e 7f       	andi	r16, 0xFE	; 254
    2452:	c1 16       	cp	r12, r17
    2454:	50 f4       	brcc	.+20     	; 0x246a <vfprintf+0x59a>
    2456:	94 fe       	sbrs	r9, 4
    2458:	0a c0       	rjmp	.+20     	; 0x246e <vfprintf+0x59e>
    245a:	92 fc       	sbrc	r9, 2
    245c:	08 c0       	rjmp	.+16     	; 0x246e <vfprintf+0x59e>
    245e:	09 2d       	mov	r16, r9
    2460:	0e 7e       	andi	r16, 0xEE	; 238
    2462:	05 c0       	rjmp	.+10     	; 0x246e <vfprintf+0x59e>
    2464:	dc 2c       	mov	r13, r12
    2466:	09 2d       	mov	r16, r9
    2468:	03 c0       	rjmp	.+6      	; 0x2470 <vfprintf+0x5a0>
    246a:	dc 2c       	mov	r13, r12
    246c:	01 c0       	rjmp	.+2      	; 0x2470 <vfprintf+0x5a0>
    246e:	d1 2e       	mov	r13, r17
    2470:	04 ff       	sbrs	r16, 4
    2472:	0d c0       	rjmp	.+26     	; 0x248e <vfprintf+0x5be>
    2474:	fe 01       	movw	r30, r28
    2476:	ec 0d       	add	r30, r12
    2478:	f1 1d       	adc	r31, r1
    247a:	80 81       	ld	r24, Z
    247c:	80 33       	cpi	r24, 0x30	; 48
    247e:	11 f4       	brne	.+4      	; 0x2484 <vfprintf+0x5b4>
    2480:	09 7e       	andi	r16, 0xE9	; 233
    2482:	09 c0       	rjmp	.+18     	; 0x2496 <vfprintf+0x5c6>
    2484:	02 ff       	sbrs	r16, 2
    2486:	06 c0       	rjmp	.+12     	; 0x2494 <vfprintf+0x5c4>
    2488:	d3 94       	inc	r13
    248a:	d3 94       	inc	r13
    248c:	04 c0       	rjmp	.+8      	; 0x2496 <vfprintf+0x5c6>
    248e:	80 2f       	mov	r24, r16
    2490:	86 78       	andi	r24, 0x86	; 134
    2492:	09 f0       	breq	.+2      	; 0x2496 <vfprintf+0x5c6>
    2494:	d3 94       	inc	r13
    2496:	03 fd       	sbrc	r16, 3
    2498:	11 c0       	rjmp	.+34     	; 0x24bc <vfprintf+0x5ec>
    249a:	00 ff       	sbrs	r16, 0
    249c:	06 c0       	rjmp	.+12     	; 0x24aa <vfprintf+0x5da>
    249e:	1c 2d       	mov	r17, r12
    24a0:	d5 14       	cp	r13, r5
    24a2:	80 f4       	brcc	.+32     	; 0x24c4 <vfprintf+0x5f4>
    24a4:	15 0d       	add	r17, r5
    24a6:	1d 19       	sub	r17, r13
    24a8:	0d c0       	rjmp	.+26     	; 0x24c4 <vfprintf+0x5f4>
    24aa:	d5 14       	cp	r13, r5
    24ac:	58 f4       	brcc	.+22     	; 0x24c4 <vfprintf+0x5f4>
    24ae:	b7 01       	movw	r22, r14
    24b0:	80 e2       	ldi	r24, 0x20	; 32
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    24b8:	d3 94       	inc	r13
    24ba:	f7 cf       	rjmp	.-18     	; 0x24aa <vfprintf+0x5da>
    24bc:	d5 14       	cp	r13, r5
    24be:	10 f4       	brcc	.+4      	; 0x24c4 <vfprintf+0x5f4>
    24c0:	5d 18       	sub	r5, r13
    24c2:	01 c0       	rjmp	.+2      	; 0x24c6 <vfprintf+0x5f6>
    24c4:	51 2c       	mov	r5, r1
    24c6:	04 ff       	sbrs	r16, 4
    24c8:	10 c0       	rjmp	.+32     	; 0x24ea <vfprintf+0x61a>
    24ca:	b7 01       	movw	r22, r14
    24cc:	80 e3       	ldi	r24, 0x30	; 48
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    24d4:	02 ff       	sbrs	r16, 2
    24d6:	17 c0       	rjmp	.+46     	; 0x2506 <vfprintf+0x636>
    24d8:	01 fd       	sbrc	r16, 1
    24da:	03 c0       	rjmp	.+6      	; 0x24e2 <vfprintf+0x612>
    24dc:	88 e7       	ldi	r24, 0x78	; 120
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <vfprintf+0x616>
    24e2:	88 e5       	ldi	r24, 0x58	; 88
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	b7 01       	movw	r22, r14
    24e8:	0c c0       	rjmp	.+24     	; 0x2502 <vfprintf+0x632>
    24ea:	80 2f       	mov	r24, r16
    24ec:	86 78       	andi	r24, 0x86	; 134
    24ee:	59 f0       	breq	.+22     	; 0x2506 <vfprintf+0x636>
    24f0:	01 ff       	sbrs	r16, 1
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <vfprintf+0x628>
    24f4:	8b e2       	ldi	r24, 0x2B	; 43
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <vfprintf+0x62a>
    24f8:	80 e2       	ldi	r24, 0x20	; 32
    24fa:	07 fd       	sbrc	r16, 7
    24fc:	8d e2       	ldi	r24, 0x2D	; 45
    24fe:	b7 01       	movw	r22, r14
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    2506:	c1 16       	cp	r12, r17
    2508:	38 f4       	brcc	.+14     	; 0x2518 <vfprintf+0x648>
    250a:	b7 01       	movw	r22, r14
    250c:	80 e3       	ldi	r24, 0x30	; 48
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    2514:	11 50       	subi	r17, 0x01	; 1
    2516:	f7 cf       	rjmp	.-18     	; 0x2506 <vfprintf+0x636>
    2518:	ca 94       	dec	r12
    251a:	f3 01       	movw	r30, r6
    251c:	ec 0d       	add	r30, r12
    251e:	f1 1d       	adc	r31, r1
    2520:	80 81       	ld	r24, Z
    2522:	b7 01       	movw	r22, r14
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    252a:	c1 10       	cpse	r12, r1
    252c:	f5 cf       	rjmp	.-22     	; 0x2518 <vfprintf+0x648>
    252e:	15 c0       	rjmp	.+42     	; 0x255a <vfprintf+0x68a>
    2530:	f4 e0       	ldi	r31, 0x04	; 4
    2532:	f5 15       	cp	r31, r5
    2534:	60 f5       	brcc	.+88     	; 0x258e <vfprintf+0x6be>
    2536:	84 e0       	ldi	r24, 0x04	; 4
    2538:	58 1a       	sub	r5, r24
    253a:	93 fe       	sbrs	r9, 3
    253c:	1f c0       	rjmp	.+62     	; 0x257c <vfprintf+0x6ac>
    253e:	01 11       	cpse	r16, r1
    2540:	27 c0       	rjmp	.+78     	; 0x2590 <vfprintf+0x6c0>
    2542:	2c 85       	ldd	r18, Y+12	; 0x0c
    2544:	23 ff       	sbrs	r18, 3
    2546:	2a c0       	rjmp	.+84     	; 0x259c <vfprintf+0x6cc>
    2548:	0c e7       	ldi	r16, 0x7C	; 124
    254a:	10 e0       	ldi	r17, 0x00	; 0
    254c:	39 2d       	mov	r19, r9
    254e:	30 71       	andi	r19, 0x10	; 16
    2550:	93 2e       	mov	r9, r19
    2552:	f8 01       	movw	r30, r16
    2554:	84 91       	lpm	r24, Z
    2556:	81 11       	cpse	r24, r1
    2558:	24 c0       	rjmp	.+72     	; 0x25a2 <vfprintf+0x6d2>
    255a:	55 20       	and	r5, r5
    255c:	09 f4       	brne	.+2      	; 0x2560 <vfprintf+0x690>
    255e:	e4 cc       	rjmp	.-1592   	; 0x1f28 <vfprintf+0x58>
    2560:	b7 01       	movw	r22, r14
    2562:	80 e2       	ldi	r24, 0x20	; 32
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    256a:	5a 94       	dec	r5
    256c:	f6 cf       	rjmp	.-20     	; 0x255a <vfprintf+0x68a>
    256e:	f7 01       	movw	r30, r14
    2570:	86 81       	ldd	r24, Z+6	; 0x06
    2572:	97 81       	ldd	r25, Z+7	; 0x07
    2574:	26 c0       	rjmp	.+76     	; 0x25c2 <vfprintf+0x6f2>
    2576:	8f ef       	ldi	r24, 0xFF	; 255
    2578:	9f ef       	ldi	r25, 0xFF	; 255
    257a:	23 c0       	rjmp	.+70     	; 0x25c2 <vfprintf+0x6f2>
    257c:	b7 01       	movw	r22, r14
    257e:	80 e2       	ldi	r24, 0x20	; 32
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    2586:	5a 94       	dec	r5
    2588:	51 10       	cpse	r5, r1
    258a:	f8 cf       	rjmp	.-16     	; 0x257c <vfprintf+0x6ac>
    258c:	d8 cf       	rjmp	.-80     	; 0x253e <vfprintf+0x66e>
    258e:	51 2c       	mov	r5, r1
    2590:	b7 01       	movw	r22, r14
    2592:	80 2f       	mov	r24, r16
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    259a:	d3 cf       	rjmp	.-90     	; 0x2542 <vfprintf+0x672>
    259c:	00 e8       	ldi	r16, 0x80	; 128
    259e:	10 e0       	ldi	r17, 0x00	; 0
    25a0:	d5 cf       	rjmp	.-86     	; 0x254c <vfprintf+0x67c>
    25a2:	91 10       	cpse	r9, r1
    25a4:	80 52       	subi	r24, 0x20	; 32
    25a6:	b7 01       	movw	r22, r14
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 37 14 	call	0x286e	; 0x286e <fputc>
    25ae:	0f 5f       	subi	r16, 0xFF	; 255
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	cf cf       	rjmp	.-98     	; 0x2552 <vfprintf+0x682>
    25b4:	23 e0       	ldi	r18, 0x03	; 3
    25b6:	25 15       	cp	r18, r5
    25b8:	10 f4       	brcc	.+4      	; 0x25be <vfprintf+0x6ee>
    25ba:	83 e0       	ldi	r24, 0x03	; 3
    25bc:	bd cf       	rjmp	.-134    	; 0x2538 <vfprintf+0x668>
    25be:	51 2c       	mov	r5, r1
    25c0:	c0 cf       	rjmp	.-128    	; 0x2542 <vfprintf+0x672>
    25c2:	60 96       	adiw	r28, 0x10	; 16
    25c4:	e2 e1       	ldi	r30, 0x12	; 18
    25c6:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__epilogue_restores__>

000025ca <__udivmodsi4>:
    25ca:	a1 e2       	ldi	r26, 0x21	; 33
    25cc:	1a 2e       	mov	r1, r26
    25ce:	aa 1b       	sub	r26, r26
    25d0:	bb 1b       	sub	r27, r27
    25d2:	fd 01       	movw	r30, r26
    25d4:	0d c0       	rjmp	.+26     	; 0x25f0 <__udivmodsi4_ep>

000025d6 <__udivmodsi4_loop>:
    25d6:	aa 1f       	adc	r26, r26
    25d8:	bb 1f       	adc	r27, r27
    25da:	ee 1f       	adc	r30, r30
    25dc:	ff 1f       	adc	r31, r31
    25de:	a2 17       	cp	r26, r18
    25e0:	b3 07       	cpc	r27, r19
    25e2:	e4 07       	cpc	r30, r20
    25e4:	f5 07       	cpc	r31, r21
    25e6:	20 f0       	brcs	.+8      	; 0x25f0 <__udivmodsi4_ep>
    25e8:	a2 1b       	sub	r26, r18
    25ea:	b3 0b       	sbc	r27, r19
    25ec:	e4 0b       	sbc	r30, r20
    25ee:	f5 0b       	sbc	r31, r21

000025f0 <__udivmodsi4_ep>:
    25f0:	66 1f       	adc	r22, r22
    25f2:	77 1f       	adc	r23, r23
    25f4:	88 1f       	adc	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	1a 94       	dec	r1
    25fa:	69 f7       	brne	.-38     	; 0x25d6 <__udivmodsi4_loop>
    25fc:	60 95       	com	r22
    25fe:	70 95       	com	r23
    2600:	80 95       	com	r24
    2602:	90 95       	com	r25
    2604:	9b 01       	movw	r18, r22
    2606:	ac 01       	movw	r20, r24
    2608:	bd 01       	movw	r22, r26
    260a:	cf 01       	movw	r24, r30
    260c:	08 95       	ret

0000260e <__prologue_saves__>:
    260e:	2f 92       	push	r2
    2610:	3f 92       	push	r3
    2612:	4f 92       	push	r4
    2614:	5f 92       	push	r5
    2616:	6f 92       	push	r6
    2618:	7f 92       	push	r7
    261a:	8f 92       	push	r8
    261c:	9f 92       	push	r9
    261e:	af 92       	push	r10
    2620:	bf 92       	push	r11
    2622:	cf 92       	push	r12
    2624:	df 92       	push	r13
    2626:	ef 92       	push	r14
    2628:	ff 92       	push	r15
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	ca 1b       	sub	r28, r26
    2638:	db 0b       	sbc	r29, r27
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	09 94       	ijmp

00002640 <__epilogue_restores__>:
    2640:	2a 88       	ldd	r2, Y+18	; 0x12
    2642:	39 88       	ldd	r3, Y+17	; 0x11
    2644:	48 88       	ldd	r4, Y+16	; 0x10
    2646:	5f 84       	ldd	r5, Y+15	; 0x0f
    2648:	6e 84       	ldd	r6, Y+14	; 0x0e
    264a:	7d 84       	ldd	r7, Y+13	; 0x0d
    264c:	8c 84       	ldd	r8, Y+12	; 0x0c
    264e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2650:	aa 84       	ldd	r10, Y+10	; 0x0a
    2652:	b9 84       	ldd	r11, Y+9	; 0x09
    2654:	c8 84       	ldd	r12, Y+8	; 0x08
    2656:	df 80       	ldd	r13, Y+7	; 0x07
    2658:	ee 80       	ldd	r14, Y+6	; 0x06
    265a:	fd 80       	ldd	r15, Y+5	; 0x05
    265c:	0c 81       	ldd	r16, Y+4	; 0x04
    265e:	1b 81       	ldd	r17, Y+3	; 0x03
    2660:	aa 81       	ldd	r26, Y+2	; 0x02
    2662:	b9 81       	ldd	r27, Y+1	; 0x01
    2664:	ce 0f       	add	r28, r30
    2666:	d1 1d       	adc	r29, r1
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	ed 01       	movw	r28, r26
    266e:	08 95       	ret

00002670 <atof>:
    2670:	66 27       	eor	r22, r22
    2672:	77 27       	eor	r23, r23
    2674:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <strtod>

00002678 <__ftoa_engine>:
    2678:	28 30       	cpi	r18, 0x08	; 8
    267a:	08 f0       	brcs	.+2      	; 0x267e <__ftoa_engine+0x6>
    267c:	27 e0       	ldi	r18, 0x07	; 7
    267e:	33 27       	eor	r19, r19
    2680:	da 01       	movw	r26, r20
    2682:	99 0f       	add	r25, r25
    2684:	31 1d       	adc	r19, r1
    2686:	87 fd       	sbrc	r24, 7
    2688:	91 60       	ori	r25, 0x01	; 1
    268a:	00 96       	adiw	r24, 0x00	; 0
    268c:	61 05       	cpc	r22, r1
    268e:	71 05       	cpc	r23, r1
    2690:	39 f4       	brne	.+14     	; 0x26a0 <__ftoa_engine+0x28>
    2692:	32 60       	ori	r19, 0x02	; 2
    2694:	2e 5f       	subi	r18, 0xFE	; 254
    2696:	3d 93       	st	X+, r19
    2698:	30 e3       	ldi	r19, 0x30	; 48
    269a:	2a 95       	dec	r18
    269c:	e1 f7       	brne	.-8      	; 0x2696 <__ftoa_engine+0x1e>
    269e:	08 95       	ret
    26a0:	9f 3f       	cpi	r25, 0xFF	; 255
    26a2:	30 f0       	brcs	.+12     	; 0x26b0 <__ftoa_engine+0x38>
    26a4:	80 38       	cpi	r24, 0x80	; 128
    26a6:	71 05       	cpc	r23, r1
    26a8:	61 05       	cpc	r22, r1
    26aa:	09 f0       	breq	.+2      	; 0x26ae <__ftoa_engine+0x36>
    26ac:	3c 5f       	subi	r19, 0xFC	; 252
    26ae:	3c 5f       	subi	r19, 0xFC	; 252
    26b0:	3d 93       	st	X+, r19
    26b2:	91 30       	cpi	r25, 0x01	; 1
    26b4:	08 f0       	brcs	.+2      	; 0x26b8 <__ftoa_engine+0x40>
    26b6:	80 68       	ori	r24, 0x80	; 128
    26b8:	91 1d       	adc	r25, r1
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	1f 93       	push	r17
    26c0:	0f 93       	push	r16
    26c2:	ff 92       	push	r15
    26c4:	ef 92       	push	r14
    26c6:	19 2f       	mov	r17, r25
    26c8:	98 7f       	andi	r25, 0xF8	; 248
    26ca:	96 95       	lsr	r25
    26cc:	e9 2f       	mov	r30, r25
    26ce:	96 95       	lsr	r25
    26d0:	96 95       	lsr	r25
    26d2:	e9 0f       	add	r30, r25
    26d4:	ff 27       	eor	r31, r31
    26d6:	e2 52       	subi	r30, 0x22	; 34
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	99 27       	eor	r25, r25
    26dc:	33 27       	eor	r19, r19
    26de:	ee 24       	eor	r14, r14
    26e0:	ff 24       	eor	r15, r15
    26e2:	a7 01       	movw	r20, r14
    26e4:	e7 01       	movw	r28, r14
    26e6:	05 90       	lpm	r0, Z+
    26e8:	08 94       	sec
    26ea:	07 94       	ror	r0
    26ec:	28 f4       	brcc	.+10     	; 0x26f8 <__ftoa_engine+0x80>
    26ee:	36 0f       	add	r19, r22
    26f0:	e7 1e       	adc	r14, r23
    26f2:	f8 1e       	adc	r15, r24
    26f4:	49 1f       	adc	r20, r25
    26f6:	51 1d       	adc	r21, r1
    26f8:	66 0f       	add	r22, r22
    26fa:	77 1f       	adc	r23, r23
    26fc:	88 1f       	adc	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	06 94       	lsr	r0
    2702:	a1 f7       	brne	.-24     	; 0x26ec <__ftoa_engine+0x74>
    2704:	05 90       	lpm	r0, Z+
    2706:	07 94       	ror	r0
    2708:	28 f4       	brcc	.+10     	; 0x2714 <__ftoa_engine+0x9c>
    270a:	e7 0e       	add	r14, r23
    270c:	f8 1e       	adc	r15, r24
    270e:	49 1f       	adc	r20, r25
    2710:	56 1f       	adc	r21, r22
    2712:	c1 1d       	adc	r28, r1
    2714:	77 0f       	add	r23, r23
    2716:	88 1f       	adc	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	66 1f       	adc	r22, r22
    271c:	06 94       	lsr	r0
    271e:	a1 f7       	brne	.-24     	; 0x2708 <__ftoa_engine+0x90>
    2720:	05 90       	lpm	r0, Z+
    2722:	07 94       	ror	r0
    2724:	28 f4       	brcc	.+10     	; 0x2730 <__ftoa_engine+0xb8>
    2726:	f8 0e       	add	r15, r24
    2728:	49 1f       	adc	r20, r25
    272a:	56 1f       	adc	r21, r22
    272c:	c7 1f       	adc	r28, r23
    272e:	d1 1d       	adc	r29, r1
    2730:	88 0f       	add	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	66 1f       	adc	r22, r22
    2736:	77 1f       	adc	r23, r23
    2738:	06 94       	lsr	r0
    273a:	a1 f7       	brne	.-24     	; 0x2724 <__ftoa_engine+0xac>
    273c:	05 90       	lpm	r0, Z+
    273e:	07 94       	ror	r0
    2740:	20 f4       	brcc	.+8      	; 0x274a <__ftoa_engine+0xd2>
    2742:	49 0f       	add	r20, r25
    2744:	56 1f       	adc	r21, r22
    2746:	c7 1f       	adc	r28, r23
    2748:	d8 1f       	adc	r29, r24
    274a:	99 0f       	add	r25, r25
    274c:	66 1f       	adc	r22, r22
    274e:	77 1f       	adc	r23, r23
    2750:	88 1f       	adc	r24, r24
    2752:	06 94       	lsr	r0
    2754:	a9 f7       	brne	.-22     	; 0x2740 <__ftoa_engine+0xc8>
    2756:	84 91       	lpm	r24, Z
    2758:	10 95       	com	r17
    275a:	17 70       	andi	r17, 0x07	; 7
    275c:	41 f0       	breq	.+16     	; 0x276e <__ftoa_engine+0xf6>
    275e:	d6 95       	lsr	r29
    2760:	c7 95       	ror	r28
    2762:	57 95       	ror	r21
    2764:	47 95       	ror	r20
    2766:	f7 94       	ror	r15
    2768:	e7 94       	ror	r14
    276a:	1a 95       	dec	r17
    276c:	c1 f7       	brne	.-16     	; 0x275e <__ftoa_engine+0xe6>
    276e:	e4 e8       	ldi	r30, 0x84	; 132
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	68 94       	set
    2774:	15 90       	lpm	r1, Z+
    2776:	15 91       	lpm	r17, Z+
    2778:	35 91       	lpm	r19, Z+
    277a:	65 91       	lpm	r22, Z+
    277c:	95 91       	lpm	r25, Z+
    277e:	05 90       	lpm	r0, Z+
    2780:	7f e2       	ldi	r23, 0x2F	; 47
    2782:	73 95       	inc	r23
    2784:	e1 18       	sub	r14, r1
    2786:	f1 0a       	sbc	r15, r17
    2788:	43 0b       	sbc	r20, r19
    278a:	56 0b       	sbc	r21, r22
    278c:	c9 0b       	sbc	r28, r25
    278e:	d0 09       	sbc	r29, r0
    2790:	c0 f7       	brcc	.-16     	; 0x2782 <__ftoa_engine+0x10a>
    2792:	e1 0c       	add	r14, r1
    2794:	f1 1e       	adc	r15, r17
    2796:	43 1f       	adc	r20, r19
    2798:	56 1f       	adc	r21, r22
    279a:	c9 1f       	adc	r28, r25
    279c:	d0 1d       	adc	r29, r0
    279e:	7e f4       	brtc	.+30     	; 0x27be <__ftoa_engine+0x146>
    27a0:	70 33       	cpi	r23, 0x30	; 48
    27a2:	11 f4       	brne	.+4      	; 0x27a8 <__ftoa_engine+0x130>
    27a4:	8a 95       	dec	r24
    27a6:	e6 cf       	rjmp	.-52     	; 0x2774 <__ftoa_engine+0xfc>
    27a8:	e8 94       	clt
    27aa:	01 50       	subi	r16, 0x01	; 1
    27ac:	30 f0       	brcs	.+12     	; 0x27ba <__ftoa_engine+0x142>
    27ae:	08 0f       	add	r16, r24
    27b0:	0a f4       	brpl	.+2      	; 0x27b4 <__ftoa_engine+0x13c>
    27b2:	00 27       	eor	r16, r16
    27b4:	02 17       	cp	r16, r18
    27b6:	08 f4       	brcc	.+2      	; 0x27ba <__ftoa_engine+0x142>
    27b8:	20 2f       	mov	r18, r16
    27ba:	23 95       	inc	r18
    27bc:	02 2f       	mov	r16, r18
    27be:	7a 33       	cpi	r23, 0x3A	; 58
    27c0:	28 f0       	brcs	.+10     	; 0x27cc <__ftoa_engine+0x154>
    27c2:	79 e3       	ldi	r23, 0x39	; 57
    27c4:	7d 93       	st	X+, r23
    27c6:	2a 95       	dec	r18
    27c8:	e9 f7       	brne	.-6      	; 0x27c4 <__ftoa_engine+0x14c>
    27ca:	10 c0       	rjmp	.+32     	; 0x27ec <__ftoa_engine+0x174>
    27cc:	7d 93       	st	X+, r23
    27ce:	2a 95       	dec	r18
    27d0:	89 f6       	brne	.-94     	; 0x2774 <__ftoa_engine+0xfc>
    27d2:	06 94       	lsr	r0
    27d4:	97 95       	ror	r25
    27d6:	67 95       	ror	r22
    27d8:	37 95       	ror	r19
    27da:	17 95       	ror	r17
    27dc:	17 94       	ror	r1
    27de:	e1 18       	sub	r14, r1
    27e0:	f1 0a       	sbc	r15, r17
    27e2:	43 0b       	sbc	r20, r19
    27e4:	56 0b       	sbc	r21, r22
    27e6:	c9 0b       	sbc	r28, r25
    27e8:	d0 09       	sbc	r29, r0
    27ea:	98 f0       	brcs	.+38     	; 0x2812 <__ftoa_engine+0x19a>
    27ec:	23 95       	inc	r18
    27ee:	7e 91       	ld	r23, -X
    27f0:	73 95       	inc	r23
    27f2:	7a 33       	cpi	r23, 0x3A	; 58
    27f4:	08 f0       	brcs	.+2      	; 0x27f8 <__ftoa_engine+0x180>
    27f6:	70 e3       	ldi	r23, 0x30	; 48
    27f8:	7c 93       	st	X, r23
    27fa:	20 13       	cpse	r18, r16
    27fc:	b8 f7       	brcc	.-18     	; 0x27ec <__ftoa_engine+0x174>
    27fe:	7e 91       	ld	r23, -X
    2800:	70 61       	ori	r23, 0x10	; 16
    2802:	7d 93       	st	X+, r23
    2804:	30 f0       	brcs	.+12     	; 0x2812 <__ftoa_engine+0x19a>
    2806:	83 95       	inc	r24
    2808:	71 e3       	ldi	r23, 0x31	; 49
    280a:	7d 93       	st	X+, r23
    280c:	70 e3       	ldi	r23, 0x30	; 48
    280e:	2a 95       	dec	r18
    2810:	e1 f7       	brne	.-8      	; 0x280a <__ftoa_engine+0x192>
    2812:	11 24       	eor	r1, r1
    2814:	ef 90       	pop	r14
    2816:	ff 90       	pop	r15
    2818:	0f 91       	pop	r16
    281a:	1f 91       	pop	r17
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	99 27       	eor	r25, r25
    2822:	87 fd       	sbrc	r24, 7
    2824:	90 95       	com	r25
    2826:	08 95       	ret

00002828 <strnlen_P>:
    2828:	fc 01       	movw	r30, r24
    282a:	05 90       	lpm	r0, Z+
    282c:	61 50       	subi	r22, 0x01	; 1
    282e:	70 40       	sbci	r23, 0x00	; 0
    2830:	01 10       	cpse	r0, r1
    2832:	d8 f7       	brcc	.-10     	; 0x282a <strnlen_P+0x2>
    2834:	80 95       	com	r24
    2836:	90 95       	com	r25
    2838:	8e 0f       	add	r24, r30
    283a:	9f 1f       	adc	r25, r31
    283c:	08 95       	ret

0000283e <memcmp>:
    283e:	fb 01       	movw	r30, r22
    2840:	dc 01       	movw	r26, r24
    2842:	04 c0       	rjmp	.+8      	; 0x284c <memcmp+0xe>
    2844:	8d 91       	ld	r24, X+
    2846:	01 90       	ld	r0, Z+
    2848:	80 19       	sub	r24, r0
    284a:	21 f4       	brne	.+8      	; 0x2854 <memcmp+0x16>
    284c:	41 50       	subi	r20, 0x01	; 1
    284e:	50 40       	sbci	r21, 0x00	; 0
    2850:	c8 f7       	brcc	.-14     	; 0x2844 <memcmp+0x6>
    2852:	88 1b       	sub	r24, r24
    2854:	99 0b       	sbc	r25, r25
    2856:	08 95       	ret

00002858 <strnlen>:
    2858:	fc 01       	movw	r30, r24
    285a:	61 50       	subi	r22, 0x01	; 1
    285c:	70 40       	sbci	r23, 0x00	; 0
    285e:	01 90       	ld	r0, Z+
    2860:	01 10       	cpse	r0, r1
    2862:	d8 f7       	brcc	.-10     	; 0x285a <strnlen+0x2>
    2864:	80 95       	com	r24
    2866:	90 95       	com	r25
    2868:	8e 0f       	add	r24, r30
    286a:	9f 1f       	adc	r25, r31
    286c:	08 95       	ret

0000286e <fputc>:
    286e:	0f 93       	push	r16
    2870:	1f 93       	push	r17
    2872:	cf 93       	push	r28
    2874:	df 93       	push	r29
    2876:	fb 01       	movw	r30, r22
    2878:	23 81       	ldd	r18, Z+3	; 0x03
    287a:	21 fd       	sbrc	r18, 1
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <fputc+0x16>
    287e:	8f ef       	ldi	r24, 0xFF	; 255
    2880:	9f ef       	ldi	r25, 0xFF	; 255
    2882:	2c c0       	rjmp	.+88     	; 0x28dc <fputc+0x6e>
    2884:	22 ff       	sbrs	r18, 2
    2886:	16 c0       	rjmp	.+44     	; 0x28b4 <fputc+0x46>
    2888:	46 81       	ldd	r20, Z+6	; 0x06
    288a:	57 81       	ldd	r21, Z+7	; 0x07
    288c:	24 81       	ldd	r18, Z+4	; 0x04
    288e:	35 81       	ldd	r19, Z+5	; 0x05
    2890:	42 17       	cp	r20, r18
    2892:	53 07       	cpc	r21, r19
    2894:	44 f4       	brge	.+16     	; 0x28a6 <fputc+0x38>
    2896:	a0 81       	ld	r26, Z
    2898:	b1 81       	ldd	r27, Z+1	; 0x01
    289a:	9d 01       	movw	r18, r26
    289c:	2f 5f       	subi	r18, 0xFF	; 255
    289e:	3f 4f       	sbci	r19, 0xFF	; 255
    28a0:	20 83       	st	Z, r18
    28a2:	31 83       	std	Z+1, r19	; 0x01
    28a4:	8c 93       	st	X, r24
    28a6:	26 81       	ldd	r18, Z+6	; 0x06
    28a8:	37 81       	ldd	r19, Z+7	; 0x07
    28aa:	2f 5f       	subi	r18, 0xFF	; 255
    28ac:	3f 4f       	sbci	r19, 0xFF	; 255
    28ae:	26 83       	std	Z+6, r18	; 0x06
    28b0:	37 83       	std	Z+7, r19	; 0x07
    28b2:	14 c0       	rjmp	.+40     	; 0x28dc <fputc+0x6e>
    28b4:	8b 01       	movw	r16, r22
    28b6:	ec 01       	movw	r28, r24
    28b8:	fb 01       	movw	r30, r22
    28ba:	00 84       	ldd	r0, Z+8	; 0x08
    28bc:	f1 85       	ldd	r31, Z+9	; 0x09
    28be:	e0 2d       	mov	r30, r0
    28c0:	09 95       	icall
    28c2:	89 2b       	or	r24, r25
    28c4:	e1 f6       	brne	.-72     	; 0x287e <fputc+0x10>
    28c6:	d8 01       	movw	r26, r16
    28c8:	16 96       	adiw	r26, 0x06	; 6
    28ca:	8d 91       	ld	r24, X+
    28cc:	9c 91       	ld	r25, X
    28ce:	17 97       	sbiw	r26, 0x07	; 7
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	16 96       	adiw	r26, 0x06	; 6
    28d4:	8d 93       	st	X+, r24
    28d6:	9c 93       	st	X, r25
    28d8:	17 97       	sbiw	r26, 0x07	; 7
    28da:	ce 01       	movw	r24, r28
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	08 95       	ret

000028e6 <snprintf>:
    28e6:	ae e0       	ldi	r26, 0x0E	; 14
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e9 e7       	ldi	r30, 0x79	; 121
    28ec:	f4 e1       	ldi	r31, 0x14	; 20
    28ee:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__+0x1c>
    28f2:	0d 89       	ldd	r16, Y+21	; 0x15
    28f4:	1e 89       	ldd	r17, Y+22	; 0x16
    28f6:	8f 89       	ldd	r24, Y+23	; 0x17
    28f8:	98 8d       	ldd	r25, Y+24	; 0x18
    28fa:	26 e0       	ldi	r18, 0x06	; 6
    28fc:	2c 83       	std	Y+4, r18	; 0x04
    28fe:	09 83       	std	Y+1, r16	; 0x01
    2900:	1a 83       	std	Y+2, r17	; 0x02
    2902:	97 ff       	sbrs	r25, 7
    2904:	02 c0       	rjmp	.+4      	; 0x290a <snprintf+0x24>
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e8       	ldi	r25, 0x80	; 128
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	8d 83       	std	Y+5, r24	; 0x05
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	ae 01       	movw	r20, r28
    2912:	45 5e       	subi	r20, 0xE5	; 229
    2914:	5f 4f       	sbci	r21, 0xFF	; 255
    2916:	69 8d       	ldd	r22, Y+25	; 0x19
    2918:	7a 8d       	ldd	r23, Y+26	; 0x1a
    291a:	ce 01       	movw	r24, r28
    291c:	01 96       	adiw	r24, 0x01	; 1
    291e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <vfprintf>
    2922:	4d 81       	ldd	r20, Y+5	; 0x05
    2924:	5e 81       	ldd	r21, Y+6	; 0x06
    2926:	57 fd       	sbrc	r21, 7
    2928:	0a c0       	rjmp	.+20     	; 0x293e <snprintf+0x58>
    292a:	2f 81       	ldd	r18, Y+7	; 0x07
    292c:	38 85       	ldd	r19, Y+8	; 0x08
    292e:	42 17       	cp	r20, r18
    2930:	53 07       	cpc	r21, r19
    2932:	0c f4       	brge	.+2      	; 0x2936 <snprintf+0x50>
    2934:	9a 01       	movw	r18, r20
    2936:	f8 01       	movw	r30, r16
    2938:	e2 0f       	add	r30, r18
    293a:	f3 1f       	adc	r31, r19
    293c:	10 82       	st	Z, r1
    293e:	2e 96       	adiw	r28, 0x0e	; 14
    2940:	e4 e0       	ldi	r30, 0x04	; 4
    2942:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__epilogue_restores__+0x1c>

00002946 <__ultoa_invert>:
    2946:	fa 01       	movw	r30, r20
    2948:	aa 27       	eor	r26, r26
    294a:	28 30       	cpi	r18, 0x08	; 8
    294c:	51 f1       	breq	.+84     	; 0x29a2 <__ultoa_invert+0x5c>
    294e:	20 31       	cpi	r18, 0x10	; 16
    2950:	81 f1       	breq	.+96     	; 0x29b2 <__ultoa_invert+0x6c>
    2952:	e8 94       	clt
    2954:	6f 93       	push	r22
    2956:	6e 7f       	andi	r22, 0xFE	; 254
    2958:	6e 5f       	subi	r22, 0xFE	; 254
    295a:	7f 4f       	sbci	r23, 0xFF	; 255
    295c:	8f 4f       	sbci	r24, 0xFF	; 255
    295e:	9f 4f       	sbci	r25, 0xFF	; 255
    2960:	af 4f       	sbci	r26, 0xFF	; 255
    2962:	b1 e0       	ldi	r27, 0x01	; 1
    2964:	3e d0       	rcall	.+124    	; 0x29e2 <__ultoa_invert+0x9c>
    2966:	b4 e0       	ldi	r27, 0x04	; 4
    2968:	3c d0       	rcall	.+120    	; 0x29e2 <__ultoa_invert+0x9c>
    296a:	67 0f       	add	r22, r23
    296c:	78 1f       	adc	r23, r24
    296e:	89 1f       	adc	r24, r25
    2970:	9a 1f       	adc	r25, r26
    2972:	a1 1d       	adc	r26, r1
    2974:	68 0f       	add	r22, r24
    2976:	79 1f       	adc	r23, r25
    2978:	8a 1f       	adc	r24, r26
    297a:	91 1d       	adc	r25, r1
    297c:	a1 1d       	adc	r26, r1
    297e:	6a 0f       	add	r22, r26
    2980:	71 1d       	adc	r23, r1
    2982:	81 1d       	adc	r24, r1
    2984:	91 1d       	adc	r25, r1
    2986:	a1 1d       	adc	r26, r1
    2988:	20 d0       	rcall	.+64     	; 0x29ca <__ultoa_invert+0x84>
    298a:	09 f4       	brne	.+2      	; 0x298e <__ultoa_invert+0x48>
    298c:	68 94       	set
    298e:	3f 91       	pop	r19
    2990:	2a e0       	ldi	r18, 0x0A	; 10
    2992:	26 9f       	mul	r18, r22
    2994:	11 24       	eor	r1, r1
    2996:	30 19       	sub	r19, r0
    2998:	30 5d       	subi	r19, 0xD0	; 208
    299a:	31 93       	st	Z+, r19
    299c:	de f6       	brtc	.-74     	; 0x2954 <__ultoa_invert+0xe>
    299e:	cf 01       	movw	r24, r30
    29a0:	08 95       	ret
    29a2:	46 2f       	mov	r20, r22
    29a4:	47 70       	andi	r20, 0x07	; 7
    29a6:	40 5d       	subi	r20, 0xD0	; 208
    29a8:	41 93       	st	Z+, r20
    29aa:	b3 e0       	ldi	r27, 0x03	; 3
    29ac:	0f d0       	rcall	.+30     	; 0x29cc <__ultoa_invert+0x86>
    29ae:	c9 f7       	brne	.-14     	; 0x29a2 <__ultoa_invert+0x5c>
    29b0:	f6 cf       	rjmp	.-20     	; 0x299e <__ultoa_invert+0x58>
    29b2:	46 2f       	mov	r20, r22
    29b4:	4f 70       	andi	r20, 0x0F	; 15
    29b6:	40 5d       	subi	r20, 0xD0	; 208
    29b8:	4a 33       	cpi	r20, 0x3A	; 58
    29ba:	18 f0       	brcs	.+6      	; 0x29c2 <__ultoa_invert+0x7c>
    29bc:	49 5d       	subi	r20, 0xD9	; 217
    29be:	31 fd       	sbrc	r19, 1
    29c0:	40 52       	subi	r20, 0x20	; 32
    29c2:	41 93       	st	Z+, r20
    29c4:	02 d0       	rcall	.+4      	; 0x29ca <__ultoa_invert+0x84>
    29c6:	a9 f7       	brne	.-22     	; 0x29b2 <__ultoa_invert+0x6c>
    29c8:	ea cf       	rjmp	.-44     	; 0x299e <__ultoa_invert+0x58>
    29ca:	b4 e0       	ldi	r27, 0x04	; 4
    29cc:	a6 95       	lsr	r26
    29ce:	97 95       	ror	r25
    29d0:	87 95       	ror	r24
    29d2:	77 95       	ror	r23
    29d4:	67 95       	ror	r22
    29d6:	ba 95       	dec	r27
    29d8:	c9 f7       	brne	.-14     	; 0x29cc <__ultoa_invert+0x86>
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	61 05       	cpc	r22, r1
    29de:	71 05       	cpc	r23, r1
    29e0:	08 95       	ret
    29e2:	9b 01       	movw	r18, r22
    29e4:	ac 01       	movw	r20, r24
    29e6:	0a 2e       	mov	r0, r26
    29e8:	06 94       	lsr	r0
    29ea:	57 95       	ror	r21
    29ec:	47 95       	ror	r20
    29ee:	37 95       	ror	r19
    29f0:	27 95       	ror	r18
    29f2:	ba 95       	dec	r27
    29f4:	c9 f7       	brne	.-14     	; 0x29e8 <__ultoa_invert+0xa2>
    29f6:	62 0f       	add	r22, r18
    29f8:	73 1f       	adc	r23, r19
    29fa:	84 1f       	adc	r24, r20
    29fc:	95 1f       	adc	r25, r21
    29fe:	a0 1d       	adc	r26, r0
    2a00:	08 95       	ret

00002a02 <strtod>:
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e7 e0       	ldi	r30, 0x07	; 7
    2a08:	f5 e1       	ldi	r31, 0x15	; 21
    2a0a:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__prologue_saves__+0xc>
    2a0e:	ec 01       	movw	r28, r24
    2a10:	6b 01       	movw	r12, r22
    2a12:	61 15       	cp	r22, r1
    2a14:	71 05       	cpc	r23, r1
    2a16:	19 f0       	breq	.+6      	; 0x2a1e <strtod+0x1c>
    2a18:	fb 01       	movw	r30, r22
    2a1a:	80 83       	st	Z, r24
    2a1c:	91 83       	std	Z+1, r25	; 0x01
    2a1e:	7e 01       	movw	r14, r28
    2a20:	ff ef       	ldi	r31, 0xFF	; 255
    2a22:	ef 1a       	sub	r14, r31
    2a24:	ff 0a       	sbc	r15, r31
    2a26:	08 81       	ld	r16, Y
    2a28:	80 2f       	mov	r24, r16
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <isspace>
    2a30:	89 2b       	or	r24, r25
    2a32:	11 f0       	breq	.+4      	; 0x2a38 <strtod+0x36>
    2a34:	e7 01       	movw	r28, r14
    2a36:	f3 cf       	rjmp	.-26     	; 0x2a1e <strtod+0x1c>
    2a38:	0d 32       	cpi	r16, 0x2D	; 45
    2a3a:	39 f4       	brne	.+14     	; 0x2a4a <strtod+0x48>
    2a3c:	7e 01       	movw	r14, r28
    2a3e:	82 e0       	ldi	r24, 0x02	; 2
    2a40:	e8 0e       	add	r14, r24
    2a42:	f1 1c       	adc	r15, r1
    2a44:	09 81       	ldd	r16, Y+1	; 0x01
    2a46:	11 e0       	ldi	r17, 0x01	; 1
    2a48:	08 c0       	rjmp	.+16     	; 0x2a5a <strtod+0x58>
    2a4a:	0b 32       	cpi	r16, 0x2B	; 43
    2a4c:	29 f4       	brne	.+10     	; 0x2a58 <strtod+0x56>
    2a4e:	7e 01       	movw	r14, r28
    2a50:	92 e0       	ldi	r25, 0x02	; 2
    2a52:	e9 0e       	add	r14, r25
    2a54:	f1 1c       	adc	r15, r1
    2a56:	09 81       	ldd	r16, Y+1	; 0x01
    2a58:	10 e0       	ldi	r17, 0x00	; 0
    2a5a:	e7 01       	movw	r28, r14
    2a5c:	21 97       	sbiw	r28, 0x01	; 1
    2a5e:	43 e0       	ldi	r20, 0x03	; 3
    2a60:	50 e0       	ldi	r21, 0x00	; 0
    2a62:	66 e8       	ldi	r22, 0x86	; 134
    2a64:	71 e0       	ldi	r23, 0x01	; 1
    2a66:	ce 01       	movw	r24, r28
    2a68:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <strncasecmp_P>
    2a6c:	89 2b       	or	r24, r25
    2a6e:	c1 f4       	brne	.+48     	; 0x2aa0 <strtod+0x9e>
    2a70:	23 96       	adiw	r28, 0x03	; 3
    2a72:	45 e0       	ldi	r20, 0x05	; 5
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	61 e8       	ldi	r22, 0x81	; 129
    2a78:	71 e0       	ldi	r23, 0x01	; 1
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <strncasecmp_P>
    2a80:	89 2b       	or	r24, r25
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <strtod+0x84>
    2a84:	25 96       	adiw	r28, 0x05	; 5
    2a86:	c1 14       	cp	r12, r1
    2a88:	d1 04       	cpc	r13, r1
    2a8a:	19 f0       	breq	.+6      	; 0x2a92 <strtod+0x90>
    2a8c:	f6 01       	movw	r30, r12
    2a8e:	c0 83       	st	Z, r28
    2a90:	d1 83       	std	Z+1, r29	; 0x01
    2a92:	11 11       	cpse	r17, r1
    2a94:	f6 c0       	rjmp	.+492    	; 0x2c82 <strtod+0x280>
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	80 e8       	ldi	r24, 0x80	; 128
    2a9c:	9f e7       	ldi	r25, 0x7F	; 127
    2a9e:	fa c0       	rjmp	.+500    	; 0x2c94 <strtod+0x292>
    2aa0:	43 e0       	ldi	r20, 0x03	; 3
    2aa2:	50 e0       	ldi	r21, 0x00	; 0
    2aa4:	6e e7       	ldi	r22, 0x7E	; 126
    2aa6:	71 e0       	ldi	r23, 0x01	; 1
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <strncasecmp_P>
    2aae:	89 2b       	or	r24, r25
    2ab0:	59 f4       	brne	.+22     	; 0x2ac8 <strtod+0xc6>
    2ab2:	c1 14       	cp	r12, r1
    2ab4:	d1 04       	cpc	r13, r1
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <strtod+0xb8>
    2ab8:	e9 c0       	rjmp	.+466    	; 0x2c8c <strtod+0x28a>
    2aba:	f2 e0       	ldi	r31, 0x02	; 2
    2abc:	ef 0e       	add	r14, r31
    2abe:	f1 1c       	adc	r15, r1
    2ac0:	f6 01       	movw	r30, r12
    2ac2:	e0 82       	st	Z, r14
    2ac4:	f1 82       	std	Z+1, r15	; 0x01
    2ac6:	e2 c0       	rjmp	.+452    	; 0x2c8c <strtod+0x28a>
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	a9 01       	movw	r20, r18
    2ace:	c0 e0       	ldi	r28, 0x00	; 0
    2ad0:	d0 e0       	ldi	r29, 0x00	; 0
    2ad2:	f7 01       	movw	r30, r14
    2ad4:	80 ed       	ldi	r24, 0xD0	; 208
    2ad6:	a8 2e       	mov	r10, r24
    2ad8:	a0 0e       	add	r10, r16
    2ada:	89 e0       	ldi	r24, 0x09	; 9
    2adc:	8a 15       	cp	r24, r10
    2ade:	30 f1       	brcs	.+76     	; 0x2b2c <strtod+0x12a>
    2ae0:	91 2f       	mov	r25, r17
    2ae2:	92 60       	ori	r25, 0x02	; 2
    2ae4:	b9 2e       	mov	r11, r25
    2ae6:	81 2f       	mov	r24, r17
    2ae8:	88 70       	andi	r24, 0x08	; 8
    2aea:	12 ff       	sbrs	r17, 2
    2aec:	04 c0       	rjmp	.+8      	; 0x2af6 <strtod+0xf4>
    2aee:	81 11       	cpse	r24, r1
    2af0:	24 c0       	rjmp	.+72     	; 0x2b3a <strtod+0x138>
    2af2:	21 96       	adiw	r28, 0x01	; 1
    2af4:	22 c0       	rjmp	.+68     	; 0x2b3a <strtod+0x138>
    2af6:	81 11       	cpse	r24, r1
    2af8:	21 97       	sbiw	r28, 0x01	; 1
    2afa:	a5 e0       	ldi	r26, 0x05	; 5
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__muluhisi3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	aa 1f       	adc	r26, r26
    2b0c:	bb 1f       	adc	r27, r27
    2b0e:	9c 01       	movw	r18, r24
    2b10:	ad 01       	movw	r20, r26
    2b12:	2a 0d       	add	r18, r10
    2b14:	31 1d       	adc	r19, r1
    2b16:	41 1d       	adc	r20, r1
    2b18:	51 1d       	adc	r21, r1
    2b1a:	28 39       	cpi	r18, 0x98	; 152
    2b1c:	89 e9       	ldi	r24, 0x99	; 153
    2b1e:	38 07       	cpc	r19, r24
    2b20:	48 07       	cpc	r20, r24
    2b22:	89 e1       	ldi	r24, 0x19	; 25
    2b24:	58 07       	cpc	r21, r24
    2b26:	48 f0       	brcs	.+18     	; 0x2b3a <strtod+0x138>
    2b28:	16 60       	ori	r17, 0x06	; 6
    2b2a:	06 c0       	rjmp	.+12     	; 0x2b38 <strtod+0x136>
    2b2c:	9e ef       	ldi	r25, 0xFE	; 254
    2b2e:	a9 12       	cpse	r10, r25
    2b30:	0a c0       	rjmp	.+20     	; 0x2b46 <strtod+0x144>
    2b32:	13 fd       	sbrc	r17, 3
    2b34:	40 c0       	rjmp	.+128    	; 0x2bb6 <strtod+0x1b4>
    2b36:	18 60       	ori	r17, 0x08	; 8
    2b38:	b1 2e       	mov	r11, r17
    2b3a:	8f ef       	ldi	r24, 0xFF	; 255
    2b3c:	e8 1a       	sub	r14, r24
    2b3e:	f8 0a       	sbc	r15, r24
    2b40:	00 81       	ld	r16, Z
    2b42:	1b 2d       	mov	r17, r11
    2b44:	c6 cf       	rjmp	.-116    	; 0x2ad2 <strtod+0xd0>
    2b46:	80 2f       	mov	r24, r16
    2b48:	8f 7d       	andi	r24, 0xDF	; 223
    2b4a:	85 34       	cpi	r24, 0x45	; 69
    2b4c:	a1 f5       	brne	.+104    	; 0x2bb6 <strtod+0x1b4>
    2b4e:	80 81       	ld	r24, Z
    2b50:	8d 32       	cpi	r24, 0x2D	; 45
    2b52:	11 f4       	brne	.+4      	; 0x2b58 <strtod+0x156>
    2b54:	10 61       	ori	r17, 0x10	; 16
    2b56:	06 c0       	rjmp	.+12     	; 0x2b64 <strtod+0x162>
    2b58:	8b 32       	cpi	r24, 0x2B	; 43
    2b5a:	21 f0       	breq	.+8      	; 0x2b64 <strtod+0x162>
    2b5c:	31 96       	adiw	r30, 0x01	; 1
    2b5e:	61 e0       	ldi	r22, 0x01	; 1
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	04 c0       	rjmp	.+8      	; 0x2b6c <strtod+0x16a>
    2b64:	81 81       	ldd	r24, Z+1	; 0x01
    2b66:	32 96       	adiw	r30, 0x02	; 2
    2b68:	62 e0       	ldi	r22, 0x02	; 2
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	80 53       	subi	r24, 0x30	; 48
    2b6e:	8a 30       	cpi	r24, 0x0A	; 10
    2b70:	18 f0       	brcs	.+6      	; 0x2b78 <strtod+0x176>
    2b72:	e6 1b       	sub	r30, r22
    2b74:	f7 0b       	sbc	r31, r23
    2b76:	1f c0       	rjmp	.+62     	; 0x2bb6 <strtod+0x1b4>
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	60 38       	cpi	r22, 0x80	; 128
    2b7e:	9c e0       	ldi	r25, 0x0C	; 12
    2b80:	79 07       	cpc	r23, r25
    2b82:	5c f4       	brge	.+22     	; 0x2b9a <strtod+0x198>
    2b84:	db 01       	movw	r26, r22
    2b86:	aa 0f       	add	r26, r26
    2b88:	bb 1f       	adc	r27, r27
    2b8a:	aa 0f       	add	r26, r26
    2b8c:	bb 1f       	adc	r27, r27
    2b8e:	6a 0f       	add	r22, r26
    2b90:	7b 1f       	adc	r23, r27
    2b92:	66 0f       	add	r22, r22
    2b94:	77 1f       	adc	r23, r23
    2b96:	68 0f       	add	r22, r24
    2b98:	71 1d       	adc	r23, r1
    2b9a:	31 96       	adiw	r30, 0x01	; 1
    2b9c:	df 01       	movw	r26, r30
    2b9e:	11 97       	sbiw	r26, 0x01	; 1
    2ba0:	8c 91       	ld	r24, X
    2ba2:	80 53       	subi	r24, 0x30	; 48
    2ba4:	8a 30       	cpi	r24, 0x0A	; 10
    2ba6:	50 f3       	brcs	.-44     	; 0x2b7c <strtod+0x17a>
    2ba8:	14 ff       	sbrs	r17, 4
    2baa:	03 c0       	rjmp	.+6      	; 0x2bb2 <strtod+0x1b0>
    2bac:	71 95       	neg	r23
    2bae:	61 95       	neg	r22
    2bb0:	71 09       	sbc	r23, r1
    2bb2:	c6 0f       	add	r28, r22
    2bb4:	d7 1f       	adc	r29, r23
    2bb6:	11 ff       	sbrs	r17, 1
    2bb8:	08 c0       	rjmp	.+16     	; 0x2bca <strtod+0x1c8>
    2bba:	c1 14       	cp	r12, r1
    2bbc:	d1 04       	cpc	r13, r1
    2bbe:	29 f0       	breq	.+10     	; 0x2bca <strtod+0x1c8>
    2bc0:	cf 01       	movw	r24, r30
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f6 01       	movw	r30, r12
    2bc6:	80 83       	st	Z, r24
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	ca 01       	movw	r24, r20
    2bcc:	b9 01       	movw	r22, r18
    2bce:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__floatunsisf>
    2bd2:	21 2f       	mov	r18, r17
    2bd4:	23 70       	andi	r18, 0x03	; 3
    2bd6:	23 30       	cpi	r18, 0x03	; 3
    2bd8:	19 f0       	breq	.+6      	; 0x2be0 <strtod+0x1de>
    2bda:	4b 01       	movw	r8, r22
    2bdc:	5c 01       	movw	r10, r24
    2bde:	06 c0       	rjmp	.+12     	; 0x2bec <strtod+0x1ea>
    2be0:	4b 01       	movw	r8, r22
    2be2:	5c 01       	movw	r10, r24
    2be4:	b7 fa       	bst	r11, 7
    2be6:	b0 94       	com	r11
    2be8:	b7 f8       	bld	r11, 7
    2bea:	b0 94       	com	r11
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	a9 01       	movw	r20, r18
    2bf2:	c5 01       	movw	r24, r10
    2bf4:	b4 01       	movw	r22, r8
    2bf6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__cmpsf2>
    2bfa:	88 23       	and	r24, r24
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <strtod+0x1fe>
    2bfe:	3e c0       	rjmp	.+124    	; 0x2c7c <strtod+0x27a>
    2c00:	d7 ff       	sbrs	r29, 7
    2c02:	06 c0       	rjmp	.+12     	; 0x2c10 <strtod+0x20e>
    2c04:	d1 95       	neg	r29
    2c06:	c1 95       	neg	r28
    2c08:	d1 09       	sbc	r29, r1
    2c0a:	0d e9       	ldi	r16, 0x9D	; 157
    2c0c:	11 e0       	ldi	r17, 0x01	; 1
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <strtod+0x212>
    2c10:	05 eb       	ldi	r16, 0xB5	; 181
    2c12:	11 e0       	ldi	r17, 0x01	; 1
    2c14:	68 01       	movw	r12, r16
    2c16:	f8 e1       	ldi	r31, 0x18	; 24
    2c18:	cf 1a       	sub	r12, r31
    2c1a:	d1 08       	sbc	r13, r1
    2c1c:	90 e2       	ldi	r25, 0x20	; 32
    2c1e:	e9 2e       	mov	r14, r25
    2c20:	f1 2c       	mov	r15, r1
    2c22:	ce 15       	cp	r28, r14
    2c24:	df 05       	cpc	r29, r15
    2c26:	74 f0       	brlt	.+28     	; 0x2c44 <strtod+0x242>
    2c28:	f8 01       	movw	r30, r16
    2c2a:	25 91       	lpm	r18, Z+
    2c2c:	35 91       	lpm	r19, Z+
    2c2e:	45 91       	lpm	r20, Z+
    2c30:	54 91       	lpm	r21, Z
    2c32:	c5 01       	movw	r24, r10
    2c34:	b4 01       	movw	r22, r8
    2c36:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
    2c3a:	4b 01       	movw	r8, r22
    2c3c:	5c 01       	movw	r10, r24
    2c3e:	ce 19       	sub	r28, r14
    2c40:	df 09       	sbc	r29, r15
    2c42:	ef cf       	rjmp	.-34     	; 0x2c22 <strtod+0x220>
    2c44:	04 50       	subi	r16, 0x04	; 4
    2c46:	11 09       	sbc	r17, r1
    2c48:	f5 94       	asr	r15
    2c4a:	e7 94       	ror	r14
    2c4c:	0c 15       	cp	r16, r12
    2c4e:	1d 05       	cpc	r17, r13
    2c50:	41 f7       	brne	.-48     	; 0x2c22 <strtod+0x220>
    2c52:	8a 2d       	mov	r24, r10
    2c54:	88 0f       	add	r24, r24
    2c56:	8b 2d       	mov	r24, r11
    2c58:	88 1f       	adc	r24, r24
    2c5a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c5c:	49 f0       	breq	.+18     	; 0x2c70 <strtod+0x26e>
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	a9 01       	movw	r20, r18
    2c64:	c5 01       	movw	r24, r10
    2c66:	b4 01       	movw	r22, r8
    2c68:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__cmpsf2>
    2c6c:	81 11       	cpse	r24, r1
    2c6e:	06 c0       	rjmp	.+12     	; 0x2c7c <strtod+0x27a>
    2c70:	82 e2       	ldi	r24, 0x22	; 34
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	80 93 b0 39 	sts	0x39B0, r24	; 0x8039b0 <errno>
    2c78:	90 93 b1 39 	sts	0x39B1, r25	; 0x8039b1 <errno+0x1>
    2c7c:	c5 01       	movw	r24, r10
    2c7e:	b4 01       	movw	r22, r8
    2c80:	09 c0       	rjmp	.+18     	; 0x2c94 <strtod+0x292>
    2c82:	60 e0       	ldi	r22, 0x00	; 0
    2c84:	70 e0       	ldi	r23, 0x00	; 0
    2c86:	80 e8       	ldi	r24, 0x80	; 128
    2c88:	9f ef       	ldi	r25, 0xFF	; 255
    2c8a:	04 c0       	rjmp	.+8      	; 0x2c94 <strtod+0x292>
    2c8c:	60 e0       	ldi	r22, 0x00	; 0
    2c8e:	70 e0       	ldi	r23, 0x00	; 0
    2c90:	80 ec       	ldi	r24, 0xC0	; 192
    2c92:	9f e7       	ldi	r25, 0x7F	; 127
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	ec e0       	ldi	r30, 0x0C	; 12
    2c9a:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__+0xc>

00002c9e <isspace>:
    2c9e:	91 11       	cpse	r25, r1
    2ca0:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <__ctype_isfalse>
    2ca4:	80 32       	cpi	r24, 0x20	; 32
    2ca6:	19 f0       	breq	.+6      	; 0x2cae <isspace+0x10>
    2ca8:	89 50       	subi	r24, 0x09	; 9
    2caa:	85 50       	subi	r24, 0x05	; 5
    2cac:	c8 f7       	brcc	.-14     	; 0x2ca0 <isspace+0x2>
    2cae:	08 95       	ret

00002cb0 <strncasecmp_P>:
    2cb0:	fb 01       	movw	r30, r22
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	41 50       	subi	r20, 0x01	; 1
    2cb6:	50 40       	sbci	r21, 0x00	; 0
    2cb8:	88 f0       	brcs	.+34     	; 0x2cdc <strncasecmp_P+0x2c>
    2cba:	8d 91       	ld	r24, X+
    2cbc:	81 34       	cpi	r24, 0x41	; 65
    2cbe:	1c f0       	brlt	.+6      	; 0x2cc6 <strncasecmp_P+0x16>
    2cc0:	8b 35       	cpi	r24, 0x5B	; 91
    2cc2:	0c f4       	brge	.+2      	; 0x2cc6 <strncasecmp_P+0x16>
    2cc4:	80 5e       	subi	r24, 0xE0	; 224
    2cc6:	65 91       	lpm	r22, Z+
    2cc8:	61 34       	cpi	r22, 0x41	; 65
    2cca:	1c f0       	brlt	.+6      	; 0x2cd2 <strncasecmp_P+0x22>
    2ccc:	6b 35       	cpi	r22, 0x5B	; 91
    2cce:	0c f4       	brge	.+2      	; 0x2cd2 <strncasecmp_P+0x22>
    2cd0:	60 5e       	subi	r22, 0xE0	; 224
    2cd2:	86 1b       	sub	r24, r22
    2cd4:	61 11       	cpse	r22, r1
    2cd6:	71 f3       	breq	.-36     	; 0x2cb4 <strncasecmp_P+0x4>
    2cd8:	99 0b       	sbc	r25, r25
    2cda:	08 95       	ret
    2cdc:	88 1b       	sub	r24, r24
    2cde:	fc cf       	rjmp	.-8      	; 0x2cd8 <strncasecmp_P+0x28>

00002ce0 <__ctype_isfalse>:
    2ce0:	99 27       	eor	r25, r25
    2ce2:	88 27       	eor	r24, r24

00002ce4 <__ctype_istrue>:
    2ce4:	08 95       	ret

00002ce6 <__muluhisi3>:
    2ce6:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <__umulhisi3>
    2cea:	a5 9f       	mul	r26, r21
    2cec:	90 0d       	add	r25, r0
    2cee:	b4 9f       	mul	r27, r20
    2cf0:	90 0d       	add	r25, r0
    2cf2:	a4 9f       	mul	r26, r20
    2cf4:	80 0d       	add	r24, r0
    2cf6:	91 1d       	adc	r25, r1
    2cf8:	11 24       	eor	r1, r1
    2cfa:	08 95       	ret

00002cfc <__umulhisi3>:
    2cfc:	a2 9f       	mul	r26, r18
    2cfe:	b0 01       	movw	r22, r0
    2d00:	b3 9f       	mul	r27, r19
    2d02:	c0 01       	movw	r24, r0
    2d04:	a3 9f       	mul	r26, r19
    2d06:	70 0d       	add	r23, r0
    2d08:	81 1d       	adc	r24, r1
    2d0a:	11 24       	eor	r1, r1
    2d0c:	91 1d       	adc	r25, r1
    2d0e:	b2 9f       	mul	r27, r18
    2d10:	70 0d       	add	r23, r0
    2d12:	81 1d       	adc	r24, r1
    2d14:	11 24       	eor	r1, r1
    2d16:	91 1d       	adc	r25, r1
    2d18:	08 95       	ret

00002d1a <_exit>:
    2d1a:	f8 94       	cli

00002d1c <__stop_program>:
    2d1c:	ff cf       	rjmp	.-2      	; 0x2d1c <__stop_program>
